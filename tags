!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DosBatch	l,label	/labels/
!_TAG_KIND_DESCRIPTION!DosBatch	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!JavaScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!JavaScript	G,getter	/getters/
!_TAG_KIND_DESCRIPTION!JavaScript	M,field	/fields/
!_TAG_KIND_DESCRIPTION!JavaScript	S,setter	/setters/
!_TAG_KIND_DESCRIPTION!JavaScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!JavaScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!JavaScript	g,generator	/generators/
!_TAG_KIND_DESCRIPTION!JavaScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!JavaScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!JavaScript	v,variable	/global variables/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DosBatch	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!JavaScript	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/jlanzone01/Documents/Code/Auto-GPT/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20230611.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
$schema	autogpt/json_utils/llm_response_format_1.json	/^    "$schema": "http:\/\/json-schema.org\/draft-07\/schema#",$/;"	s
--------------	BULLETIN.md	/^# --------------$/;"	c
-----------------------------	BULLETIN.md	/^# -----------------------------$/;"	c
0	agbenchmark/regression_tests.json	/^            "TestWriteFile"$/;"	s	array:TestBasicCodeGeneration.dependencies
0	agbenchmark/regression_tests.json	/^            "TestWriteFile"$/;"	s	array:TestReadFile.dependencies
0	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["name", "args"],$/;"	s	array:properties.command.required
0	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["text", "reasoning", "plan", "criticism", "speak"],$/;"	s	array:properties.thoughts.required
0	autogpt/json_utils/llm_response_format_1.json	/^    "required": ["thoughts", "command"],$/;"	s	array:required
1	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["name", "args"],$/;"	s	array:properties.command.required
1	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["text", "reasoning", "plan", "criticism", "speak"],$/;"	s	array:properties.thoughts.required
1	autogpt/json_utils/llm_response_format_1.json	/^    "required": ["thoughts", "command"],$/;"	s	array:required
1. Purpose	CODE_OF_CONDUCT.md	/^## 1. Purpose$/;"	s	chapter:Code of Conduct for Auto-GPT
1. Purpose	docs/code-of-conduct.md	/^## 1. Purpose$/;"	s	chapter:Code of Conduct for Auto-GPT
2	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["text", "reasoning", "plan", "criticism", "speak"],$/;"	s	array:properties.thoughts.required
2. Scope	CODE_OF_CONDUCT.md	/^## 2. Scope$/;"	s	chapter:Code of Conduct for Auto-GPT
2. Scope	docs/code-of-conduct.md	/^## 2. Scope$/;"	s	chapter:Code of Conduct for Auto-GPT
3	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["text", "reasoning", "plan", "criticism", "speak"],$/;"	s	array:properties.thoughts.required
3. Our Standards	CODE_OF_CONDUCT.md	/^## 3. Our Standards$/;"	s	chapter:Code of Conduct for Auto-GPT
3. Our Standards	docs/code-of-conduct.md	/^## 3. Our Standards$/;"	s	chapter:Code of Conduct for Auto-GPT
4	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["text", "reasoning", "plan", "criticism", "speak"],$/;"	s	array:properties.thoughts.required
4. Reporting and Enforcement	CODE_OF_CONDUCT.md	/^## 4. Reporting and Enforcement$/;"	s	chapter:Code of Conduct for Auto-GPT
4. Reporting and Enforcement	docs/code-of-conduct.md	/^## 4. Reporting and Enforcement$/;"	s	chapter:Code of Conduct for Auto-GPT
5. Acknowledgements	CODE_OF_CONDUCT.md	/^## 5. Acknowledgements$/;"	s	chapter:Code of Conduct for Auto-GPT
5. Acknowledgements	docs/code-of-conduct.md	/^## 5. Acknowledgements$/;"	s	chapter:Code of Conduct for Auto-GPT
6. Contact	CODE_OF_CONDUCT.md	/^## 6. Contact$/;"	s	chapter:Code of Conduct for Auto-GPT
6. Contact	docs/code-of-conduct.md	/^## 6. Contact$/;"	s	chapter:Code of Conduct for Auto-GPT
ABILITIES	autogpt/core/planning/templates.py	/^ABILITIES = ($/;"	v
ADA	autogpt/core/resource/model_providers/openai.py	/^    ADA = "text-embedding-ada-002"$/;"	v	class:OpenAIModelName
AIConfig	autogpt/config/ai_config.py	/^class AIConfig:$/;"	c
ALLOWED_HOSTNAMES	tests/vcr/vcr_filter.py	/^ALLOWED_HOSTNAMES: List[str] = [$/;"	v	typeref:typename:List[str]
ALLOWLIST_CONTROL	autogpt/commands/execute_code.py	/^ALLOWLIST_CONTROL = "allowlist"$/;"	v
ALMOST_DONE_MESSAGE	tests/unit/test_spinner.py	/^ALMOST_DONE_MESSAGE = "Almost done..."$/;"	v
ASSISTANT	autogpt/core/resource/model_providers/schema.py	/^    ASSISTANT = "assistant"$/;"	v	class:MessageRole
AUTHORIZE	autogpt/app/main.py	/^    AUTHORIZE = "GENERATE NEXT COMMAND JSON"$/;"	v	class:UserFeedback
AUTO_GPT_COMMAND_IDENTIFIER	autogpt/command_decorator.py	/^AUTO_GPT_COMMAND_IDENTIFIER = "auto_gpt_command"$/;"	v
AZURE_CONFIG_FILE	autogpt/config/config.py	/^AZURE_CONFIG_FILE = "azure.yaml"$/;"	v
Abilities	autogpt/core/ARCHITECTURE_NOTES.md	/^## Abilities$/;"	s	chapter:The Agent Subsystems
Ability	autogpt/core/ability/base.py	/^class Ability(abc.ABC):$/;"	c
AbilityConfiguration	autogpt/core/ability/base.py	/^class AbilityConfiguration(SystemConfiguration):$/;"	c
AbilityRegistry	autogpt/core/ability/base.py	/^class AbilityRegistry(abc.ABC):$/;"	c
AbilityRegistryConfiguration	autogpt/core/ability/simple.py	/^class AbilityRegistryConfiguration(SystemConfiguration):$/;"	c
AbilityRegistrySettings	autogpt/core/ability/simple.py	/^class AbilityRegistrySettings(SystemSettings):$/;"	c
AbilityResult	autogpt/core/ability/schema.py	/^class AbilityResult(BaseModel):$/;"	c
AbstractSingleton	autogpt/singleton.py	/^class AbstractSingleton(abc.ABC, metaclass=Singleton):$/;"	c
Add tags to logs	docs/share-your-logs.md	/^### Add tags to logs$/;"	S	section:Share your logs with us to help improve Auto-GPT
Agent	autogpt/agents/agent.py	/^class Agent(BaseAgent):$/;"	c
Agent	autogpt/core/agent/base.py	/^class Agent(abc.ABC):$/;"	c
AgentConfiguration	autogpt/core/agent/simple.py	/^class AgentConfiguration(SystemConfiguration):$/;"	c
AgentConfiguration	autogpt/core/runner/cli_web_app/server/schema.py	/^class AgentConfiguration(BaseModel):$/;"	c
AgentInfo	autogpt/core/runner/cli_web_app/server/schema.py	/^class AgentInfo(BaseModel):$/;"	c
AgentSettings	autogpt/core/agent/simple.py	/^class AgentSettings(BaseModel):$/;"	c
AgentSystemSettings	autogpt/core/agent/simple.py	/^class AgentSystemSettings(SystemSettings):$/;"	c
AgentSystems	autogpt/core/agent/simple.py	/^class AgentSystems(SystemConfiguration):$/;"	c
AgentThoughts	autogpt/agents/base.py	/^AgentThoughts = dict[str, Any]$/;"	v
ApiManager	autogpt/llm/api_manager.py	/^class ApiManager(metaclass=Singleton):$/;"	c
Auto-GPT	docs/index.md	/^# Auto-GPT$/;"	c
Auto-GPT Core	autogpt/core/README.md	/^# Auto-GPT Core$/;"	c
Auto-GPT: An Autonomous GPT-4 Experiment	README.md	/^# Auto-GPT: An Autonomous GPT-4 Experiment$/;"	c
AutoGPTGuanaco	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^class AutoGPTGuanaco(AutoGPTPluginTemplate):$/;"	c
AutoGptFormatter	autogpt/logs/formatters.py	/^class AutoGptFormatter(logging.Formatter):$/;"	c
BACKLOG	autogpt/core/planning/schema.py	/^    BACKLOG: str = "backlog"$/;"	v	class:TaskStatus	typeref:typename:str
BASE_VCR_CONFIG	tests/vcr/__init__.py	/^BASE_VCR_CONFIG = {$/;"	v
BEAT_CHALLENGES	tests/challenges/challenge_decorator/challenge.py	/^    BEAT_CHALLENGES = False$/;"	v	class:Challenge
BUILTIN_ABILITIES	autogpt/core/ability/builtins/__init__.py	/^BUILTIN_ABILITIES = {$/;"	v
Background	.github/PULL_REQUEST_TEMPLATE.md	/^### Background$/;"	S
BaseAgent	autogpt/agents/base.py	/^class BaseAgent(metaclass=ABCMeta):$/;"	c
BaseOpenAIPlugin	autogpt/models/base_open_ai_plugin.py	/^class BaseOpenAIPlugin(AutoGPTPluginTemplate):$/;"	c
Beat a Challenge	docs/challenges/beat.md	/^# Beat a Challenge$/;"	c
BrowserOptions	autogpt/commands/web_selenium.py	/^BrowserOptions = ChromeOptions | EdgeOptions | FirefoxOptions | SafariOptions$/;"	v
CHALLENGES_DIR	tests/challenges/test_challenge_should_be_formatted_properly.py	/^CHALLENGES_DIR = os.path.join($/;"	v
CHALLENGE_FAILED_MESSAGE	tests/challenges/challenge_decorator/challenge_decorator.py	/^CHALLENGE_FAILED_MESSAGE = "Challenges can sometimes fail randomly, please run this test again a/;"	v
CHALLENGE_PREFIX	tests/challenges/challenge_decorator/challenge_utils.py	/^CHALLENGE_PREFIX = "test_"$/;"	v
CLI Application	autogpt/core/README.md	/^## CLI Application$/;"	s	chapter:Auto-GPT Core
CLI Web App	autogpt/core/README.md	/^### CLI Web App$/;"	S	section:Auto-GPT Core""CLI Application
CODE	autogpt/core/ability/schema.py	/^    CODE = "code"$/;"	v	class:ContentType
CODE	autogpt/core/planning/schema.py	/^    CODE: str = "code"$/;"	v	class:TaskType	typeref:typename:str
CODE_FILE_PATH	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^CODE_FILE_PATH = "code.py"$/;"	v
COMMAND_CATEGORIES	autogpt/commands/__init__.py	/^COMMAND_CATEGORIES = [$/;"	v
COO	tests/challenges/information_retrieval/test_information_retrieval_challenge_c.py	/^COO = [["Luke Lafreniere"], ["Luke Lafreniere"], ["Luke Lafreniere 2017"]]$/;"	v
CURRENT_CONTEXT_FILE_NAME	autogpt/logs/log_cycle.py	/^CURRENT_CONTEXT_FILE_NAME = "current_context.json"$/;"	v
CURRENT_SCORE_LOCATION	tests/challenges/challenge_decorator/score_utils.py	/^CURRENT_SCORE_LOCATION = "..\/current_score"$/;"	v
CYCLE_COUNT	tests/challenges/basic_abilities/test_browse_website.py	/^CYCLE_COUNT = 2$/;"	v
CYCLE_COUNT	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^CYCLE_COUNT = 5$/;"	v
CYCLE_COUNT	tests/challenges/information_retrieval/test_information_retrieval_challenge_a.py	/^CYCLE_COUNT = 3$/;"	v
CYCLE_COUNT	tests/challenges/information_retrieval/test_information_retrieval_challenge_b.py	/^CYCLE_COUNT = 3$/;"	v
CYCLE_COUNT	tests/challenges/information_retrieval/test_information_retrieval_challenge_c.py	/^CYCLE_COUNT = 3$/;"	v
CYCLE_COUNT	tests/challenges/kubernetes/test_kubernetes_template_challenge_a.py	/^CYCLE_COUNT = 3$/;"	v
CYCLE_COUNT_PER_LEVEL	tests/challenges/basic_abilities/test_write_file.py	/^CYCLE_COUNT_PER_LEVEL = [1, 1]$/;"	v
Challenge	tests/challenges/challenge_decorator/challenge.py	/^class Challenge:$/;"	c
Challenge Title	docs/challenges/challenge_template.md	/^# Challenge Title$/;"	c
Changes	.github/PULL_REQUEST_TEMPLATE.md	/^### Changes$/;"	S
ChatModelInfo	autogpt/llm/base.py	/^class ChatModelInfo(CompletionModelInfo):$/;"	c
ChatModelResponse	autogpt/llm/base.py	/^class ChatModelResponse(LLMResponse):$/;"	c
ChatSequence	autogpt/llm/base.py	/^class ChatSequence:$/;"	c
ChromeDriver	autogpt/commands/web_selenium.py	/^from selenium.webdriver.chrome.webdriver import WebDriver as ChromeDriver$/;"	Y	nameref:unknown:WebDriver
ChromeDriverService	autogpt/commands/web_selenium.py	/^from selenium.webdriver.chrome.service import Service as ChromeDriverService$/;"	Y	nameref:unknown:Service
ChromeOptions	autogpt/commands/web_selenium.py	/^from selenium.webdriver.chrome.options import Options as ChromeOptions$/;"	Y	nameref:unknown:Options
Code of Conduct for Auto-GPT	CODE_OF_CONDUCT.md	/^# Code of Conduct for Auto-GPT$/;"	c
Code of Conduct for Auto-GPT	docs/code-of-conduct.md	/^# Code of Conduct for Auto-GPT$/;"	c
Command	autogpt/models/command.py	/^class Command:$/;"	c
Command	autogpt/prompts/generator.py	/^    class Command(TypedDict):$/;"	c	class:PromptGenerator
Command Line Arguments	docs/usage.md	/^## Command Line Arguments$/;"	s	chapter:Usage
CommandArgs	autogpt/agents/base.py	/^CommandArgs = dict[str, str]$/;"	v
CommandName	autogpt/agents/base.py	/^CommandName = str$/;"	v
CommandParameter	autogpt/models/command_parameter.py	/^class CommandParameter:$/;"	c
CommandParameterSpec	autogpt/command_decorator.py	/^class CommandParameterSpec(TypedDict):$/;"	c
CommandRegistry	autogpt/models/command_registry.py	/^class CommandRegistry:$/;"	c
CompletionModelInfo	autogpt/llm/base.py	/^class CompletionModelInfo(ModelInfo):$/;"	c
Config	autogpt/config/config.py	/^class Config(SystemSettings, arbitrary_types_allowed=True):$/;"	c
Config	autogpt/core/configuration/schema.py	/^    class Config:$/;"	c	class:SystemConfiguration
Config	autogpt/core/configuration/schema.py	/^    class Config:$/;"	c	class:SystemSettings
Config	autogpt/core/resource/model_providers/schema.py	/^    class Config:$/;"	c	class:ModelProviderCredentials
Config	autogpt/core/resource/schema.py	/^    class Config:$/;"	c	class:ProviderCredentials
ConfigBuilder	autogpt/config/config.py	/^class ConfigBuilder(Configurable[Config]):$/;"	c
Configurable	autogpt/core/configuration/schema.py	/^class Configurable(abc.ABC, Generic[S]):$/;"	c
Configuration	autogpt/core/ARCHITECTURE_NOTES.md	/^## Configuration$/;"	s	chapter:The Agent Subsystems
Configuration	docs/configuration/options.md	/^# Configuration$/;"	c
Configuration	docs/setup.md	/^### Configuration$/;"	S	section:Setting up Auto-GPT""Setting up Auto-GPT
ConsoleHandler	autogpt/logs/handlers.py	/^class ConsoleHandler(logging.StreamHandler):$/;"	c
ContentType	autogpt/core/ability/schema.py	/^class ContentType(str, enum.Enum):$/;"	c
Create a Virtual Environment	docs/setup.md	/^#### Create a Virtual Environment$/;"	t	subsection:Setting up Auto-GPT""Running Auto-GPT""Run without Docker
CreateNewAbility	autogpt/core/ability/builtins/create_new_ability.py	/^class CreateNewAbility(Ability):$/;"	c
Creating Challenges for Auto-GPT	docs/challenges/building_challenges.md	/^# Creating Challenges for Auto-GPT$/;"	c
Creating your challenge	docs/challenges/building_challenges.md	/^## Creating your challenge$/;"	s	chapter:Getting Started
DALL-e	docs/configuration/imagegen.md	/^## DALL-e$/;"	s	chapter:🖼 Image Generation configuration
DEFAULT_ADDITIONAL_ABILITY_ARGUMENTS	autogpt/core/planning/strategies/next_ability.py	/^    DEFAULT_ADDITIONAL_ABILITY_ARGUMENTS = {$/;"	v	class:NextAbility
DEFAULT_CHALLENGE_NAME	tests/challenges/challenge_decorator/challenge.py	/^    DEFAULT_CHALLENGE_NAME = "default_challenge_name"$/;"	v	class:Challenge
DEFAULT_CREATE_AGENT_FUNCTION	autogpt/core/planning/strategies/name_and_goals.py	/^    DEFAULT_CREATE_AGENT_FUNCTION = {$/;"	v	class:NameAndGoals
DEFAULT_CREATE_PLAN_FUNCTION	autogpt/core/planning/strategies/initial_plan.py	/^    DEFAULT_CREATE_PLAN_FUNCTION = {$/;"	v	class:InitialPlan
DEFAULT_PREFIX	autogpt/logs/log_cycle.py	/^DEFAULT_PREFIX = "agent"$/;"	v
DEFAULT_RECORD_MODE	tests/vcr/__init__.py	/^DEFAULT_RECORD_MODE = "new_episodes"$/;"	v
DEFAULT_SETTINGS_FILE	autogpt/core/runner/client_lib/shared_click_commands.py	/^DEFAULT_SETTINGS_FILE = str($/;"	v
DEFAULT_SYSTEM_INFO	autogpt/core/planning/strategies/initial_plan.py	/^    DEFAULT_SYSTEM_INFO = [$/;"	v	class:InitialPlan
DEFAULT_SYSTEM_INFO	autogpt/core/planning/strategies/next_ability.py	/^    DEFAULT_SYSTEM_INFO = [$/;"	v	class:NextAbility
DEFAULT_SYSTEM_PROMPT	autogpt/core/planning/strategies/name_and_goals.py	/^    DEFAULT_SYSTEM_PROMPT = ($/;"	v	class:NameAndGoals
DEFAULT_SYSTEM_PROMPT_AICONFIG_AUTOMATIC	autogpt/prompts/default_prompts.py	/^DEFAULT_SYSTEM_PROMPT_AICONFIG_AUTOMATIC = """$/;"	v
DEFAULT_SYSTEM_PROMPT_TEMPLATE	autogpt/core/planning/strategies/initial_plan.py	/^    DEFAULT_SYSTEM_PROMPT_TEMPLATE = ($/;"	v	class:InitialPlan
DEFAULT_SYSTEM_PROMPT_TEMPLATE	autogpt/core/planning/strategies/next_ability.py	/^    DEFAULT_SYSTEM_PROMPT_TEMPLATE = "System Info:\\n{system_info}"$/;"	v	class:NextAbility
DEFAULT_TASK_PROMPT_AICONFIG_AUTOMATIC	autogpt/prompts/default_prompts.py	/^DEFAULT_TASK_PROMPT_AICONFIG_AUTOMATIC = ($/;"	v
DEFAULT_TRIGGERING_PROMPT	autogpt/prompts/prompt.py	/^DEFAULT_TRIGGERING_PROMPT = "Determine exactly one command to use, and respond using the JSON sc/;"	v
DEFAULT_USER_DESIRE_PROMPT	autogpt/prompts/default_prompts.py	/^DEFAULT_USER_DESIRE_PROMPT = "Write a wikipedia style article about the project: https:\/\/githu/;"	v
DEFAULT_USER_PROMPT_TEMPLATE	autogpt/core/planning/strategies/initial_plan.py	/^    DEFAULT_USER_PROMPT_TEMPLATE = ($/;"	v	class:InitialPlan
DEFAULT_USER_PROMPT_TEMPLATE	autogpt/core/planning/strategies/name_and_goals.py	/^    DEFAULT_USER_PROMPT_TEMPLATE = "'{user_objective}'"$/;"	v	class:NameAndGoals
DEFAULT_USER_PROMPT_TEMPLATE	autogpt/core/planning/strategies/next_ability.py	/^    DEFAULT_USER_PROMPT_TEMPLATE = ($/;"	v	class:NextAbility
DENYLIST_CONTROL	autogpt/commands/execute_code.py	/^DENYLIST_CONTROL = "denylist"$/;"	v
DESIGN	autogpt/core/planning/schema.py	/^    DESIGN: str = "design"$/;"	v	class:TaskType	typeref:typename:str
DIRECTORY_PATH	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^DIRECTORY_PATH = Path(__file__).parent \/ "data"$/;"	v
DOCXParser	autogpt/commands/file_operations_utils.py	/^class DOCXParser(ParserStrategy):$/;"	c
DONE	autogpt/core/planning/schema.py	/^    DONE: str = "done"$/;"	v	class:TaskStatus	typeref:typename:str
DUCKDUCKGO_MAX_ATTEMPTS	autogpt/commands/web_search.py	/^DUCKDUCKGO_MAX_ATTEMPTS = 3$/;"	v
Defining your Agent	docs/challenges/building_challenges.md	/^## Defining your Agent$/;"	s	chapter:Getting Started
Description	docs/challenges/challenge_template.md	/^## Description$/;"	s	chapter:Challenge Title
Description	docs/challenges/information_retrieval/challenge_a.md	/^## Description$/;"	s	chapter:Information Retrieval Challenge A
Description	docs/challenges/information_retrieval/challenge_b.md	/^## Description$/;"	s	chapter:Information Retrieval Challenge B
Description	docs/challenges/memory/challenge_a.md	/^## Description$/;"	s	chapter:Memory Challenge A
Disabling Command Categories	docs/usage.md	/^## Disabling Command Categories$/;"	s	chapter:Usage
DockerContainer	autogpt/commands/execute_code.py	/^from docker.models.containers import Container as DockerContainer$/;"	Y	nameref:unknown:Container
Documentation	.github/PULL_REQUEST_TEMPLATE.md	/^### Documentation$/;"	S
DummyPlugin	tests/unit/models/test_base_open_api_plugin.py	/^class DummyPlugin(BaseOpenAIPlugin):$/;"	c
EC	autogpt/commands/web_selenium.py	/^from selenium.webdriver.support import expected_conditions as EC$/;"	Y	nameref:unknown:expected_conditions
EDIT	autogpt/core/planning/schema.py	/^    EDIT: str = "edit"$/;"	v	class:TaskType	typeref:typename:str
EMBEDDING	autogpt/core/resource/model_providers/schema.py	/^    EMBEDDING: str = "embedding"$/;"	v	class:ModelProviderService	typeref:typename:str
EXIT	autogpt/app/main.py	/^    EXIT = "EXIT"$/;"	v	class:UserFeedback
EXPECTED_OUTPUTS_PER_LEVEL	tests/challenges/basic_abilities/test_write_file.py	/^EXPECTED_OUTPUTS_PER_LEVEL = [$/;"	v
EXPECTED_REVENUES	tests/challenges/information_retrieval/test_information_retrieval_challenge_a.py	/^EXPECTED_REVENUES = [["81"], ["81"], ["81", "53", "24", "21", "11", "7", "4", "3", "2"]]$/;"	v
EXPECTED_VALUES	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^EXPECTED_VALUES = ["[0, 1]", "[2, 5]", "[0, 3]"]$/;"	v
EdgeDriver	autogpt/commands/web_selenium.py	/^from selenium.webdriver.edge.webdriver import WebDriver as EdgeDriver$/;"	Y	nameref:unknown:WebDriver
EdgeDriverManager	autogpt/commands/web_selenium.py	/^from webdriver_manager.microsoft import EdgeChromiumDriverManager as EdgeDriverManager$/;"	Y	nameref:unknown:EdgeChromiumDriverManager
EdgeDriverService	autogpt/commands/web_selenium.py	/^from selenium.webdriver.edge.service import Service as EdgeDriverService$/;"	Y	nameref:unknown:Service
EdgeOptions	autogpt/commands/web_selenium.py	/^from selenium.webdriver.edge.options import Options as EdgeOptions$/;"	Y	nameref:unknown:Options
ElevenLabsSpeech	autogpt/speech/eleven_labs.py	/^class ElevenLabsSpeech(VoiceBase):$/;"	c
Embedding	autogpt/core/resource/schema.py	/^Embedding = list[float]$/;"	v
Embedding	autogpt/memory/vector/utils.py	/^Embedding = list[np.float32] | np.ndarray[Any, np.dtype[np.float32]]$/;"	v
EmbeddingModelInfo	autogpt/llm/base.py	/^class EmbeddingModelInfo(ModelInfo):$/;"	c
EmbeddingModelProvider	autogpt/core/resource/model_providers/schema.py	/^class EmbeddingModelProvider(ModelProvider):$/;"	c
EmbeddingModelProviderModelInfo	autogpt/core/resource/model_providers/schema.py	/^class EmbeddingModelProviderModelInfo(ModelProviderModelInfo):$/;"	c
EmbeddingModelProviderModelResponse	autogpt/core/resource/model_providers/schema.py	/^class EmbeddingModelProviderModelResponse(ModelProviderModelResponse):$/;"	c
EmbeddingModelResponse	autogpt/llm/base.py	/^class EmbeddingModelResponse(LLMResponse):$/;"	c
Enable Debug Logs	docs/share-your-logs.md	/^### Enable Debug Logs$/;"	S	section:Share your logs with us to help improve Auto-GPT
Environment Variables	docs/configuration/options.md	/^## Environment Variables$/;"	s	chapter:Configuration
FAST_MODEL	autogpt/core/planning/schema.py	/^    FAST_MODEL: str = "fast_model"$/;"	v	class:LanguageModelClassification	typeref:typename:str
FILE_DIR	autogpt/commands/web_selenium.py	/^FILE_DIR = Path(__file__).parent.parent$/;"	v
FULL_MESSAGE_HISTORY_FILE_NAME	autogpt/logs/log_cycle.py	/^FULL_MESSAGE_HISTORY_FILE_NAME = "full_message_history.json"$/;"	v
FileContext	autogpt/commands/file_operations_utils.py	/^class FileContext:$/;"	c
Files	docs/challenges/memory/challenge_a.md	/^## Files$/;"	s	chapter:Memory Challenge A
FindPythonCommand	run.bat	/^:FindPythonCommand$/;"	l
FirefoxDriver	autogpt/commands/web_selenium.py	/^from selenium.webdriver.firefox.webdriver import WebDriver as FirefoxDriver$/;"	Y	nameref:unknown:WebDriver
FirefoxOptions	autogpt/commands/web_selenium.py	/^from selenium.webdriver.firefox.options import Options as FirefoxOptions$/;"	Y	nameref:unknown:Options
Found	run.bat	/^:Found$/;"	l
FunctionCallDict	autogpt/llm/base.py	/^class FunctionCallDict(TypedDict):$/;"	c
GPT-3.5 ONLY Mode	docs/usage.md	/^### GPT-3.5 ONLY Mode$/;"	S	section:Usage""Command Line Arguments
GPT-4 ONLY Mode	docs/usage.md	/^### GPT-4 ONLY Mode$/;"	S	section:Usage""Command Line Arguments
GPT3	autogpt/core/resource/model_providers/openai.py	/^    GPT3 = "gpt-3.5-turbo-0613"$/;"	v	class:OpenAIModelName
GPT3_16K	autogpt/core/resource/model_providers/openai.py	/^    GPT3_16K = "gpt-3.5-turbo-16k-0613"$/;"	v	class:OpenAIModelName
GPT4	autogpt/core/resource/model_providers/openai.py	/^    GPT4 = "gpt-4-0613"$/;"	v	class:OpenAIModelName
GPT4_32K	autogpt/core/resource/model_providers/openai.py	/^    GPT4_32K = "gpt-4-32k-0613"$/;"	v	class:OpenAIModelName
GPT_3_MODEL	autogpt/config/config.py	/^GPT_3_MODEL = "gpt-3.5-turbo"$/;"	v
GPT_4_MODEL	autogpt/config/config.py	/^GPT_4_MODEL = "gpt-4"$/;"	v
GTTSVoice	autogpt/speech/gtts.py	/^class GTTSVoice(VoiceBase):$/;"	c
GeckoDriverService	autogpt/commands/web_selenium.py	/^from selenium.webdriver.firefox.service import Service as GeckoDriverService$/;"	Y	nameref:unknown:Service
Getting Started	docs/challenges/building_challenges.md	/^# Getting Started$/;"	c
Guidelines for Beating a Challenge	docs/challenges/beat.md	/^## Guidelines for Beating a Challenge$/;"	s	chapter:Beat a Challenge
HTMLParser	autogpt/commands/file_operations_utils.py	/^class HTMLParser(ParserStrategy):$/;"	c
How can you participate?	docs/challenges/introduction.md	/^## How can you participate?$/;"	s	chapter:Introduction to Challenges
How to Submit a Challenge	docs/challenges/submit.md	/^## How to Submit a Challenge$/;"	s	chapter:Submit a Challenge
How to add a tag	docs/share-your-logs.md	/^#### How to add a tag$/;"	t	subsection:Share your logs with us to help improve Auto-GPT""Add tags to logs
Hugging Face	docs/configuration/imagegen.md	/^## Hugging Face$/;"	s	chapter:🖼 Image Generation configuration
INSTALLED_PACKAGE	autogpt/core/plugin/base.py	/^    INSTALLED_PACKAGE = "installed_package"  # Required now, loads system defaults$/;"	v	class:PluginStorageFormat
IN_PROGRESS	autogpt/core/planning/schema.py	/^    IN_PROGRESS: str = "in_progress"$/;"	v	class:TaskStatus	typeref:typename:str
Information Retrieval	docs/challenges/information_retrieval/introduction.md	/^# Information Retrieval$/;"	c
Information Retrieval Challenge A	docs/challenges/information_retrieval/challenge_a.md	/^# Information Retrieval Challenge A$/;"	c
Information Retrieval Challenge B	docs/challenges/information_retrieval/challenge_b.md	/^# Information Retrieval Challenge B$/;"	c
Initial Planning	autogpt/core/ARCHITECTURE_NOTES.md	/^## Initial Planning$/;"	s	chapter:Re-architecture Notes
InitialPlan	autogpt/core/planning/strategies/initial_plan.py	/^class InitialPlan(PromptStrategy):$/;"	c
InitialPlanConfiguration	autogpt/core/planning/strategies/initial_plan.py	/^class InitialPlanConfiguration(SystemConfiguration):$/;"	c
Input	docs/challenges/challenge_template.md	/^## Input$/;"	s	chapter:Challenge Title
Inspect and share logs	docs/share-your-logs.md	/^### Inspect and share logs$/;"	S	section:Share your logs with us to help improve Auto-GPT
Install the Weaviate client	docs/configuration/memory.md	/^#### Install the Weaviate client$/;"	t	subsection:Memory Backend Setup""Weaviate Setup
InteractRequestBody	autogpt/core/runner/cli_web_app/server/schema.py	/^class InteractRequestBody(BaseModel):$/;"	c
InteractResponseBody	autogpt/core/runner/cli_web_app/server/schema.py	/^class InteractResponseBody(BaseModel):$/;"	c
Introduction to Challenges	docs/challenges/introduction.md	/^# Introduction to Challenges$/;"	c
JSONFileMemory	autogpt/memory/vector/providers/json_file.py	/^class JSONFileMemory(VectorMemoryProvider):$/;"	c
JSONParser	autogpt/commands/file_operations_utils.py	/^class JSONParser(ParserStrategy):$/;"	c
JsonFileHandler	autogpt/logs/handlers.py	/^class JsonFileHandler(logging.FileHandler):$/;"	c
JsonFormatter	autogpt/logs/formatters.py	/^class JsonFormatter(logging.Formatter):$/;"	c
Key Documents	autogpt/core/ARCHITECTURE_NOTES.md	/^## Key Documents$/;"	s	chapter:Re-architecture Notes
Knowledge	autogpt/core/ability/schema.py	/^class Knowledge(BaseModel):$/;"	c
LANGUAGE	autogpt/core/resource/model_providers/schema.py	/^    LANGUAGE: str = "language"$/;"	v	class:ModelProviderService	typeref:typename:str
LEVEL_CURRENTLY_BEATEN	tests/challenges/memory/test_memory_challenge_d.py	/^LEVEL_CURRENTLY_BEATEN = 1$/;"	v
LLMResponse	autogpt/llm/base.py	/^class LLMResponse:$/;"	c
LLM_DEFAULT_RESPONSE_FORMAT	autogpt/json_utils/utilities.py	/^LLM_DEFAULT_RESPONSE_FORMAT = "llm_response_format_1"$/;"	v
LaTeXParser	autogpt/commands/file_operations_utils.py	/^class LaTeXParser(ParserStrategy):$/;"	c
LanguageModelClassification	autogpt/core/planning/schema.py	/^class LanguageModelClassification(str, enum.Enum):$/;"	c
LanguageModelConfiguration	autogpt/core/planning/simple.py	/^class LanguageModelConfiguration(SystemConfiguration):$/;"	c
LanguageModelFunction	autogpt/core/resource/model_providers/schema.py	/^class LanguageModelFunction(BaseModel):$/;"	c
LanguageModelMessage	autogpt/core/resource/model_providers/schema.py	/^class LanguageModelMessage(BaseModel):$/;"	c
LanguageModelPrompt	autogpt/core/planning/schema.py	/^class LanguageModelPrompt(BaseModel):$/;"	c
LanguageModelProvider	autogpt/core/resource/model_providers/schema.py	/^class LanguageModelProvider(ModelProvider):$/;"	c
LanguageModelProviderModelInfo	autogpt/core/resource/model_providers/schema.py	/^class LanguageModelProviderModelInfo(ModelProviderModelInfo):$/;"	c
LanguageModelProviderModelResponse	autogpt/core/resource/model_providers/schema.py	/^class LanguageModelProviderModelResponse(ModelProviderModelResponse):$/;"	c
LanguageModelResponse	autogpt/core/planning/schema.py	/^class LanguageModelResponse(LanguageModelProviderModelResponse):$/;"	c
List of Challenges	docs/challenges/list.md	/^# List of Challenges$/;"	c
List of available voices	docs/configuration/voice.md	/^### List of available voices$/;"	S	chapter:Text to Speech
LogCycleHandler	autogpt/logs/log_cycle.py	/^class LogCycleHandler:$/;"	c
Logger	autogpt/logs/logger.py	/^class Logger(metaclass=Singleton):$/;"	c
Logs	docs/usage.md	/^## Logs$/;"	s	chapter:Usage
MAX_LEVEL	tests/challenges/memory/test_memory_challenge_d.py	/^MAX_LEVEL = 5$/;"	v
MAX_LEVEL_TO_IMPROVE_ON	tests/challenges/challenge_decorator/challenge_decorator.py	/^MAX_LEVEL_TO_IMPROVE_ON = ($/;"	v
MEMORY	autogpt/core/resource/schema.py	/^    MEMORY = "memory"$/;"	v	class:ResourceType
MODEL	autogpt/core/resource/schema.py	/^    MODEL = "model"$/;"	v	class:ResourceType
MacOSTTS	autogpt/speech/macos_tts.py	/^class MacOSTTS(VoiceBase):$/;"	c
MarkdownParser	autogpt/commands/file_operations_utils.py	/^class MarkdownParser(ParserStrategy):$/;"	c
Memory	autogpt/core/ARCHITECTURE_NOTES.md	/^## Memory$/;"	s	chapter:The Agent Subsystems
Memory	autogpt/core/memory/base.py	/^class Memory(abc.ABC):$/;"	c
Memory Backend Setup	docs/configuration/memory.md	/^## Memory Backend Setup$/;"	s
Memory Challenge A	docs/challenges/memory/challenge_a.md	/^# Memory Challenge A$/;"	c
Memory Challenge B	docs/challenges/memory/challenge_b.md	/^# Memory Challenge B$/;"	c
Memory Challenge C	docs/challenges/memory/challenge_c.md	/^# Memory Challenge C$/;"	c
Memory Challenge C	docs/challenges/memory/challenge_d.md	/^# Memory Challenge C$/;"	c
Memory Challenges	docs/challenges/memory/introduction.md	/^# Memory Challenges$/;"	c
MemoryConfiguration	autogpt/core/memory/simple.py	/^class MemoryConfiguration(SystemConfiguration):$/;"	c
MemoryDocType	autogpt/memory/vector/memory_item.py	/^MemoryDocType = Literal["webpage", "text_file", "code_file", "agent_history"]$/;"	v
MemoryItem	autogpt/core/memory/base.py	/^class MemoryItem(abc.ABC):$/;"	c
MemoryItem	autogpt/memory/vector/memory_item.py	/^class MemoryItem:$/;"	c
MemoryItemRelevance	autogpt/memory/vector/memory_item.py	/^class MemoryItemRelevance:$/;"	c
MemorySettings	autogpt/core/memory/simple.py	/^class MemorySettings(SystemSettings):$/;"	c
Message	autogpt/llm/base.py	/^class Message:$/;"	c
Message	autogpt/models/base_open_ai_plugin.py	/^class Message(TypedDict):$/;"	c
MessageDict	autogpt/llm/base.py	/^class MessageDict(TypedDict):$/;"	c
MessageHistory	autogpt/core/memory/base.py	/^class MessageHistory(abc.ABC):$/;"	c
MessageHistory	autogpt/core/memory/simple.py	/^class MessageHistory:$/;"	c
MessageHistory	autogpt/memory/message_history.py	/^class MessageHistory(ChatSequence):$/;"	c
MessageRole	autogpt/core/resource/model_providers/schema.py	/^class MessageRole(str, enum.Enum):$/;"	c
MessageRole	autogpt/llm/base.py	/^MessageRole = Literal["system", "user", "assistant", "function"]$/;"	v
MessageType	autogpt/llm/base.py	/^MessageType = Literal["ai_response", "action_result"]$/;"	v
Milvus Setup	docs/configuration/memory.md	/^### Milvus Setup$/;"	S	section:Memory Backend Setup
ModelInfo	autogpt/llm/base.py	/^class ModelInfo:$/;"	c
ModelProvider	autogpt/core/resource/model_providers/schema.py	/^class ModelProvider(abc.ABC):$/;"	c
ModelProviderBudget	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderBudget(ProviderBudget):$/;"	c
ModelProviderCredentials	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderCredentials(ProviderCredentials):$/;"	c
ModelProviderModelInfo	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderModelInfo(BaseModel):$/;"	c
ModelProviderModelResponse	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderModelResponse(BaseModel):$/;"	c
ModelProviderName	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderName(str, enum.Enum):$/;"	c
ModelProviderService	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderService(str, enum.Enum):$/;"	c
ModelProviderSettings	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderSettings(ProviderSettings):$/;"	c
ModelProviderUsage	autogpt/core/resource/model_providers/schema.py	/^class ModelProviderUsage(ProviderUsage):$/;"	c
NEW_SCORE_LOCATION	tests/challenges/challenge_decorator/score_utils.py	/^NEW_SCORE_LOCATION = "..\/new_score"$/;"	v
NEW_URL	tests/vcr/vcr_filter.py	/^NEW_URL = "api.openai.com"$/;"	v
NEXT_ACTION_FILE_NAME	autogpt/logs/log_cycle.py	/^NEXT_ACTION_FILE_NAME = "next_action.json"$/;"	v
NOISE	tests/challenges/memory/test_memory_challenge_b.py	/^NOISE = 1000$/;"	v
NOISE	tests/challenges/memory/test_memory_challenge_c.py	/^NOISE = 1200$/;"	v
NULL_BYTES	autogpt/core/workspace/simple.py	/^    NULL_BYTES = ["\\0", "\\000", "\\x00", "\\u0000", "%00"]$/;"	v	class:SimpleWorkspace
NULL_BYTES	autogpt/workspace/workspace.py	/^    NULL_BYTES = ["\\0", "\\000", "\\x00", "\\u0000"]$/;"	v	class:Workspace
NameAndGoals	autogpt/core/planning/strategies/name_and_goals.py	/^class NameAndGoals(PromptStrategy):$/;"	c
NameAndGoalsConfiguration	autogpt/core/planning/strategies/name_and_goals.py	/^class NameAndGoalsConfiguration(SystemConfiguration):$/;"	c
NextAbility	autogpt/core/planning/strategies/next_ability.py	/^class NextAbility(PromptStrategy):$/;"	c
NextAbilityConfiguration	autogpt/core/planning/strategies/next_ability.py	/^class NextAbilityConfiguration(SystemConfiguration):$/;"	c
NoMemory	autogpt/memory/vector/providers/no_memory.py	/^class NoMemory(VectorMemoryProvider):$/;"	c
OPENAI	autogpt/core/resource/model_providers/schema.py	/^    OPENAI: str = "openai"$/;"	v	class:ModelProviderName	typeref:typename:str
OPEN_AI_CHAT_MODELS	autogpt/llm/providers/openai.py	/^OPEN_AI_CHAT_MODELS = {$/;"	v
OPEN_AI_EMBEDDING_MODELS	autogpt/core/resource/model_providers/openai.py	/^OPEN_AI_EMBEDDING_MODELS = {$/;"	v
OPEN_AI_EMBEDDING_MODELS	autogpt/llm/providers/openai.py	/^OPEN_AI_EMBEDDING_MODELS = {$/;"	v
OPEN_AI_LANGUAGE_MODELS	autogpt/core/resource/model_providers/openai.py	/^OPEN_AI_LANGUAGE_MODELS = {$/;"	v
OPEN_AI_MODELS	autogpt/core/resource/model_providers/openai.py	/^OPEN_AI_MODELS = {$/;"	v
OPEN_AI_MODELS	autogpt/llm/providers/openai.py	/^OPEN_AI_MODELS: dict[str, ChatModelInfo | EmbeddingModelInfo | TextModelInfo] = {$/;"	v	typeref:typename:dict[str, ChatModelInfo | EmbeddingModelInfo | TextModelInfo]
OPEN_AI_TEXT_MODELS	autogpt/llm/providers/openai.py	/^OPEN_AI_TEXT_MODELS = {$/;"	v
ORIGINAL_URL	tests/vcr/vcr_filter.py	/^    ORIGINAL_URL = "no_ci"$/;"	v
ORIGINAL_URL	tests/vcr/vcr_filter.py	/^    ORIGINAL_URL = PROXY$/;"	v
OUTPUT_LOCATION	tests/challenges/information_retrieval/test_information_retrieval_challenge_a.py	/^OUTPUT_LOCATION = "output.txt"$/;"	v
OUTPUT_LOCATION	tests/challenges/information_retrieval/test_information_retrieval_challenge_b.py	/^OUTPUT_LOCATION = "2010_nobel_prize_winners.txt"$/;"	v
OUTPUT_LOCATION	tests/challenges/information_retrieval/test_information_retrieval_challenge_c.py	/^OUTPUT_LOCATION = "output.txt"$/;"	v
OUTPUT_LOCATION	tests/challenges/kubernetes/test_kubernetes_template_challenge_a.py	/^OUTPUT_LOCATION = "kube.yaml"$/;"	v
OUTPUT_LOCATION	tests/challenges/memory/test_memory_challenge_a.py	/^OUTPUT_LOCATION = "output.txt"$/;"	v
OUTPUT_LOCATION	tests/challenges/memory/test_memory_challenge_b.py	/^OUTPUT_LOCATION = "output.txt"$/;"	v
OUTPUT_LOCATION	tests/challenges/memory/test_memory_challenge_c.py	/^OUTPUT_LOCATION = "output.txt"$/;"	v
OUTPUT_LOCATION	tests/challenges/memory/test_memory_challenge_d.py	/^OUTPUT_LOCATION = "output.txt"$/;"	v
Objective	docs/challenges/information_retrieval/challenge_a.md	/^## Objective$/;"	s	chapter:Information Retrieval Challenge A
Objective	docs/challenges/information_retrieval/challenge_b.md	/^## Objective$/;"	s	chapter:Information Retrieval Challenge B
Objective	docs/challenges/memory/challenge_a.md	/^## Objective$/;"	s	chapter:Memory Challenge A
OpenAIChatParser	autogpt/core/resource/model_providers/openai.py	/^OpenAIChatParser = Callable[[str], dict]$/;"	v
OpenAIConfiguration	autogpt/core/resource/model_providers/openai.py	/^class OpenAIConfiguration(SystemConfiguration):$/;"	c
OpenAIEmbeddingParser	autogpt/core/resource/model_providers/openai.py	/^OpenAIEmbeddingParser = Callable[[Embedding], Embedding]$/;"	v
OpenAIFunctionCall	autogpt/llm/providers/openai.py	/^class OpenAIFunctionCall:$/;"	c
OpenAIFunctionSpec	autogpt/llm/providers/openai.py	/^class OpenAIFunctionSpec:$/;"	c
OpenAIModelName	autogpt/core/resource/model_providers/openai.py	/^class OpenAIModelName(str, enum.Enum):$/;"	c
OpenAIModelProviderBudget	autogpt/core/resource/model_providers/openai.py	/^class OpenAIModelProviderBudget(ModelProviderBudget):$/;"	c
OpenAIProvider	autogpt/core/resource/model_providers/openai.py	/^class OpenAIProvider($/;"	c
OpenAISettings	autogpt/core/resource/model_providers/openai.py	/^class OpenAISettings(ModelProviderSettings):$/;"	c
OpenAPIConfig	autogpt/plugins/__init__.py	/^from openapi_python_client.config import Config as OpenAPIConfig$/;"	Y	nameref:unknown:Config
Operation	autogpt/commands/file_operations.py	/^Operation = Literal["write", "append", "delete"]$/;"	v
P	autogpt/core/runner/client_lib/utils.py	/^P = ParamSpec("P")$/;"	v
PARAMETERS	tests/unit/test_commands.py	/^PARAMETERS = [$/;"	v
PDFParser	autogpt/commands/file_operations_utils.py	/^class PDFParser(ParserStrategy):$/;"	c
PLACEHOLDERS	autogpt/speech/eleven_labs.py	/^PLACEHOLDERS = {"your-voice-id"}$/;"	v
PLAN	autogpt/core/planning/schema.py	/^    PLAN: str = "plan"$/;"	v	class:TaskType	typeref:typename:str
PLAN_PROMPT_CONSTRAINTS	autogpt/core/planning/templates.py	/^PLAN_PROMPT_CONSTRAINTS = ($/;"	v
PLAN_PROMPT_MAIN	autogpt/core/planning/templates.py	/^PLAN_PROMPT_MAIN = ($/;"	v
PLAN_PROMPT_PERFORMANCE_EVALUATIONS	autogpt/core/planning/templates.py	/^PLAN_PROMPT_PERFORMANCE_EVALUATIONS = ($/;"	v
PLAN_PROMPT_RESOURCES	autogpt/core/planning/templates.py	/^PLAN_PROMPT_RESOURCES = ($/;"	v
PLAN_PROMPT_RESPONSE_DICT	autogpt/core/planning/templates.py	/^PLAN_PROMPT_RESPONSE_DICT = {$/;"	v
PLAN_PROMPT_RESPONSE_FORMAT	autogpt/core/planning/templates.py	/^PLAN_PROMPT_RESPONSE_FORMAT = ($/;"	v
PLAN_TRIGGERING_PROMPT	autogpt/core/planning/templates.py	/^PLAN_TRIGGERING_PROMPT = ($/;"	v
PLEASE_WAIT	tests/unit/test_spinner.py	/^PLEASE_WAIT = "Please wait..."$/;"	v
PLUGINS_CONFIG_FILE	autogpt/config/config.py	/^PLUGINS_CONFIG_FILE = "plugins_config.yaml"$/;"	v
PLUGINS_TEST_DIR	tests/unit/test_plugins.py	/^PLUGINS_TEST_DIR = "tests\/unit\/data\/test_plugins"$/;"	v
PLUGIN_TEST_INIT_PY	tests/unit/test_plugins.py	/^PLUGIN_TEST_INIT_PY = "Auto-GPT-Plugin-Test-master\/src\/auto_gpt_vicuna\/__init__.py"$/;"	v
PLUGIN_TEST_OPENAI	tests/unit/test_plugins.py	/^PLUGIN_TEST_OPENAI = "https:\/\/weathergpt.vercel.app\/"$/;"	v
PLUGIN_TEST_ZIP_FILE	tests/unit/test_plugins.py	/^PLUGIN_TEST_ZIP_FILE = "Auto-GPT-Plugin-Test-master.zip"$/;"	v
PR Quality Checklist	.github/PULL_REQUEST_TEMPLATE.md	/^### PR Quality Checklist$/;"	S
PROJECT_DIR	agbenchmark/benchmarks.py	/^PROJECT_DIR = Path().resolve()$/;"	v
PROMPT_SUMMARY_FILE_NAME	autogpt/logs/log_cycle.py	/^PROMPT_SUMMARY_FILE_NAME = "prompt_summary.json"$/;"	v
PROMPT_SUPERVISOR_FEEDBACK_FILE_NAME	autogpt/logs/log_cycle.py	/^PROMPT_SUPERVISOR_FEEDBACK_FILE_NAME = "prompt_supervisor_feedback.json"$/;"	v
PROXY	tests/vcr/vcr_filter.py	/^PROXY = os.environ.get("PROXY")$/;"	v
ParameterSpec	autogpt/llm/providers/openai.py	/^    class ParameterSpec:$/;"	c	class:OpenAIFunctionSpec
ParserStrategy	autogpt/commands/file_operations_utils.py	/^class ParserStrategy:$/;"	c
PlannerConfiguration	autogpt/core/planning/simple.py	/^class PlannerConfiguration(SystemConfiguration):$/;"	c
PlannerSettings	autogpt/core/planning/simple.py	/^class PlannerSettings(SystemSettings):$/;"	c
Planning Strategies	autogpt/core/ARCHITECTURE_NOTES.md	/^### Planning Strategies$/;"	S	section:The Agent Subsystems""Planning/Prompt-Engineering
Planning/Prompt-Engineering	autogpt/core/ARCHITECTURE_NOTES.md	/^## Planning\/Prompt-Engineering$/;"	s	chapter:The Agent Subsystems
PluginConfig	autogpt/plugins/plugin_config.py	/^class PluginConfig(BaseModel):$/;"	c
PluginLocation	autogpt/core/plugin/base.py	/^class PluginLocation(SystemConfiguration):$/;"	c
PluginMetadata	autogpt/core/plugin/base.py	/^class PluginMetadata(BaseModel):$/;"	c
PluginService	autogpt/core/plugin/base.py	/^class PluginService(abc.ABC):$/;"	c
PluginStorageFormat	autogpt/core/plugin/base.py	/^class PluginStorageFormat(str, enum.Enum):$/;"	c
PluginStorageRoute	autogpt/core/plugin/base.py	/^PluginStorageRoute = str$/;"	v
PluginType	autogpt/core/plugin/base.py	/^    PluginType = ($/;"	v
Plugins	autogpt/core/ARCHITECTURE_NOTES.md	/^## Plugins$/;"	s	chapter:The Agent Subsystems
Plugins	docs/plugins.md	/^## Plugins$/;"	s
PluginsConfig	autogpt/plugins/plugins_config.py	/^class PluginsConfig(BaseModel):$/;"	c
Primary Goals	autogpt/core/ARCHITECTURE_NOTES.md	/^## Primary Goals$/;"	s	chapter:Re-architecture Notes
PromptConfig	autogpt/config/prompt_config.py	/^class PromptConfig:$/;"	c
PromptGenerator	autogpt/models/base_open_ai_plugin.py	/^PromptGenerator = TypeVar("PromptGenerator")$/;"	v
PromptGenerator	autogpt/prompts/generator.py	/^class PromptGenerator:$/;"	c
PromptGenerator	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^PromptGenerator = TypeVar("PromptGenerator")$/;"	v
PromptStrategiesConfiguration	autogpt/core/planning/simple.py	/^class PromptStrategiesConfiguration(SystemConfiguration):$/;"	c
PromptStrategy	autogpt/core/planning/base.py	/^class PromptStrategy(abc.ABC):$/;"	c
ProviderBudget	autogpt/core/resource/schema.py	/^class ProviderBudget(SystemConfiguration):$/;"	c
ProviderCredentials	autogpt/core/resource/schema.py	/^class ProviderCredentials(SystemConfiguration):$/;"	c
ProviderSettings	autogpt/core/resource/schema.py	/^class ProviderSettings(SystemSettings):$/;"	c
ProviderUsage	autogpt/core/resource/schema.py	/^class ProviderUsage(SystemConfiguration, abc.ABC):$/;"	c
QUICK LINKS 🔗	BULLETIN.md	/^# QUICK LINKS 🔗$/;"	c
QueryLanguageModel	autogpt/core/ability/builtins/query_language_model.py	/^class QueryLanguageModel(Ability):$/;"	c
Quickstart	README.md	/^## Quickstart$/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
READY	autogpt/core/planning/schema.py	/^    READY: str = "ready"$/;"	v	class:TaskStatus	typeref:typename:str
REPLACEMENTS	tests/vcr/vcr_filter.py	/^REPLACEMENTS: List[Dict[str, str]] = [$/;"	v	typeref:typename:List[Dict[str, str]]
RESEARCH	autogpt/core/planning/schema.py	/^    RESEARCH: str = "research"$/;"	v	class:TaskType	typeref:typename:str
RaisesError	tests/unit/test_retry_provider_openai.py	/^    class RaisesError:$/;"	c	function:error_factory	file:
Re-architecture Notes	autogpt/core/ARCHITECTURE_NOTES.md	/^# Re-architecture Notes$/;"	c
ReadFile	autogpt/core/ability/builtins/file_operations.py	/^class ReadFile(Ability):$/;"	c
Redis Setup	docs/configuration/memory.md	/^### Redis Setup$/;"	S	section:Memory Backend Setup
ResourceType	autogpt/core/resource/schema.py	/^class ResourceType(str, enum.Enum):$/;"	c
Resources	autogpt/core/ARCHITECTURE_NOTES.md	/^## Resources$/;"	s	chapter:The Agent Subsystems
ResponseMessageDict	autogpt/llm/base.py	/^class ResponseMessageDict(TypedDict):$/;"	c
Run with Dev Container	docs/setup.md	/^### Run with Dev Container$/;"	S	section:Setting up Auto-GPT""Running Auto-GPT
Run with Docker	docs/setup.md	/^### Run with Docker$/;"	S	section:Setting up Auto-GPT""Running Auto-GPT
Run without Docker	docs/setup.md	/^### Run without Docker$/;"	S	section:Setting up Auto-GPT""Running Auto-GPT
Running Auto-GPT	docs/setup.md	/^## Running Auto-GPT$/;"	s	chapter:Setting up Auto-GPT
Running specific test suites	docs/testing.md	/^### Running specific test suites$/;"	S	chapter:Running tests
Running tests	docs/testing.md	/^# Running tests$/;"	c
Running the Re-arch Code	autogpt/core/README.md	/^## Running the Re-arch Code$/;"	s	chapter:Auto-GPT Core
Running the linter	docs/testing.md	/^## Running the linter$/;"	s	chapter:Running tests
S	autogpt/core/configuration/schema.py	/^S = TypeVar("S", bound=SystemSettings)$/;"	v
SAVE_OPTIONS	autogpt/memory/vector/providers/json_file.py	/^    SAVE_OPTIONS = orjson.OPT_SERIALIZE_NUMPY | orjson.OPT_SERIALIZE_DATACLASS$/;"	v	class:JSONFileMemory
SMART_MODEL	autogpt/core/planning/schema.py	/^    SMART_MODEL: str = "smart_model"$/;"	v	class:LanguageModelClassification	typeref:typename:str
SUMMARIZATION_PROMPT	autogpt/memory/message_history.py	/^    SUMMARIZATION_PROMPT = '''Your task is to create a concise running summary of actions and in/;"	v	class:MessageHistory
SUMMARY_FILE_NAME	autogpt/logs/log_cycle.py	/^SUMMARY_FILE_NAME = "summary.txt"$/;"	v
SUPERVISOR_FEEDBACK_FILE_NAME	autogpt/logs/log_cycle.py	/^SUPERVISOR_FEEDBACK_FILE_NAME = "supervisor_feedback.txt"$/;"	v
SYSTEM	autogpt/core/resource/model_providers/schema.py	/^    SYSTEM = "system"$/;"	v	class:MessageRole
SafariDriver	autogpt/commands/web_selenium.py	/^from selenium.webdriver.safari.webdriver import WebDriver as SafariDriver$/;"	Y	nameref:unknown:WebDriver
SafariOptions	autogpt/commands/web_selenium.py	/^from selenium.webdriver.safari.options import Options as SafariOptions$/;"	Y	nameref:unknown:Options
Scope	docs/challenges/challenge_template.md	/^## Scope$/;"	s	chapter:Challenge Title
Secondary goals	autogpt/core/ARCHITECTURE_NOTES.md	/^## Secondary goals$/;"	s	chapter:Re-architecture Notes
Selenium	docs/configuration/imagegen.md	/^## Selenium$/;"	s	chapter:🖼 Image Generation configuration
Set up with Docker	docs/setup.md	/^### Set up with Docker$/;"	S	section:Setting up Auto-GPT""Setting up Auto-GPT
Set up with Git	docs/setup.md	/^### Set up with Git$/;"	S	section:Setting up Auto-GPT""Setting up Auto-GPT
Set up without Git/Docker	docs/setup.md	/^### Set up without Git\/Docker$/;"	S	section:Setting up Auto-GPT""Setting up Auto-GPT
Setting Your Cache Type	docs/configuration/memory.md	/^## Setting Your Cache Type$/;"	s
Setting up Auto-GPT	docs/setup.md	/^# Setting up Auto-GPT$/;"	c
Setting up Auto-GPT	docs/setup.md	/^## Setting up Auto-GPT$/;"	s	chapter:Setting up Auto-GPT
Setting up environment variables	docs/configuration/memory.md	/^#### Setting up environment variables$/;"	t	subsection:Memory Backend Setup""Weaviate Setup
Share your logs with us to help improve Auto-GPT	docs/share-your-logs.md	/^## Share your logs with us to help improve Auto-GPT$/;"	s
SimpleAbilityRegistry	autogpt/core/ability/simple.py	/^class SimpleAbilityRegistry(AbilityRegistry, Configurable):$/;"	c
SimpleAgent	autogpt/core/agent/simple.py	/^class SimpleAgent(Agent, Configurable):$/;"	c
SimpleMemory	autogpt/core/memory/simple.py	/^class SimpleMemory(Memory, Configurable):$/;"	c
SimplePlanner	autogpt/core/planning/simple.py	/^class SimplePlanner(Configurable):$/;"	c
SimplePluginService	autogpt/core/plugin/simple.py	/^class SimplePluginService(PluginService):$/;"	c
SimpleWorkspace	autogpt/core/workspace/simple.py	/^class SimpleWorkspace(Configurable, Workspace):$/;"	c
Singleton	autogpt/singleton.py	/^class Singleton(abc.ABCMeta, type):$/;"	c
Some Notes on how and why we'll use OO in this project	autogpt/core/ARCHITECTURE_NOTES.md	/^## Some Notes on how and why we'll use OO in this project$/;"	s	chapter:The Agent Subsystems
Speak Mode	docs/usage.md	/^### Speak Mode$/;"	S	section:Usage""Command Line Arguments
Spinner	autogpt/spinner.py	/^class Spinner:$/;"	c
Stable Diffusion WebUI	docs/configuration/imagegen.md	/^## Stable Diffusion WebUI$/;"	s	chapter:🖼 Image Generation configuration
StreamElementsSpeech	autogpt/speech/stream_elements_speech.py	/^class StreamElementsSpeech(VoiceBase):$/;"	c
Submit a Challenge	docs/challenges/submit.md	/^# Submit a Challenge$/;"	c
Success Evaluation	docs/challenges/challenge_template.md	/^## Success Evaluation$/;"	s	chapter:Challenge Title
SystemConfiguration	autogpt/core/configuration/schema.py	/^class SystemConfiguration(BaseModel):$/;"	c
SystemSettings	autogpt/core/configuration/schema.py	/^class SystemSettings(BaseModel):$/;"	c
T	autogpt/core/runner/client_lib/utils.py	/^T = TypeVar("T")$/;"	v
TChatSequence	autogpt/llm/base.py	/^TChatSequence = TypeVar("TChatSequence", bound="ChatSequence")$/;"	v
TEST	autogpt/core/planning/schema.py	/^    TEST: str = "test"$/;"	v	class:TaskType	typeref:typename:str
TEST_FILE_PATH	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^TEST_FILE_PATH = "test.py"$/;"	v
TEXT	autogpt/app/main.py	/^    TEXT = "TEXT"$/;"	v	class:UserFeedback
TEXT	autogpt/core/ability/schema.py	/^    TEXT = "text"$/;"	v	class:ContentType
TEXT	autogpt/core/resource/model_providers/schema.py	/^    TEXT: str = "text"$/;"	v	class:ModelProviderService	typeref:typename:str
TText	autogpt/llm/base.py	/^TText = list[int]$/;"	v
TXTParser	autogpt/commands/file_operations_utils.py	/^class TXTParser(ParserStrategy):$/;"	c
Task	autogpt/core/planning/schema.py	/^class Task(BaseModel):$/;"	c
Task	tests/challenges/schema.py	/^class Task(BaseModel):$/;"	c
TaskContext	autogpt/core/planning/schema.py	/^class TaskContext(BaseModel):$/;"	c
TaskStatus	autogpt/core/planning/schema.py	/^class TaskStatus(str, enum.Enum):$/;"	c
TaskType	autogpt/core/planning/schema.py	/^class TaskType(str, enum.Enum):$/;"	c
Test Plan	.github/PULL_REQUEST_TEMPLATE.md	/^### Test Plan$/;"	S
TestApiManager	tests/unit/test_api_manager.py	/^class TestApiManager:$/;"	c
TestBasicCodeGeneration	agbenchmark/regression_tests.json	/^    "TestBasicCodeGeneration": {$/;"	o
TestBasicMemory	agbenchmark/regression_tests.json	/^    "TestBasicMemory": {$/;"	o
TestConfig	tests/unit/test_text_file_parsers.py	/^class TestConfig(TestCase):$/;"	c
TestProviderOpenAI	tests/integration/test_provider_openai.py	/^class TestProviderOpenAI:$/;"	c
TestReadFile	agbenchmark/regression_tests.json	/^    "TestReadFile": {$/;"	o
TestValidateUrl	tests/unit/test_url_validation.py	/^class TestValidateUrl:$/;"	c
TestWriteFile	agbenchmark/regression_tests.json	/^    "TestWriteFile": {$/;"	o
Text to Speech	docs/configuration/voice.md	/^# Text to Speech$/;"	c
TextModelInfo	autogpt/llm/base.py	/^class TextModelInfo(CompletionModelInfo):$/;"	c
The Agent Subsystems	autogpt/core/ARCHITECTURE_NOTES.md	/^# The Agent Subsystems$/;"	c
The Motivation	autogpt/core/ARCHITECTURE_NOTES.md	/^## The Motivation$/;"	s	chapter:Re-architecture Notes
TypingConsoleHandler	autogpt/logs/handlers.py	/^class TypingConsoleHandler(logging.StreamHandler):$/;"	c
USER	autogpt/core/resource/model_providers/schema.py	/^    USER = "user"$/;"	v	class:MessageRole
USER_INPUT	tests/challenges/memory/test_memory_challenge_a.py	/^USER_INPUT = "Use the command read_file to read the instructions_1.txt file\\nFollow the instruc/;"	v
USER_INPUT	tests/challenges/memory/test_memory_challenge_b.py	/^USER_INPUT = "Use the command read_file to read the instructions_1.txt file\\nFollow the instruc/;"	v
USER_INPUT	tests/challenges/memory/test_memory_challenge_c.py	/^USER_INPUT = "Use the command read_file to read the instructions_1.txt file\\nFollow the instruc/;"	v
USER_INPUT	tests/challenges/memory/test_memory_challenge_d.py	/^USER_INPUT = "Use the command read_file to read the instructions_1.txt file\\nFollow the instruc/;"	v
USER_INPUTS	tests/challenges/basic_abilities/test_browse_website.py	/^USER_INPUTS = [$/;"	v
USER_INPUTS	tests/challenges/basic_abilities/test_write_file.py	/^USER_INPUTS = [$/;"	v
USER_INPUTS	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^USER_INPUTS = [$/;"	v
USER_INPUTS	tests/challenges/information_retrieval/test_information_retrieval_challenge_a.py	/^USER_INPUTS = [$/;"	v
USER_INPUTS	tests/challenges/information_retrieval/test_information_retrieval_challenge_b.py	/^USER_INPUTS = [$/;"	v
USER_INPUTS	tests/challenges/information_retrieval/test_information_retrieval_challenge_c.py	/^USER_INPUTS = [$/;"	v
USER_INPUTS	tests/challenges/kubernetes/test_kubernetes_template_challenge_a.py	/^USER_INPUTS = ["Write a simple kubernetes deployment file and save it as a kube.yaml."]$/;"	v
USER_INPUT_FILE_NAME	autogpt/logs/log_cycle.py	/^USER_INPUT_FILE_NAME = "user_input.txt"$/;"	v
USER_OBJECTIVE	autogpt/core/planning/templates.py	/^USER_OBJECTIVE = ($/;"	v
USER_SERVICE	autogpt/core/runner/cli_web_app/server/services/users.py	/^USER_SERVICE = UserService()$/;"	v
Usage	docs/usage.md	/^# Usage$/;"	c
Usage in the existing system	autogpt/core/ARCHITECTURE_NOTES.md	/^### Usage in the existing system$/;"	S	section:The Agent Subsystems""Plugins
UserConfigurable	autogpt/core/configuration/schema.py	/^def UserConfigurable(*args, **kwargs):$/;"	f
UserFeedback	autogpt/app/main.py	/^class UserFeedback(str, enum.Enum):$/;"	c
UserService	autogpt/core/runner/cli_web_app/server/services/users.py	/^class UserService:$/;"	c
VectorMemory	autogpt/memory/vector/__init__.py	/^from .providers.base import VectorMemoryProvider as VectorMemory$/;"	Y	nameref:unknown:VectorMemoryProvider
VectorMemoryProvider	autogpt/memory/vector/providers/base.py	/^class VectorMemoryProvider(MutableSet[MemoryItem]):$/;"	c
View Memory Usage	docs/configuration/memory.md	/^## View Memory Usage$/;"	s
VoiceBase	autogpt/speech/base.py	/^class VoiceBase(AbstractSingleton):$/;"	c
WORKSPACE	autogpt/core/plugin/base.py	/^    WORKSPACE = "workspace"  # Required now$/;"	v	class:PluginStorageFormat
WRITE	autogpt/core/planning/schema.py	/^    WRITE: str = "write"$/;"	v	class:TaskType	typeref:typename:str
Weaviate Setup	docs/configuration/memory.md	/^### Weaviate Setup$/;"	S	section:Memory Backend Setup
What are challenges?	docs/challenges/introduction.md	/^## What are challenges?$/;"	s	chapter:Introduction to Challenges
What is a Plugin	autogpt/core/ARCHITECTURE_NOTES.md	/^### What is a Plugin$/;"	S	section:The Agent Subsystems""Plugins
What we want	autogpt/core/ARCHITECTURE_NOTES.md	/^### What we want$/;"	S	section:The Agent Subsystems""Abilities
What we want	autogpt/core/ARCHITECTURE_NOTES.md	/^### What we want$/;"	S	section:The Agent Subsystems""Configuration
What we want	autogpt/core/ARCHITECTURE_NOTES.md	/^### What we want$/;"	S	section:The Agent Subsystems""Planning/Prompt-Engineering
What we want	autogpt/core/ARCHITECTURE_NOTES.md	/^### What we want$/;"	S	section:The Agent Subsystems""Plugins
What we want	autogpt/core/ARCHITECTURE_NOTES.md	/^### What we want$/;"	S	section:The Agent Subsystems""Resources
Why are challenges important?	docs/challenges/introduction.md	/^## Why are challenges important?$/;"	s	chapter:Introduction to Challenges
Workspace	autogpt/core/ARCHITECTURE_NOTES.md	/^## Workspace$/;"	s	chapter:The Agent Subsystems
Workspace	autogpt/core/workspace/base.py	/^class Workspace(abc.ABC):$/;"	c
Workspace	autogpt/workspace/workspace.py	/^class Workspace:$/;"	c
WorkspaceConfiguration	autogpt/core/workspace/simple.py	/^class WorkspaceConfiguration(SystemConfiguration):$/;"	c
WorkspaceSettings	autogpt/core/workspace/simple.py	/^class WorkspaceSettings(SystemSettings):$/;"	c
WriteFile	autogpt/core/ability/builtins/file_operations.py	/^class WriteFile(Ability):$/;"	c
XMLParser	autogpt/commands/file_operations_utils.py	/^class XMLParser(ParserStrategy):$/;"	c
YAMLParser	autogpt/commands/file_operations_utils.py	/^class YAMLParser(ParserStrategy):$/;"	c
[Overview](ARCHITECTURE_NOTES.md)	autogpt/core/README.md	/^## [Overview](ARCHITECTURE_NOTES.md)$/;"	s	chapter:Auto-GPT Core
_ACCESSIBLE_PATHS	tests/unit/test_workspace.py	/^_ACCESSIBLE_PATHS = [$/;"	v
_INACCESSIBLE_PATHS	tests/unit/test_workspace.py	/^_INACCESSIBLE_PATHS = ($/;"	v
_OpenAIRetryHandler	autogpt/core/resource/model_providers/openai.py	/^class _OpenAIRetryHandler:$/;"	c
_P	autogpt/core/resource/model_providers/openai.py	/^_P = ParamSpec("_P")$/;"	v
_QUEUE_SEMAPHORE	autogpt/speech/say.py	/^_QUEUE_SEMAPHORE = Semaphore($/;"	v
_T	autogpt/core/resource/model_providers/openai.py	/^_T = TypeVar("_T")$/;"	v
_WORKSPACE_ROOT	tests/unit/test_workspace.py	/^_WORKSPACE_ROOT = Path("home\/users\/monty\/auto_gpt_workspace")$/;"	v
__all__	autogpt/agents/__init__.py	/^__all__ = ["BaseAgent", "Agent", "CommandName", "CommandArgs", "AgentThoughts"]$/;"	v
__all__	autogpt/config/__init__.py	/^__all__ = [$/;"	v
__all__	autogpt/core/resource/model_providers/__init__.py	/^__all__ = [$/;"	v
__all__	autogpt/llm/__init__.py	/^__all__ = [$/;"	v
__all__	autogpt/memory/vector/__init__.py	/^__all__ = [$/;"	v
__all__	autogpt/memory/vector/providers/__init__.py	/^__all__ = [$/;"	v
__all__	autogpt/speech/__init__.py	/^__all__ = ["say_text"]$/;"	v
__all__	autogpt/workspace/__init__.py	/^__all__ = [$/;"	v
__call__	autogpt/core/ability/base.py	/^    async def __call__(self, *args, **kwargs) -> AbilityResult:$/;"	m	class:Ability	typeref:typename:AbilityResult
__call__	autogpt/core/ability/builtins/create_new_ability.py	/^    async def __call__($/;"	m	class:CreateNewAbility	typeref:typename:AbilityResult
__call__	autogpt/core/ability/builtins/file_operations.py	/^    def __call__(self, filename: str) -> AbilityResult:$/;"	m	class:ReadFile	typeref:typename:AbilityResult
__call__	autogpt/core/ability/builtins/file_operations.py	/^    def __call__(self, filename: str, contents: str) -> AbilityResult:$/;"	m	class:WriteFile	typeref:typename:AbilityResult
__call__	autogpt/core/ability/builtins/query_language_model.py	/^    async def __call__(self, query: str) -> AbilityResult:$/;"	m	class:QueryLanguageModel	typeref:typename:AbilityResult
__call__	autogpt/core/resource/model_providers/openai.py	/^    def __call__(self, func: Callable[_P, _T]) -> Callable[_P, _T]:$/;"	m	class:_OpenAIRetryHandler	typeref:typename:Callable[_P,_T]
__call__	autogpt/models/command.py	/^    def __call__(self, *args, **kwargs) -> Any:$/;"	m	class:Command	typeref:typename:Any
__call__	autogpt/singleton.py	/^    def __call__(cls, *args, **kwargs):$/;"	m	class:Singleton
__call__	tests/unit/test_retry_provider_openai.py	/^        def __call__(self):$/;"	m	class:error_factory.RaisesError
__contains__	autogpt/memory/vector/providers/json_file.py	/^    def __contains__(self, x: MemoryItem) -> bool:$/;"	m	class:JSONFileMemory	typeref:typename:bool
__contains__	autogpt/memory/vector/providers/no_memory.py	/^    def __contains__(self, x: MemoryItem) -> bool:$/;"	m	class:NoMemory	typeref:typename:bool
__contains__	autogpt/models/command_registry.py	/^    def __contains__(self, command_name: str):$/;"	m	class:CommandRegistry
__enter__	autogpt/spinner.py	/^    def __enter__(self):$/;"	m	class:Spinner
__eq__	autogpt/memory/vector/memory_item.py	/^    def __eq__(self, other: MemoryItem):$/;"	m	class:MemoryItem
__exit__	autogpt/spinner.py	/^    def __exit__(self, exc_type, exc_value, exc_traceback) -> None:$/;"	m	class:Spinner	typeref:typename:None
__getitem__	autogpt/llm/base.py	/^    def __getitem__(self, key: int) -> Message:$/;"	m	class:ChatSequence	typeref:typename:Message
__getitem__	autogpt/llm/base.py	/^    def __getitem__(self: TChatSequence, key: int | slice) -> Message | TChatSequence:$/;"	m	class:ChatSequence	typeref:typename:Message|TChatSequence
__getitem__	autogpt/llm/base.py	/^    def __getitem__(self: TChatSequence, key: slice) -> TChatSequence:$/;"	m	class:ChatSequence	typeref:typename:TChatSequence
__init__	autogpt/agents/agent.py	/^    def __init__($/;"	m	class:Agent
__init__	autogpt/agents/base.py	/^    def __init__($/;"	m	class:BaseAgent
__init__	autogpt/commands/file_operations_utils.py	/^    def __init__(self, parser: ParserStrategy, logger: logs.Logger):$/;"	m	class:FileContext
__init__	autogpt/config/ai_config.py	/^    def __init__($/;"	m	class:AIConfig	typeref:typename:None
__init__	autogpt/config/prompt_config.py	/^    def __init__(self, prompt_settings_file: str) -> None:$/;"	m	class:PromptConfig	typeref:typename:None
__init__	autogpt/core/ability/builtins/create_new_ability.py	/^    def __init__($/;"	m	class:CreateNewAbility
__init__	autogpt/core/ability/builtins/file_operations.py	/^    def __init__($/;"	m	class:ReadFile
__init__	autogpt/core/ability/builtins/file_operations.py	/^    def __init__($/;"	m	class:WriteFile
__init__	autogpt/core/ability/builtins/query_language_model.py	/^    def __init__($/;"	m	class:QueryLanguageModel
__init__	autogpt/core/ability/simple.py	/^    def __init__($/;"	m	class:SimpleAbilityRegistry
__init__	autogpt/core/agent/base.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Agent
__init__	autogpt/core/agent/simple.py	/^    def __init__($/;"	m	class:SimpleAgent
__init__	autogpt/core/memory/simple.py	/^    def __init__($/;"	m	class:SimpleMemory
__init__	autogpt/core/memory/simple.py	/^    def __init__(self, previous_message_history: list[str]):$/;"	m	class:MessageHistory
__init__	autogpt/core/planning/simple.py	/^    def __init__($/;"	m	class:SimplePlanner	typeref:typename:None
__init__	autogpt/core/planning/strategies/initial_plan.py	/^    def __init__($/;"	m	class:InitialPlan
__init__	autogpt/core/planning/strategies/name_and_goals.py	/^    def __init__($/;"	m	class:NameAndGoals
__init__	autogpt/core/planning/strategies/next_ability.py	/^    def __init__($/;"	m	class:NextAbility
__init__	autogpt/core/resource/model_providers/openai.py	/^    def __init__($/;"	m	class:OpenAIProvider
__init__	autogpt/core/resource/model_providers/openai.py	/^    def __init__($/;"	m	class:_OpenAIRetryHandler
__init__	autogpt/core/runner/cli_web_app/server/services/users.py	/^    def __init__(self):$/;"	m	class:UserService
__init__	autogpt/core/workspace/simple.py	/^    def __init__($/;"	m	class:SimpleWorkspace
__init__	autogpt/llm/api_manager.py	/^    def __init__(self):$/;"	m	class:ApiManager
__init__	autogpt/logs/handlers.py	/^    def __init__(self, filename: str | Path, mode="a", encoding=None, delay=False):$/;"	m	class:JsonFileHandler
__init__	autogpt/logs/log_cycle.py	/^    def __init__(self):$/;"	m	class:LogCycleHandler
__init__	autogpt/logs/logger.py	/^    def __init__(self):$/;"	m	class:Logger
__init__	autogpt/memory/vector/providers/base.py	/^    def __init__(self, config: Config):$/;"	m	class:VectorMemoryProvider
__init__	autogpt/memory/vector/providers/json_file.py	/^    def __init__(self, config: Config) -> None:$/;"	m	class:JSONFileMemory	typeref:typename:None
__init__	autogpt/memory/vector/providers/no_memory.py	/^    def __init__(self, config: Optional[Config] = None):$/;"	m	class:NoMemory
__init__	autogpt/models/base_open_ai_plugin.py	/^    def __init__(self, manifests_specs_clients: dict):$/;"	m	class:BaseOpenAIPlugin
__init__	autogpt/models/command.py	/^    def __init__($/;"	m	class:Command
__init__	autogpt/models/command_registry.py	/^    def __init__(self):$/;"	m	class:CommandRegistry
__init__	autogpt/prompts/generator.py	/^    def __init__(self):$/;"	m	class:PromptGenerator
__init__	autogpt/speech/base.py	/^    def __init__(self, config: Config):$/;"	m	class:VoiceBase
__init__	autogpt/spinner.py	/^    def __init__($/;"	m	class:Spinner	typeref:typename:None
__init__	autogpt/workspace/workspace.py	/^    def __init__(self, workspace_root: str | Path, restrict_to_workspace: bool):$/;"	m	class:Workspace
__init__	tests/challenges/challenge_decorator/challenge.py	/^    def __init__($/;"	m	class:Challenge	typeref:typename:None
__init__	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def __init__(self):$/;"	m	class:AutoGPTGuanaco
__init__	tests/unit/test_retry_provider_openai.py	/^        def __init__(self):$/;"	m	class:error_factory.RaisesError
__init__	tests/unit/test_web_search.py	/^        def __init__(self, _status, _reason):$/;"	m	class:test_google_official_search_errors.resp
__iter__	autogpt/llm/base.py	/^    def __iter__(self):$/;"	m	class:ChatSequence
__iter__	autogpt/memory/vector/providers/json_file.py	/^    def __iter__(self) -> Iterator[MemoryItem]:$/;"	m	class:JSONFileMemory	typeref:typename:Iterator[MemoryItem]
__iter__	autogpt/memory/vector/providers/no_memory.py	/^    def __iter__(self) -> Iterator[MemoryItem]:$/;"	m	class:NoMemory	typeref:typename:Iterator[MemoryItem]
__len__	autogpt/llm/base.py	/^    def __len__(self):$/;"	m	class:ChatSequence
__len__	autogpt/memory/vector/providers/json_file.py	/^    def __len__(self) -> int:$/;"	m	class:JSONFileMemory	typeref:typename:int
__len__	autogpt/memory/vector/providers/no_memory.py	/^    def __len__(self) -> int:$/;"	m	class:NoMemory	typeref:typename:int
__repr__	autogpt/core/agent/base.py	/^    def __repr__(self):$/;"	m	class:Agent
__repr__	autogpt/core/agent/simple.py	/^    def __repr__(self):$/;"	m	class:SimpleAgent
__repr__	autogpt/core/resource/model_providers/openai.py	/^    def __repr__(self):$/;"	m	class:OpenAIProvider
__repr__	autogpt/models/command_parameter.py	/^    def __repr__(self):$/;"	m	class:CommandParameter
__repr__	autogpt/plugins/plugins_config.py	/^    def __repr__(self):$/;"	m	class:PluginsConfig
__str__	autogpt/core/ability/base.py	/^    def __str__(self) -> str:$/;"	m	class:Ability	typeref:typename:str
__str__	autogpt/core/planning/schema.py	/^    def __str__(self):$/;"	m	class:LanguageModelPrompt
__str__	autogpt/memory/vector/memory_item.py	/^    def __str__(self):$/;"	m	class:MemoryItemRelevance
__str__	autogpt/models/command.py	/^    def __str__(self) -> str:$/;"	m	class:Command	typeref:typename:str
_api_key_error_msg	autogpt/core/resource/model_providers/openai.py	/^    _api_key_error_msg = ($/;"	v	class:_OpenAIRetryHandler
_backoff	autogpt/core/resource/model_providers/openai.py	/^    def _backoff(self, attempt: int) -> None:$/;"	m	class:_OpenAIRetryHandler	typeref:typename:None
_backoff_msg	autogpt/core/resource/model_providers/openai.py	/^    _backoff_msg = "Error: API Bad gateway. Waiting {backoff} seconds..."$/;"	v	class:_OpenAIRetryHandler
_check_preconditions	autogpt/core/ability/builtins/file_operations.py	/^    def _check_preconditions($/;"	m	class:WriteFile	typeref:typename:AbilityResult|None
_check_preconditions	autogpt/core/ability/builtins/file_operations.py	/^    def _check_preconditions(self, filename: str) -> AbilityResult | None:$/;"	m	class:ReadFile	typeref:typename:AbilityResult|None
_choose_next_ability	autogpt/core/agent/simple.py	/^    async def _choose_next_ability(self, task: Task, ability_schema: list[dict]):$/;"	m	class:SimpleAgent
_create_completion	autogpt/core/resource/model_providers/openai.py	/^async def _create_completion($/;"	f	typeref:typename:openai.Completion
_create_embedding	autogpt/core/resource/model_providers/openai.py	/^async def _create_embedding(text: str, *_, **kwargs) -> openai.Embedding:$/;"	f	typeref:typename:openai.Embedding
_evaluate_task_and_add_context	autogpt/core/agent/simple.py	/^    async def _evaluate_task_and_add_context(self, task: Task) -> Task:$/;"	m	class:SimpleAgent	typeref:typename:Task
_generate_command_string	autogpt/prompts/generator.py	/^    def _generate_command_string(self, command: Dict[str, Any]) -> str:$/;"	m	class:PromptGenerator	typeref:typename:str
_generate_numbered_list	autogpt/prompts/generator.py	/^    def _generate_numbered_list(self, items: List[Any], item_type="list") -> str:$/;"	m	class:PromptGenerator	typeref:typename:str
_get_completion_kwargs	autogpt/core/resource/model_providers/openai.py	/^    def _get_completion_kwargs($/;"	m	class:OpenAIProvider	typeref:typename:dict
_get_cycle_budget	autogpt/app/main.py	/^def _get_cycle_budget(continuous_mode: bool, continuous_limit: int) -> int | None:$/;"	f	typeref:typename:int|None
_get_embedding_kwargs	autogpt/core/resource/model_providers/openai.py	/^    def _get_embedding_kwargs($/;"	m	class:OpenAIProvider	typeref:typename:dict
_get_embedding_with_plugin	autogpt/memory/vector/utils.py	/^def _get_embedding_with_plugin(text: str, config: Config) -> Embedding:$/;"	f	typeref:typename:Embedding
_get_system_instance	autogpt/core/agent/simple.py	/^    def _get_system_instance($/;"	m	class:SimpleAgent
_get_user_config_fields	autogpt/core/configuration/schema.py	/^def _get_user_config_fields(instance: BaseModel) -> dict[str, Any]:$/;"	f	typeref:typename:dict[str,Any]
_get_voice_engine	autogpt/speech/say.py	/^def _get_voice_engine(config: Config) -> tuple[VoiceBase, VoiceBase]:$/;"	f	typeref:typename:tuple[VoiceBase,VoiceBase]
_import_module	autogpt/models/command_registry.py	/^    def _import_module(self, module_name: str) -> Any:$/;"	m	class:CommandRegistry	typeref:typename:Any
_instances	autogpt/singleton.py	/^    _instances = {}$/;"	v	class:Singleton
_load_message_history	autogpt/core/memory/simple.py	/^    def _load_message_history(workspace: Workspace):$/;"	m	class:SimpleMemory
_log	autogpt/logs/logger.py	/^    def _log($/;"	m	class:Logger	typeref:typename:None
_log_rate_limit_error	autogpt/core/resource/model_providers/openai.py	/^    def _log_rate_limit_error(self) -> None:$/;"	m	class:_OpenAIRetryHandler	typeref:typename:None
_make_template_kwargs_for_strategy	autogpt/core/planning/simple.py	/^    def _make_template_kwargs_for_strategy(self, strategy: PromptStrategy):$/;"	m	class:SimplePlanner
_max_chunk_length	autogpt/processing/text.py	/^def _max_chunk_length(model: str, max: Optional[int] = None) -> int:$/;"	f	typeref:typename:int
_parse_response	autogpt/core/ability/builtins/query_language_model.py	/^    def _parse_response(response_content: dict) -> dict:$/;"	m	class:QueryLanguageModel	typeref:typename:dict
_prune_empty_dicts	autogpt/core/agent/simple.py	/^def _prune_empty_dicts(d: dict) -> dict:$/;"	f	typeref:typename:dict
_reload_module	autogpt/models/command_registry.py	/^    def _reload_module(self, module: Any) -> Any:$/;"	m	class:CommandRegistry	typeref:typename:Any
_retry_limit_msg	autogpt/core/resource/model_providers/openai.py	/^    _retry_limit_msg = "Error: Reached rate limit, passing..."$/;"	v	class:_OpenAIRetryHandler
_safe_split	autogpt/config/config.py	/^def _safe_split(s: Union[str, None], sep: str = ",") -> list[str]:$/;"	f	typeref:typename:list[str]
_sanitize_path	autogpt/core/workspace/simple.py	/^    def _sanitize_path($/;"	m	class:SimpleWorkspace	typeref:typename:Path
_sanitize_path	autogpt/workspace/workspace.py	/^    def _sanitize_path($/;"	m	class:Workspace	typeref:typename:Path
_setup	autogpt/speech/base.py	/^    def _setup(self, config: Config) -> None:$/;"	m	class:VoiceBase	typeref:typename:None
_setup	autogpt/speech/eleven_labs.py	/^    def _setup(self, config: Config) -> None:$/;"	m	class:ElevenLabsSpeech	typeref:typename:None
_setup	autogpt/speech/gtts.py	/^    def _setup(self, config: Config) -> None:$/;"	m	class:GTTSVoice	typeref:typename:None
_setup	autogpt/speech/macos_tts.py	/^    def _setup(self, config: Config) -> None:$/;"	m	class:MacOSTTS	typeref:typename:None
_setup	autogpt/speech/stream_elements_speech.py	/^    def _setup(self, config: Config) -> None:$/;"	m	class:StreamElementsSpeech	typeref:typename:None
_speech	autogpt/speech/base.py	/^    def _speech(self, text: str, voice_index: int = 0) -> bool:$/;"	m	class:VoiceBase	typeref:typename:bool
_speech	autogpt/speech/eleven_labs.py	/^    def _speech(self, text: str, voice_index: int = 0) -> bool:$/;"	m	class:ElevenLabsSpeech	typeref:typename:bool
_speech	autogpt/speech/gtts.py	/^    def _speech(self, text: str, _: int = 0) -> bool:$/;"	m	class:GTTSVoice	typeref:typename:bool
_speech	autogpt/speech/macos_tts.py	/^    def _speech(self, text: str, voice_index: int = 0) -> bool:$/;"	m	class:MacOSTTS	typeref:typename:bool
_speech	autogpt/speech/stream_elements_speech.py	/^    def _speech(self, text: str, voice: str, _: int = 0) -> bool:$/;"	m	class:StreamElementsSpeech	typeref:typename:bool
_update_summary_with_batch	autogpt/memory/message_history.py	/^    def _update_summary_with_batch($/;"	m	class:MessageHistory	typeref:typename:None
_update_tasks_and_memory	autogpt/core/agent/simple.py	/^    async def _update_tasks_and_memory(self, ability_result: AbilityResult):$/;"	m	class:SimpleAgent
_use_custom_voice	autogpt/speech/eleven_labs.py	/^    def _use_custom_voice(self, voice, voice_index) -> None:$/;"	m	class:ElevenLabsSpeech	typeref:typename:None
_verify_no_completion_tokens_used	autogpt/core/resource/model_providers/schema.py	/^    def _verify_no_completion_tokens_used(cls, v):$/;"	m	class:EmbeddingModelProviderModelResponse
_wrapped	autogpt/core/resource/model_providers/openai.py	/^        async def _wrapped(*args: _P.args, **kwargs: _P.kwargs) -> _T:$/;"	f	member:_OpenAIRetryHandler.__call__	typeref:typename:_T	file:
_wrapped	autogpt/llm/providers/openai.py	/^        def _wrapped(*args, **kwargs):$/;"	f	function:retry_api._wrapper	file:
_wrapper	autogpt/llm/providers/openai.py	/^    def _wrapper(func: Callable):$/;"	f	function:retry_api	file:
accessible_path	tests/unit/test_workspace.py	/^def accessible_path(request):$/;"	f
add	autogpt/llm/base.py	/^    def add($/;"	m	class:ChatSequence	typeref:typename:None
add	autogpt/memory/vector/providers/json_file.py	/^    def add(self, item: MemoryItem):$/;"	m	class:JSONFileMemory
add	autogpt/memory/vector/providers/no_memory.py	/^    def add(self, item: MemoryItem):$/;"	m	class:NoMemory
add_command	autogpt/prompts/generator.py	/^    def add_command($/;"	m	class:PromptGenerator	typeref:typename:None
add_constraint	autogpt/prompts/generator.py	/^    def add_constraint(self, constraint: str) -> None:$/;"	m	class:PromptGenerator	typeref:typename:None
add_header	autogpt/commands/web_selenium.py	/^def add_header(driver: WebDriver) -> None:$/;"	f	typeref:typename:None
add_history_upto_token_limit	autogpt/agents/base.py	/^def add_history_upto_token_limit($/;"	f	typeref:typename:list[Message]
add_performance_evaluation	autogpt/prompts/generator.py	/^    def add_performance_evaluation(self, evaluation: str) -> None:$/;"	m	class:PromptGenerator	typeref:typename:None
add_resource	autogpt/prompts/generator.py	/^    def add_resource(self, resource: str) -> None:$/;"	m	class:PromptGenerator	typeref:typename:None
additionalProperties	autogpt/json_utils/llm_response_format_1.json	/^            "additionalProperties": false$/;"	b	object:properties.command
additionalProperties	autogpt/json_utils/llm_response_format_1.json	/^            "additionalProperties": false$/;"	b	object:properties.thoughts
additionalProperties	autogpt/json_utils/llm_response_format_1.json	/^    "additionalProperties": false$/;"	b
additional_ability_arguments	autogpt/core/planning/strategies/next_ability.py	/^    additional_ability_arguments: dict = UserConfigurable()$/;"	v	class:NextAbilityConfiguration	typeref:typename:dict
agent	autogpt/memory/message_history.py	/^    agent: Optional[BaseAgent | Agent] = None$/;"	v	class:MessageHistory	typeref:typename:Optional[BaseAgent | Agent]
agent	tests/conftest.py	/^def agent(config: Config, workspace: Workspace) -> Agent:$/;"	f	typeref:typename:Agent
agent	tests/unit/test_message_history.py	/^def agent(config: Config):$/;"	f
ai_settings_file	autogpt/config/config.py	/^    ai_settings_file: str = "ai_settings.yaml"$/;"	v	class:Config	typeref:typename:str
alias_info	autogpt/llm/providers/openai.py	/^    alias_info = ChatModelInfo(**OPEN_AI_CHAT_MODELS[target].__dict__)$/;"	v
alignItems	autogpt/js/overlay.js	/^    alignItems: 'center',$/;"	p	variable:anonymousObject550889d10105
allow_downloads	autogpt/config/config.py	/^    allow_downloads: bool = False$/;"	v	class:Config	typeref:typename:bool
anonymousObject550889d10105	autogpt/js/overlay.js	/^Object.assign(overlay.style, {$/;"	v
anonymousObject550889d10205	autogpt/js/overlay.js	/^Object.assign(textContent.style, {$/;"	v
api_base	autogpt/core/resource/model_providers/schema.py	/^    api_base: SecretStr | None = UserConfigurable(default=None)$/;"	v	class:ModelProviderCredentials	typeref:typename:SecretStr|None
api_key	autogpt/core/resource/model_providers/schema.py	/^    api_key: SecretStr | None = UserConfigurable(default=None)$/;"	v	class:ModelProviderCredentials	typeref:typename:SecretStr|None
api_manager	tests/conftest.py	/^def api_manager() -> ApiManager:$/;"	f	typeref:typename:ApiManager
api_manager	tests/integration/test_provider_openai.py	/^api_manager = ApiManager()$/;"	v
api_manager	tests/unit/test_api_manager.py	/^api_manager = ApiManager()$/;"	v
api_type	autogpt/core/resource/model_providers/schema.py	/^    api_type: SecretStr | None = UserConfigurable(default=None)$/;"	v	class:ModelProviderCredentials	typeref:typename:SecretStr|None
api_version	autogpt/core/resource/model_providers/schema.py	/^    api_version: SecretStr | None = UserConfigurable(default=None)$/;"	v	class:ModelProviderCredentials	typeref:typename:SecretStr|None
app	autogpt/core/runner/cli_web_app/server/api.py	/^app = FastAPI()$/;"	v
append	autogpt/llm/base.py	/^    def append(self, message: Message):$/;"	m	class:ChatSequence
append_to_file	autogpt/commands/file_operations.py	/^def append_to_file($/;"	f	typeref:typename:str
args	autogpt/json_utils/llm_response_format_1.json	/^                "args": {$/;"	o	object:properties.command.properties
argument	run_continuous.bat	/^set argument=--continuous$/;"	v
arguments	autogpt/core/ability/base.py	/^    def arguments(cls) -> dict:$/;"	m	class:Ability	typeref:typename:dict
arguments	autogpt/core/ability/builtins/create_new_ability.py	/^    def arguments(cls) -> dict:$/;"	m	class:CreateNewAbility	typeref:typename:dict
arguments	autogpt/core/ability/builtins/file_operations.py	/^    def arguments(self) -> dict:$/;"	m	class:ReadFile	typeref:typename:dict
arguments	autogpt/core/ability/builtins/file_operations.py	/^    def arguments(self) -> dict:$/;"	m	class:WriteFile	typeref:typename:dict
arguments	autogpt/core/ability/builtins/query_language_model.py	/^    def arguments(cls) -> dict:$/;"	m	class:QueryLanguageModel	typeref:typename:dict
assert_single_test_function	tests/challenges/test_challenge_should_be_formatted_properly.py	/^def assert_single_test_function(functions_list: List, test_file: str) -> None:$/;"	f	typeref:typename:None
audio_to_text_provider	autogpt/config/config.py	/^    audio_to_text_provider: str = "huggingface"$/;"	v	class:Config	typeref:typename:str
authorise_key	autogpt/config/config.py	/^    authorise_key: str = "y"$/;"	v	class:Config	typeref:typename:str
autogpt	autogpt/core/runner/cli_app/cli.py	/^def autogpt():$/;"	f
autogpt	autogpt/core/runner/cli_web_app/cli.py	/^def autogpt():$/;"	f
autogpt_server	autogpt/core/runner/cli_web_app/cli.py	/^def autogpt_server():$/;"	f
azure_config_file	autogpt/config/config.py	/^    azure_config_file: Optional[str] = AZURE_CONFIG_FILE$/;"	v	class:Config	typeref:typename:Optional[str]
azure_model_to_deployment_id_map	autogpt/config/config.py	/^    azure_model_to_deployment_id_map: Optional[Dict[str, str]] = None$/;"	v	class:Config	typeref:typename:Optional[Dict[str, str]]
background	autogpt/js/overlay.js	/^    background: 'rgba(0, 0, 0, 0.7)',$/;"	p	variable:anonymousObject550889d10105
basic_abilities	tests/challenges/current_score.json	/^    "basic_abilities": {$/;"	o
batch	autogpt/utils.py	/^def batch(iterable, max_batch_length: int, overlap: int = 0):$/;"	f
before_record_request	tests/vcr/vcr_filter.py	/^def before_record_request(request: Request) -> Request | None:$/;"	f	typeref:typename:Request|None
before_record_response	tests/vcr/vcr_filter.py	/^def before_record_response(response: Dict[str, Any]) -> Dict[str, Any]:$/;"	f	typeref:typename:Dict[str,Any]
before_record_response_filter_errors	tests/challenges/conftest.py	/^def before_record_response_filter_errors($/;"	f	typeref:typename:Optional[Dict[str,Any]]
bootstrap_agent	agbenchmark/benchmarks.py	/^def bootstrap_agent(task, continuous_mode) -> Agent:$/;"	f	typeref:typename:Agent
browse_spacy_language_model	autogpt/config/config.py	/^    browse_spacy_language_model: str = "en_core_web_sm"$/;"	v	class:Config	typeref:typename:str
browse_website	autogpt/commands/web_selenium.py	/^def browse_website(url: str, question: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
browse_website	tests/challenges/current_score.json	/^        "browse_website": {$/;"	o	object:basic_abilities
budget	autogpt/core/resource/schema.py	/^    budget: ProviderBudget | None = None$/;"	v	class:ProviderSettings	typeref:typename:ProviderBudget|None
build_agent_configuration	autogpt/core/configuration/schema.py	/^    def build_agent_configuration(cls, configuration: dict) -> S:$/;"	m	class:Configurable	typeref:typename:S
build_config_from_env	autogpt/config/config.py	/^    def build_config_from_env(cls, workdir: Path) -> Config:$/;"	m	class:ConfigBuilder	typeref:typename:Config
build_default_prompt_generator	autogpt/prompts/prompt.py	/^def build_default_prompt_generator(config: Config) -> PromptGenerator:$/;"	f	typeref:typename:PromptGenerator
build_file_logger_path	autogpt/workspace/workspace.py	/^    def build_file_logger_path(config: Config, workspace_directory: Path):$/;"	m	class:Workspace
build_initial_plan	autogpt/core/agent/simple.py	/^    async def build_initial_plan(self) -> dict:$/;"	m	class:SimpleAgent	typeref:typename:dict
build_prompt	autogpt/core/planning/base.py	/^    def build_prompt(self, *_, **kwargs) -> LanguageModelPrompt:$/;"	m	class:PromptStrategy	typeref:typename:LanguageModelPrompt
build_prompt	autogpt/core/planning/strategies/initial_plan.py	/^    def build_prompt($/;"	m	class:InitialPlan	typeref:typename:LanguageModelPrompt
build_prompt	autogpt/core/planning/strategies/name_and_goals.py	/^    def build_prompt(self, user_objective: str = "", **kwargs) -> LanguageModelPrompt:$/;"	m	class:NameAndGoals	typeref:typename:LanguageModelPrompt
build_prompt	autogpt/core/planning/strategies/next_ability.py	/^    def build_prompt($/;"	m	class:NextAbility	typeref:typename:LanguageModelPrompt
build_user_configuration	autogpt/core/agent/simple.py	/^    def build_user_configuration(cls) -> dict[str, Any]:$/;"	m	class:SimpleAgent	typeref:typename:dict[str,Any]
calculate_scores	autogpt/memory/vector/memory_item.py	/^    def calculate_scores($/;"	m	class:MemoryItemRelevance	typeref:typename:tuple[float,float,list[float]]
call	autogpt/models/command_registry.py	/^    def call(self, command_name: str, **kwargs) -> Any:$/;"	m	class:CommandRegistry	typeref:typename:Any
call_ai_function	autogpt/llm/utils/__init__.py	/^def call_ai_function($/;"	f	typeref:typename:str
can_handle_chat_completion	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_chat_completion($/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_chat_completion	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_chat_completion($/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_on_instruction	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_on_instruction(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_on_instruction	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_on_instruction(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_on_planning	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_on_planning(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_on_planning	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_on_planning(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_on_response	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_on_response(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_on_response	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_on_response(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_post_command	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_post_command(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_post_command	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_post_command(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_post_instruction	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_post_instruction(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_post_instruction	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_post_instruction(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_post_planning	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_post_planning(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_post_planning	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_post_planning(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_post_prompt	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_post_prompt(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_post_prompt	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_post_prompt(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_pre_command	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_pre_command(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_pre_command	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_pre_command(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_pre_instruction	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_pre_instruction(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_pre_instruction	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_pre_instruction(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_report	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_report(self) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_report	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_report(self) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_text_embedding	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_text_embedding(self, text: str) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_text_embedding	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_text_embedding(self, text: str) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
can_handle_user_input	autogpt/models/base_open_ai_plugin.py	/^    def can_handle_user_input(self, user_input: str) -> bool:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:bool
can_handle_user_input	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def can_handle_user_input(self, user_input: str) -> bool:$/;"	m	class:AutoGPTGuanaco	typeref:typename:bool
challenge	tests/challenges/challenge_decorator/challenge_decorator.py	/^def challenge() -> Callable[[Callable[..., Any]], Callable[..., None]]:$/;"	f	typeref:typename:Callable[[Callable[...,Any]],Callable[...,None]]
challenge_name	tests/challenges/conftest.py	/^def challenge_name() -> str:$/;"	f	typeref:typename:str
chat_messages_enabled	autogpt/config/config.py	/^    chat_messages_enabled: bool = True$/;"	v	class:Config	typeref:typename:bool
chat_model_mapping	autogpt/llm/providers/openai.py	/^chat_model_mapping = {$/;"	v
chat_with_model	autogpt/core/planning/simple.py	/^    async def chat_with_model($/;"	m	class:SimplePlanner	typeref:typename:LanguageModelResponse
check_beat_challenges	tests/challenges/conftest.py	/^def check_beat_challenges(request: FixtureRequest) -> None:$/;"	f	typeref:typename:None
check_beliefs	tests/challenges/memory/test_memory_challenge_d.py	/^def check_beliefs(content: str, level: int) -> None:$/;"	f	typeref:typename:None
check_local_file_access	autogpt/url_utils/validators.py	/^def check_local_file_access(url: str) -> bool:$/;"	f	typeref:typename:bool
check_model	autogpt/app/configurator.py	/^def check_model($/;"	f	typeref:typename:str
check_openai_api_key	autogpt/config/config.py	/^def check_openai_api_key(config: Config) -> None:$/;"	f	typeref:typename:None
check_untyped_defs	mypy.ini	/^check_untyped_defs = True$/;"	k	section:mypy
chunk_content	autogpt/processing/text.py	/^def chunk_content($/;"	f
clean_input	autogpt/utils.py	/^def clean_input(config: Config, prompt: str = "", talk=False):$/;"	f
clear	autogpt/memory/vector/providers/json_file.py	/^    def clear(self):$/;"	m	class:JSONFileMemory
clear	autogpt/memory/vector/providers/no_memory.py	/^    def clear(self):$/;"	m	class:NoMemory
client	autogpt/core/runner/cli_web_app/cli.py	/^async def client(settings_file) -> None:$/;"	f	typeref:typename:None
clone_repository	autogpt/commands/git_operations.py	/^def clone_repository(url: str, clone_path: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
close_browser	autogpt/commands/web_selenium.py	/^def close_browser(driver: WebDriver) -> None:$/;"	f	typeref:typename:None
color	autogpt/js/overlay.js	/^    color: '#fff',$/;"	p	variable:anonymousObject550889d10105
command	autogpt/command_decorator.py	/^def command($/;"	f	typeref:typename:Callable[...,Any]
command	autogpt/json_utils/llm_response_format_1.json	/^        "command": {$/;"	o	object:properties
command_prompt	autogpt/models/command_registry.py	/^    def command_prompt(self) -> str:$/;"	m	class:CommandRegistry	typeref:typename:str
compile_settings	autogpt/core/agent/simple.py	/^    def compile_settings($/;"	m	class:SimpleAgent	typeref:typename:AgentSettings
completion_token_cost	autogpt/core/resource/model_providers/schema.py	/^    completion_token_cost: float = 0.0$/;"	v	class:ModelProviderModelInfo	typeref:typename:float
completion_tokens	autogpt/core/resource/model_providers/schema.py	/^    completion_tokens: int = 0$/;"	v	class:ModelProviderUsage	typeref:typename:int
config	autogpt/logs/logger.py	/^    def config(self) -> Config | None:$/;"	m	class:Logger	typeref:typename:Config|None
config	autogpt/logs/logger.py	/^    def config(self, config: Config):$/;"	m	class:Logger
config	autogpt/plugins/plugin_config.py	/^    config: dict[str, Any] = None$/;"	v	class:PluginConfig	typeref:typename:dict[str, Any]
config	data_ingestion.py	/^config = ConfigBuilder.build_config_from_env()$/;"	v
config	tests/conftest.py	/^def config($/;"	f	typeref:typename:Config
configuration_path	autogpt/core/workspace/simple.py	/^    def configuration_path(self) -> Path:$/;"	m	class:SimpleWorkspace	typeref:typename:Path
configure_logging	data_ingestion.py	/^def configure_logging():$/;"	f
construct_base_prompt	autogpt/agents/agent.py	/^    def construct_base_prompt(self, *args, **kwargs) -> ChatSequence:$/;"	m	class:Agent	typeref:typename:ChatSequence
construct_base_prompt	autogpt/agents/base.py	/^    def construct_base_prompt($/;"	m	class:BaseAgent	typeref:typename:ChatSequence
construct_full_prompt	autogpt/config/ai_config.py	/^    def construct_full_prompt($/;"	m	class:AIConfig	typeref:typename:str
construct_main_ai_config	autogpt/app/main.py	/^def construct_main_ai_config($/;"	f	typeref:typename:AIConfig
construct_prompt	autogpt/agents/base.py	/^    def construct_prompt(self, cycle_instruction: str) -> ChatSequence:$/;"	m	class:BaseAgent	typeref:typename:ChatSequence
content	autogpt/core/resource/model_providers/schema.py	/^    content: dict = None$/;"	v	class:LanguageModelProviderModelResponse	typeref:typename:dict
context	autogpt/core/planning/schema.py	/^    context: TaskContext = Field(default_factory=TaskContext)$/;"	v	class:Task	typeref:typename:TaskContext
continuous_limit	autogpt/config/config.py	/^    continuous_limit: int = 0$/;"	v	class:Config	typeref:typename:int
continuous_mode	autogpt/config/config.py	/^    continuous_mode: bool = False$/;"	v	class:Config	typeref:typename:bool
copy_file_into_workspace	tests/challenges/utils.py	/^def copy_file_into_workspace($/;"	f	typeref:typename:None
coroutine	autogpt/core/runner/client_lib/utils.py	/^def coroutine(f):$/;"	f
count_message_tokens	autogpt/llm/utils/token_counter.py	/^def count_message_tokens($/;"	f	typeref:typename:int
count_message_tokens	autogpt/llm/utils/token_counter.py	/^def count_message_tokens(messages: List[Message], model: str = "gpt-3.5-turbo") -> int:$/;"	f	typeref:typename:int
count_message_tokens	autogpt/llm/utils/token_counter.py	/^def count_message_tokens(messages: Message, model: str = "gpt-3.5-turbo") -> int:$/;"	f	typeref:typename:int
count_openai_functions_tokens	autogpt/llm/providers/openai.py	/^def count_openai_functions_tokens($/;"	f	typeref:typename:int
count_string_tokens	autogpt/llm/utils/token_counter.py	/^def count_string_tokens(string: str, model_name: str) -> int:$/;"	f	typeref:typename:int
create_agent	autogpt/core/runner/cli_web_app/server/api.py	/^async def create_agent(request: Request):$/;"	f
create_agent_function	autogpt/core/planning/strategies/name_and_goals.py	/^    create_agent_function: dict = UserConfigurable()$/;"	v	class:NameAndGoalsConfiguration	typeref:typename:dict
create_challenge	tests/challenges/challenge_decorator/challenge_utils.py	/^def create_challenge($/;"	f	typeref:typename:Challenge
create_chat_completion	autogpt/llm/providers/openai.py	/^def create_chat_completion($/;"	f	typeref:typename:OpenAIObject
create_chat_completion	autogpt/llm/utils/__init__.py	/^def create_chat_completion($/;"	f	typeref:typename:ChatModelResponse
create_config	autogpt/app/configurator.py	/^def create_config($/;"	f	typeref:typename:None
create_directory_if_not_exists	autogpt/plugins/__init__.py	/^def create_directory_if_not_exists(directory_path: str) -> bool:$/;"	f	typeref:typename:bool
create_embedding	autogpt/core/resource/model_providers/openai.py	/^    async def create_embedding($/;"	m	class:OpenAIProvider	typeref:typename:EmbeddingModelProviderModelResponse
create_embedding	autogpt/core/resource/model_providers/schema.py	/^    async def create_embedding($/;"	m	class:EmbeddingModelProvider	typeref:typename:EmbeddingModelProviderModelResponse
create_embedding	autogpt/llm/providers/openai.py	/^def create_embedding($/;"	f	typeref:typename:OpenAIObject
create_empty_plugins_config	autogpt/plugins/plugins_config.py	/^    def create_empty_plugins_config($/;"	m	class:PluginsConfig
create_inner_directory	autogpt/logs/log_cycle.py	/^    def create_inner_directory(self, outer_folder_path: Path, cycle_count: int) -> Path:$/;"	m	class:LogCycleHandler	typeref:typename:Path
create_instructions_files	tests/challenges/memory/test_memory_challenge_a.py	/^def create_instructions_files($/;"	f	typeref:typename:None
create_instructions_files	tests/challenges/memory/test_memory_challenge_b.py	/^def create_instructions_files($/;"	f	typeref:typename:None
create_instructions_files	tests/challenges/memory/test_memory_challenge_c.py	/^def create_instructions_files($/;"	f	typeref:typename:None
create_instructions_files	tests/challenges/memory/test_memory_challenge_d.py	/^def create_instructions_files($/;"	f	typeref:typename:None
create_language_completion	autogpt/core/resource/model_providers/openai.py	/^    async def create_language_completion($/;"	m	class:OpenAIProvider	typeref:typename:LanguageModelProviderModelResponse
create_language_completion	autogpt/core/resource/model_providers/schema.py	/^    async def create_language_completion($/;"	m	class:LanguageModelProvider	typeref:typename:LanguageModelProviderModelResponse
create_nested_directory	autogpt/logs/log_cycle.py	/^    def create_nested_directory($/;"	m	class:LogCycleHandler	typeref:typename:Path
create_outer_directory	autogpt/logs/log_cycle.py	/^    def create_outer_directory(self, ai_name: str, created_at: str) -> Path:$/;"	m	class:LogCycleHandler	typeref:typename:Path
create_plan_function	autogpt/core/planning/strategies/initial_plan.py	/^    create_plan_function: dict = UserConfigurable()$/;"	v	class:InitialPlanConfiguration	typeref:typename:dict
create_text_completion	autogpt/llm/providers/openai.py	/^def create_text_completion($/;"	f	typeref:typename:OpenAIObject
create_text_completion	autogpt/llm/utils/__init__.py	/^def create_text_completion($/;"	f	typeref:typename:str
credentials	autogpt/core/resource/schema.py	/^    credentials: ProviderCredentials | None = None$/;"	v	class:ProviderSettings	typeref:typename:ProviderCredentials|None
criticism	autogpt/json_utils/llm_response_format_1.json	/^                "criticism": {$/;"	o	object:properties.thoughts.properties
current_score_filename	tests/challenges/utils/build_current_score.py	/^current_score_filename = os.path.join(cwd, "tests\/challenges\/current_score.json")$/;"	v
cwd	tests/challenges/utils/build_current_score.py	/^cwd = os.getcwd()  # get current working directory$/;"	v
cycle_count	autogpt/core/planning/schema.py	/^    cycle_count: int = 0$/;"	v	class:TaskContext	typeref:typename:int
cycle_log_path	autogpt/core/workspace/simple.py	/^    def cycle_log_path(self) -> Path:$/;"	m	class:SimpleWorkspace	typeref:typename:Path
data	tests/challenges/utils/build_current_score.py	/^        data = json.load(f_new)$/;"	v
data_path	agbenchmark/regression_tests.json	/^        "data_path": "agbenchmark\/challenges\/code\/d3"$/;"	s	object:TestBasicCodeGeneration
data_path	agbenchmark/regression_tests.json	/^        "data_path": "agbenchmark\/challenges\/interface\/read_file"$/;"	s	object:TestReadFile
data_path	agbenchmark/regression_tests.json	/^        "data_path": "agbenchmark\/challenges\/interface\/write_file"$/;"	s	object:TestWriteFile
data_path	agbenchmark/regression_tests.json	/^        "data_path": "agbenchmark\/challenges\/memory\/m1"$/;"	s	object:TestBasicMemory
debug	autogpt/logs/logger.py	/^    def debug($/;"	m	class:Logger	typeref:typename:None
debug_code	tests/challenges/current_score.json	/^    "debug_code": {$/;"	o
debug_code_challenge_a	tests/challenges/current_score.json	/^        "debug_code_challenge_a": {$/;"	o	object:debug_code
debug_log_path	autogpt/core/workspace/simple.py	/^    def debug_log_path(self) -> Path:$/;"	m	class:SimpleWorkspace	typeref:typename:Path
debug_mode	autogpt/config/config.py	/^    debug_mode: bool = False$/;"	v	class:Config	typeref:typename:bool
decide_name_and_goals	autogpt/core/planning/simple.py	/^    async def decide_name_and_goals(self, user_objective: str) -> LanguageModelResponse:$/;"	m	class:SimplePlanner	typeref:typename:LanguageModelResponse
decorator	autogpt/command_decorator.py	/^    def decorator(func: Callable[..., Any]) -> Command:$/;"	f	function:command	typeref:typename:Command	file:
decorator	autogpt/commands/decorators.py	/^    def decorator(func: Callable):$/;"	f	function:sanitize_path_arg	file:
decorator	tests/challenges/challenge_decorator/challenge_decorator.py	/^    def decorator(func: Callable[..., Any]) -> Callable[..., None]:$/;"	f	function:challenge	typeref:typename:Callable[...,None]	file:
deep_merge	tests/challenges/utils/build_current_score.py	/^def deep_merge(source: Dict[Any, Any], dest: Dict[Any, Any]) -> Dict[Any, Any]:$/;"	f	typeref:typename:Dict[Any,Any]
deep_update	autogpt/core/configuration/schema.py	/^def deep_update(original_dict: dict, update_dict: dict) -> dict:$/;"	f	typeref:typename:dict
default_configuration	autogpt/core/ability/builtins/create_new_ability.py	/^    default_configuration = AbilityConfiguration($/;"	v	class:CreateNewAbility
default_configuration	autogpt/core/ability/builtins/file_operations.py	/^    default_configuration = AbilityConfiguration($/;"	v	class:ReadFile
default_configuration	autogpt/core/ability/builtins/file_operations.py	/^    default_configuration = AbilityConfiguration($/;"	v	class:WriteFile
default_configuration	autogpt/core/ability/builtins/query_language_model.py	/^    default_configuration = AbilityConfiguration($/;"	v	class:QueryLanguageModel
default_configuration	autogpt/core/planning/strategies/initial_plan.py	/^    default_configuration = InitialPlanConfiguration($/;"	v	class:InitialPlan
default_configuration	autogpt/core/planning/strategies/name_and_goals.py	/^    default_configuration = NameAndGoalsConfiguration($/;"	v	class:NameAndGoals
default_configuration	autogpt/core/planning/strategies/next_ability.py	/^    default_configuration = NextAbilityConfiguration($/;"	v	class:NextAbility
default_settings	autogpt/config/config.py	/^    default_settings = Config()$/;"	v	class:ConfigBuilder
default_settings	autogpt/core/ability/simple.py	/^    default_settings = AbilityRegistrySettings($/;"	v	class:SimpleAbilityRegistry
default_settings	autogpt/core/agent/simple.py	/^    default_settings = AgentSystemSettings($/;"	v	class:SimpleAgent
default_settings	autogpt/core/memory/simple.py	/^    default_settings = MemorySettings($/;"	v	class:SimpleMemory
default_settings	autogpt/core/planning/simple.py	/^    default_settings = PlannerSettings($/;"	v	class:SimplePlanner
default_settings	autogpt/core/resource/model_providers/openai.py	/^    default_settings = OpenAISettings($/;"	v	class:OpenAIProvider
default_settings	autogpt/core/workspace/simple.py	/^    default_settings = WorkspaceSettings($/;"	v	class:SimpleWorkspace
delete_file	autogpt/commands/file_operations.py	/^def delete_file(filename: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
dependencies	agbenchmark/regression_tests.json	/^        "dependencies": [$/;"	a	object:TestBasicCodeGeneration
dependencies	agbenchmark/regression_tests.json	/^        "dependencies": [$/;"	a	object:TestReadFile
dependencies	agbenchmark/regression_tests.json	/^        "dependencies": [],$/;"	a	object:TestWriteFile
deployment_id	autogpt/core/resource/model_providers/schema.py	/^    deployment_id: SecretStr | None = UserConfigurable(default=None)$/;"	v	class:ModelProviderCredentials	typeref:typename:SecretStr|None
description	autogpt/config/config.py	/^    description: str = "Default configuration for the Auto-GPT application."$/;"	v	class:Config	typeref:typename:str
description	autogpt/core/ability/base.py	/^    def description(cls) -> str:$/;"	m	class:Ability	typeref:typename:str
description	autogpt/core/ability/builtins/create_new_ability.py	/^    def description(cls) -> str:$/;"	m	class:CreateNewAbility	typeref:typename:str
description	autogpt/core/ability/builtins/file_operations.py	/^    def description(self) -> str:$/;"	m	class:ReadFile	typeref:typename:str
description	autogpt/core/ability/builtins/file_operations.py	/^    def description(self) -> str:$/;"	m	class:WriteFile	typeref:typename:str
description	autogpt/core/ability/builtins/query_language_model.py	/^    def description(cls) -> str:$/;"	m	class:QueryLanguageModel	typeref:typename:str
description	autogpt/json_utils/llm_response_format_1.json	/^                    "description": "- short bulleted\\n- list that conveys\\n- long-term plan"$/;"	s	object:properties.thoughts.properties.plan
description	autogpt/json_utils/llm_response_format_1.json	/^                    "description": "constructive self-criticism"$/;"	s	object:properties.thoughts.properties.criticism
description	autogpt/json_utils/llm_response_format_1.json	/^                    "description": "thoughts summary to say to user"$/;"	s	object:properties.thoughts.properties.speak
description	autogpt/json_utils/llm_response_format_1.json	/^                    "description": "thoughts"$/;"	s	object:properties.thoughts.properties.text
deserialize_config_file	autogpt/plugins/plugins_config.py	/^    def deserialize_config_file($/;"	m	class:PluginsConfig	typeref:typename:dict[str,PluginConfig]
determine_agent_name_and_goals	autogpt/core/agent/simple.py	/^    async def determine_agent_name_and_goals($/;"	m	class:SimpleAgent	typeref:typename:dict
determine_next_ability	autogpt/core/agent/base.py	/^    async def determine_next_ability(self, *args, **kwargs):$/;"	m	class:Agent
determine_next_ability	autogpt/core/agent/simple.py	/^    async def determine_next_ability(self, *args, **kwargs):$/;"	m	class:SimpleAgent
determine_next_ability	autogpt/core/planning/simple.py	/^    async def determine_next_ability($/;"	m	class:SimplePlanner
difficulty	agbenchmark/regression_tests.json	/^        "difficulty": "basic",$/;"	s	object:TestBasicCodeGeneration
difficulty	agbenchmark/regression_tests.json	/^        "difficulty": "basic",$/;"	s	object:TestBasicMemory
difficulty	agbenchmark/regression_tests.json	/^        "difficulty": "basic",$/;"	s	object:TestReadFile
disabled_command_categories	autogpt/config/config.py	/^    disabled_command_categories: list[str] = Field(default_factory=list)$/;"	v	class:Config	typeref:typename:list[str]
disallow_untyped_defs	mypy.ini	/^disallow_untyped_defs = True$/;"	k	section:mypy
discard	autogpt/memory/vector/providers/json_file.py	/^    def discard(self, item: MemoryItem):$/;"	m	class:JSONFileMemory
discard	autogpt/memory/vector/providers/no_memory.py	/^    def discard(self, item: MemoryItem):$/;"	m	class:NoMemory
display	autogpt/js/overlay.js	/^    display: 'flex',$/;"	p	variable:anonymousObject550889d10105
dockerComposeFile	.devcontainer/devcontainer.json	/^  "dockerComposeFile": ".\/docker-compose.yml",$/;"	s
dotCount	autogpt/js/overlay.js	/^let dotCount = 0;$/;"	v
double_check	autogpt/logs/logger.py	/^    def double_check(self, additionalText: Optional[str] = None) -> None:$/;"	m	class:Logger	typeref:typename:None
dummy_agent	tests/integration/agent_factory.py	/^def dummy_agent(config: Config, memory_json_file, workspace: Workspace):$/;"	f
dummy_method	tests/unit/test_url_validation.py	/^def dummy_method(url):$/;"	f
dummy_plugin	tests/unit/models/test_base_open_api_plugin.py	/^def dummy_plugin():$/;"	f
dump	autogpt/core/ability/base.py	/^    def dump(self) -> dict:$/;"	m	class:Ability	typeref:typename:dict
dump	autogpt/llm/base.py	/^    def dump(self) -> str:$/;"	m	class:ChatSequence	typeref:typename:str
dump	autogpt/memory/vector/memory_item.py	/^    def dump(self, calculate_length=False) -> str:$/;"	m	class:MemoryItem	typeref:typename:str
dump_abilities	autogpt/core/ability/base.py	/^    def dump_abilities(self) -> list[dict]:$/;"	m	class:AbilityRegistry	typeref:typename:list[dict]
dump_abilities	autogpt/core/ability/simple.py	/^    def dump_abilities(self) -> list[dict]:$/;"	m	class:SimpleAbilityRegistry	typeref:typename:list[dict]
elevenlabs_api_key	autogpt/config/config.py	/^    elevenlabs_api_key: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
elevenlabs_voice_id	autogpt/config/config.py	/^    elevenlabs_voice_id: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
embedding	autogpt/core/resource/model_providers/schema.py	/^    embedding: Embedding = Field(default_factory=list)$/;"	v	class:EmbeddingModelProviderModelResponse	typeref:typename:Embedding
embedding	autogpt/llm/base.py	/^    embedding: list[float] = field(default_factory=list)$/;"	v	class:EmbeddingModelResponse	typeref:typename:list[float]
embedding_dimension	tests/integration/memory/utils.py	/^def embedding_dimension(config: Config):$/;"	f
embedding_model	autogpt/config/config.py	/^    embedding_model: str = "text-embedding-ada-002"$/;"	v	class:Config	typeref:typename:str
emit	autogpt/logs/handlers.py	/^    def emit(self, record: logging.LogRecord) -> None:$/;"	m	class:ConsoleHandler	typeref:typename:None
emit	autogpt/logs/handlers.py	/^    def emit(self, record: logging.LogRecord):$/;"	m	class:JsonFileHandler
emit	autogpt/logs/handlers.py	/^    def emit(self, record: logging.LogRecord):$/;"	m	class:TypingConsoleHandler
enabled	autogpt/plugins/plugin_config.py	/^    enabled: bool = False$/;"	v	class:PluginConfig	typeref:typename:bool
engine_api_resource	autogpt/llm/providers/openai.py	/^import openai.api_resources.abstract.engine_api_resource as engine_api_resource$/;"	I	nameref:module:openai.api_resources.abstract.engine_api_resource
enough_info	autogpt/core/planning/schema.py	/^    enough_info: bool = False$/;"	v	class:TaskContext	typeref:typename:bool
entry_path	agbenchmark/config.json	/^  "entry_path": "agbenchmark.benchmarks"$/;"	s
error	autogpt/logs/logger.py	/^    def error(self, title: str, message: str = "") -> None:$/;"	m	class:Logger	typeref:typename:None
error	tests/unit/test_retry_provider_openai.py	/^def error(request):$/;"	f
error_factory	tests/unit/test_retry_provider_openai.py	/^def error_factory(error_instance, error_count, retry_count, warn_user=True):$/;"	f
example_command	tests/unit/test_commands.py	/^def example_command():$/;"	f
example_command_method	tests/unit/test_commands.py	/^def example_command_method(arg1: int, arg2: str) -> str:$/;"	f	typeref:typename:str
example_command_with_aliases	tests/unit/test_commands.py	/^def example_command_with_aliases(example_command: Command):$/;"	f
execute	autogpt/agents/agent.py	/^    def execute($/;"	m	class:Agent	typeref:typename:str
execute	autogpt/agents/base.py	/^    def execute($/;"	m	class:BaseAgent	typeref:typename:str
execute_command	autogpt/agents/agent.py	/^def execute_command($/;"	f	typeref:typename:Any
execute_local_commands	autogpt/config/config.py	/^    execute_local_commands: bool = False$/;"	v	class:Config	typeref:typename:bool
execute_next_ability	autogpt/core/agent/simple.py	/^    async def execute_next_ability(self, user_input: str, *args, **kwargs):$/;"	m	class:SimpleAgent
execute_python_code	autogpt/commands/execute_code.py	/^def execute_python_code(code: str, name: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
execute_python_file	autogpt/commands/execute_code.py	/^def execute_python_file(filename: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
execute_shell	autogpt/commands/execute_code.py	/^def execute_shell(command_line: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
execute_shell_popen	autogpt/commands/execute_code.py	/^def execute_shell_popen(command_line, agent: Agent) -> str:$/;"	f	typeref:typename:str
exit_key	autogpt/config/config.py	/^    exit_key: str = "n"$/;"	v	class:Config	typeref:typename:str
expected_result	tests/challenges/debug_code/data/test.py	/^    expected_result = [0, 1]$/;"	v
expected_result	tests/challenges/debug_code/data/test.py	/^    expected_result = [0, 3]$/;"	v
expected_result	tests/challenges/debug_code/data/test.py	/^    expected_result = [2, 5]$/;"	v
extend	autogpt/llm/base.py	/^    def extend(self, messages: list[Message] | ChatSequence):$/;"	m	class:ChatSequence
extension_to_parser	autogpt/commands/file_operations_utils.py	/^extension_to_parser = {$/;"	v
extra	autogpt/core/configuration/schema.py	/^        extra = "forbid"$/;"	v	class:SystemConfiguration.Config
extra	autogpt/core/configuration/schema.py	/^        extra = "forbid"$/;"	v	class:SystemSettings.Config
extra	autogpt/core/resource/model_providers/schema.py	/^        extra = "ignore"$/;"	v	class:ModelProviderCredentials.Config
extract_beliefs	tests/challenges/memory/test_memory_challenge_d.py	/^def extract_beliefs(content: str) -> Dict[str, Dict[str, str]]:$/;"	f	typeref:typename:Dict[str,Dict[str,str]]
extract_command	autogpt/agents/agent.py	/^def extract_command($/;"	f	typeref:typename:tuple[str,dict[str,str]]
extract_dict_from_response	autogpt/json_utils/utilities.py	/^def extract_dict_from_response(response_content: str) -> dict[str, Any]:$/;"	f	typeref:typename:dict[str,Any]
extract_hyperlinks	autogpt/processing/html.py	/^def extract_hyperlinks(soup: BeautifulSoup, base_url: str) -> list[tuple[str, str]]:$/;"	f	typeref:typename:list[tuple[str,str]]
f	tests/unit/test_retry_provider_openai.py	/^    def f():$/;"	f	function:test_retry_open_api_no_error	file:
fast_llm	autogpt/config/config.py	/^    fast_llm: str = "gpt-3.5-turbo"$/;"	v	class:Config	typeref:typename:str
features	.devcontainer/devcontainer.json	/^  "features": {$/;"	o
fetch_openai_plugins_manifest_and_spec	autogpt/plugins/__init__.py	/^def fetch_openai_plugins_manifest_and_spec(config: Config) -> dict:$/;"	f	typeref:typename:dict
file_content	tests/unit/test_file_operations.py	/^def file_content():$/;"	f
file_logger_path	autogpt/config/config.py	/^    file_logger_path: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
file_operations_state	autogpt/commands/file_operations.py	/^def file_operations_state(log_path: str) -> dict[str, str]:$/;"	f	typeref:typename:dict[str,str]
file_ops	tests/unit/test_file_operations.py	/^import autogpt.commands.file_operations as file_ops$/;"	I	nameref:module:autogpt.commands.file_operations
files	mypy.ini	/^files = tests\/challenges\/**\/*.py$/;"	k	section:mypy
filter_hostnames	tests/vcr/vcr_filter.py	/^def filter_hostnames(request: Request) -> Request | None:$/;"	f	typeref:typename:Request|None
find_python_command	run.sh	/^function find_python_command() {$/;"	f
follow_imports	mypy.ini	/^follow_imports = skip$/;"	k	section:mypy
fontSize	autogpt/js/overlay.js	/^    fontSize: '24px',$/;"	p	variable:anonymousObject550889d10105
fontWeight	autogpt/js/overlay.js	/^    fontWeight: 'bold',$/;"	p	variable:anonymousObject550889d10105
for_model	autogpt/llm/base.py	/^    def for_model($/;"	m	class:ChatSequence	typeref:typename:TChatSequence
format	autogpt/logs/formatters.py	/^    def format(self, record: logging.LogRecord) -> str:$/;"	m	class:AutoGptFormatter	typeref:typename:str
format	autogpt/logs/formatters.py	/^    def format(self, record: logging.LogRecord):$/;"	m	class:JsonFormatter
format_function_specs_as_typescript_ns	autogpt/llm/providers/openai.py	/^def format_function_specs_as_typescript_ns(functions: list[OpenAIFunctionSpec]) -> str:$/;"	f	typeref:typename:str
format_hyperlinks	autogpt/processing/html.py	/^def format_hyperlinks(hyperlinks: list[tuple[str, str]]) -> list[str]:$/;"	f	typeref:typename:list[str]
freeze_request	tests/vcr/vcr_filter.py	/^def freeze_request(request: Request) -> Request:$/;"	f	typeref:typename:Request
freeze_request_body	tests/vcr/vcr_filter.py	/^def freeze_request_body(json_body: str | bytes) -> bytes:$/;"	f	typeref:typename:bytes
from_ai_action	autogpt/memory/vector/memory_item.py	/^    def from_ai_action(ai_message: Message, result_message: Message):$/;"	m	class:MemoryItem
from_code_file	autogpt/memory/vector/memory_item.py	/^    def from_code_file(content: str, path: str):$/;"	m	class:MemoryItem
from_text	autogpt/memory/vector/memory_item.py	/^    def from_text($/;"	m	class:MemoryItem
from_text_file	autogpt/memory/vector/memory_item.py	/^    def from_text_file(content: str, path: str, config: Config):$/;"	m	class:MemoryItem
from_webpage	autogpt/memory/vector/memory_item.py	/^    def from_webpage($/;"	m	class:MemoryItem
from_workspace	autogpt/core/agent/base.py	/^    def from_workspace($/;"	m	class:Agent	typeref:typename:"Agent"
from_workspace	autogpt/core/agent/simple.py	/^    def from_workspace($/;"	m	class:SimpleAgent	typeref:typename:"SimpleAgent"
function_based	tests/mocks/mock_commands.py	/^def function_based(arg1: int, arg2: str) -> str:$/;"	f	typeref:typename:str
functions	autogpt/core/planning/schema.py	/^    functions: list[LanguageModelFunction] = Field(default_factory=list)$/;"	v	class:LanguageModelPrompt	typeref:typename:list[LanguageModelFunction]
generate_aiconfig_automatic	autogpt/app/setup.py	/^def generate_aiconfig_automatic(user_prompt: str, config: Config) -> AIConfig:$/;"	f	typeref:typename:AIConfig
generate_aiconfig_manual	autogpt/app/setup.py	/^def generate_aiconfig_manual($/;"	f	typeref:typename:AIConfig
generate_and_validate	tests/integration/test_image_gen.py	/^def generate_and_validate($/;"	f
generate_commands	autogpt/prompts/generator.py	/^def generate_commands(self, config: Config) -> str:$/;"	f	typeref:typename:str
generate_content	tests/challenges/memory/test_memory_challenge_a.py	/^def generate_content($/;"	f	typeref:typename:str
generate_content	tests/challenges/memory/test_memory_challenge_b.py	/^def generate_content(index: int, task_ids: list, base_filename: str, level: int) -> str:$/;"	f	typeref:typename:str
generate_content	tests/challenges/memory/test_memory_challenge_c.py	/^def generate_content($/;"	f	typeref:typename:str
generate_content	tests/challenges/memory/test_memory_challenge_d.py	/^def generate_content($/;"	f	typeref:typename:str
generate_image	autogpt/commands/image_gen.py	/^def generate_image(prompt: str, agent: Agent, size: int = 256) -> str:$/;"	f	typeref:typename:str
generate_image_with_dalle	autogpt/commands/image_gen.py	/^def generate_image_with_dalle($/;"	f	typeref:typename:str
generate_image_with_hf	autogpt/commands/image_gen.py	/^def generate_image_with_hf(prompt: str, filename: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
generate_image_with_sd_webui	autogpt/commands/image_gen.py	/^def generate_image_with_sd_webui($/;"	f	typeref:typename:str
generate_noise	tests/challenges/utils.py	/^def generate_noise(noise_size: int) -> str:$/;"	f	typeref:typename:str
generate_prompt_string	autogpt/prompts/generator.py	/^    def generate_prompt_string(self, config: Config) -> str:$/;"	m	class:PromptGenerator	typeref:typename:str
get	autogpt/memory/vector/providers/base.py	/^    def get(self, query: str, config: Config) -> MemoryItemRelevance | None:$/;"	m	class:VectorMemoryProvider	typeref:typename:MemoryItemRelevance|None
get	autogpt/plugins/plugins_config.py	/^    def get(self, name: str) -> Union[PluginConfig, None]:$/;"	m	class:PluginsConfig	typeref:typename:Union[PluginConfig,None]
get_ability	autogpt/core/ability/base.py	/^    def get_ability(self, ability_name: str) -> Ability:$/;"	m	class:AbilityRegistry	typeref:typename:Ability
get_ability	autogpt/core/ability/simple.py	/^    def get_ability(self, ability_name: str) -> Ability:$/;"	m	class:SimpleAbilityRegistry	typeref:typename:Ability
get_agent_short_name	autogpt/logs/log_cycle.py	/^    def get_agent_short_name(self, ai_name: str) -> str:$/;"	m	class:LogCycleHandler	typeref:typename:str
get_azure_credentials	autogpt/config/config.py	/^    def get_azure_credentials(self, model: str) -> dict[str, str]:$/;"	m	class:Config	typeref:typename:dict[str,str]
get_base_vcr_config	tests/vcr/__init__.py	/^def get_base_vcr_config(request):$/;"	f
get_bulletin_from_web	autogpt/utils.py	/^def get_bulletin_from_web():$/;"	f
get_challenge_identifiers	tests/challenges/challenge_decorator/challenge_utils.py	/^def get_challenge_identifiers(func: Callable[..., Any]) -> Tuple[str, str]:$/;"	f	typeref:typename:Tuple[str,str]
get_client_logger	autogpt/core/runner/client_lib/logging.py	/^def get_client_logger():$/;"	f
get_command	autogpt/models/command_registry.py	/^    def get_command(self, name: str) -> Command | None:$/;"	m	class:CommandRegistry	typeref:typename:Command|None
get_command_registry	agbenchmark/benchmarks.py	/^def get_command_registry(config: Config):$/;"	f
get_current_git_branch	autogpt/utils.py	/^def get_current_git_branch() -> str:$/;"	f	typeref:typename:str
get_datetime	autogpt/commands/times.py	/^def get_datetime() -> str:$/;"	f	typeref:typename:str
get_embedding	autogpt/memory/vector/utils.py	/^def get_embedding($/;"	f	typeref:typename:Embedding|list[Embedding]
get_embedding	autogpt/memory/vector/utils.py	/^def get_embedding(input: list[str] | list[TText], config: Config) -> list[Embedding]:$/;"	f	typeref:typename:list[Embedding]
get_embedding	autogpt/memory/vector/utils.py	/^def get_embedding(input: str | TText, config: Config) -> Embedding:$/;"	f	typeref:typename:Embedding
get_latest_bulletin	autogpt/utils.py	/^def get_latest_bulletin() -> tuple[str, bool]:$/;"	f	typeref:typename:tuple[str,bool]
get_legal_warning	autogpt/utils.py	/^def get_legal_warning() -> str:$/;"	f	typeref:typename:str
get_level_to_run	tests/challenges/challenge_decorator/challenge_utils.py	/^def get_level_to_run($/;"	f	typeref:typename:Optional[int]
get_max_level	tests/challenges/challenge_decorator/challenge_utils.py	/^def get_max_level($/;"	f	typeref:typename:int
get_max_level_beaten	tests/challenges/challenge_decorator/challenge_utils.py	/^def get_max_level_beaten($/;"	f	typeref:typename:Optional[int]
get_memory	autogpt/memory/vector/__init__.py	/^def get_memory(config: Config) -> VectorMemory:$/;"	f	typeref:typename:VectorMemory
get_models	autogpt/llm/api_manager.py	/^    def get_models(self, **openai_credentials) -> List[Model]:$/;"	m	class:ApiManager	typeref:typename:List[Model]
get_new_max_level_beaten	tests/challenges/challenge_decorator/challenge_decorator.py	/^def get_new_max_level_beaten($/;"	f	typeref:typename:Optional[int]
get_openai_command_specs	autogpt/llm/providers/openai.py	/^def get_openai_command_specs($/;"	f	typeref:typename:list[OpenAIFunctionSpec]
get_openai_credentials	autogpt/config/config.py	/^    def get_openai_credentials(self, model: str) -> dict[str, str]:$/;"	m	class:Config	typeref:typename:dict[str,str]
get_os_info	autogpt/core/planning/simple.py	/^def get_os_info() -> str:$/;"	f	typeref:typename:str
get_path	autogpt/core/workspace/base.py	/^    def get_path(self, relative_path: str | Path) -> Path:$/;"	m	class:Workspace	typeref:typename:Path
get_path	autogpt/core/workspace/simple.py	/^    def get_path(self, relative_path: str | Path) -> Path:$/;"	m	class:SimpleWorkspace	typeref:typename:Path
get_path	autogpt/workspace/workspace.py	/^    def get_path(self, relative_path: str | Path) -> Path:$/;"	m	class:Workspace	typeref:typename:Path
get_plugin	autogpt/core/plugin/base.py	/^    def get_plugin(plugin_location: PluginLocation) -> "PluginType":$/;"	m	class:PluginService	typeref:typename:"PluginType"
get_plugin	autogpt/core/plugin/simple.py	/^    def get_plugin(plugin_location: dict | PluginLocation) -> "PluginType":$/;"	m	class:SimplePluginService	typeref:typename:"PluginType"
get_python_files	tests/challenges/test_challenge_should_be_formatted_properly.py	/^def get_python_files(directory: str, exclude_file: str) -> List[str]:$/;"	f	typeref:typename:List[str]
get_relevant	autogpt/memory/vector/providers/base.py	/^    def get_relevant($/;"	m	class:VectorMemoryProvider	typeref:typename:Sequence[MemoryItemRelevance]
get_remaining_budget	autogpt/core/resource/model_providers/openai.py	/^    def get_remaining_budget(self) -> float:$/;"	m	class:OpenAIProvider	typeref:typename:float
get_remaining_budget	autogpt/core/resource/model_providers/schema.py	/^    def get_remaining_budget(self) -> float:$/;"	m	class:ModelProvider	typeref:typename:float
get_score_locations	tests/challenges/challenge_decorator/score_utils.py	/^def get_score_locations() -> Tuple[str, str]:$/;"	f	typeref:typename:Tuple[str,str]
get_scores	tests/challenges/challenge_decorator/score_utils.py	/^def get_scores() -> Tuple[Dict[str, Any], Dict[str, Any], str]:$/;"	f	typeref:typename:Tuple[Dict[str,Any],Dict[str,Any],str]
get_stats	autogpt/memory/vector/providers/base.py	/^    def get_stats(self) -> tuple[int, int]:$/;"	m	class:VectorMemoryProvider	typeref:typename:tuple[int,int]
get_supported_memory_backends	autogpt/memory/vector/__init__.py	/^def get_supported_memory_backends():$/;"	f
get_test_functions	tests/challenges/test_challenge_should_be_formatted_properly.py	/^def get_test_functions(module: ModuleType) -> List:$/;"	f	typeref:typename:List
get_token_limit	autogpt/core/resource/model_providers/openai.py	/^    def get_token_limit(self, model_name: str) -> int:$/;"	m	class:OpenAIProvider	typeref:typename:int
get_token_limit	autogpt/core/resource/model_providers/schema.py	/^    def get_token_limit(self, model_name: str) -> int:$/;"	m	class:ModelProvider	typeref:typename:int
get_total_budget	autogpt/llm/api_manager.py	/^    def get_total_budget(self):$/;"	m	class:ApiManager
get_total_completion_tokens	autogpt/llm/api_manager.py	/^    def get_total_completion_tokens(self):$/;"	m	class:ApiManager
get_total_cost	autogpt/llm/api_manager.py	/^    def get_total_cost(self):$/;"	m	class:ApiManager
get_total_prompt_tokens	autogpt/llm/api_manager.py	/^    def get_total_prompt_tokens(self):$/;"	m	class:ApiManager
get_user_config	autogpt/core/configuration/schema.py	/^    def get_user_config(cls) -> dict[str, Any]:$/;"	m	class:Configurable	typeref:typename:dict[str,Any]
get_user_config	autogpt/core/configuration/schema.py	/^    def get_user_config(self) -> dict[str, Any]:$/;"	m	class:SystemConfiguration	typeref:typename:dict[str,Any]
get_user_feedback	autogpt/app/main.py	/^def get_user_feedback($/;"	f	typeref:typename:tuple[UserFeedback,str,int|None]
get_user_id	autogpt/core/runner/cli_web_app/server/services/users.py	/^    def get_user_id(self, request: Request) -> uuid.UUID:$/;"	m	class:UserService	typeref:typename:uuid.UUID
get_workspace_file_path	tests/utils.py	/^def get_workspace_file_path(workspace, file_name):$/;"	f
get_workspace_path	tests/challenges/utils.py	/^def get_workspace_path(workspace: Workspace, file_name: str) -> str:$/;"	f	typeref:typename:str
ghcr.io/devcontainers/features/common-utils:2	.devcontainer/devcontainer.json	/^    "ghcr.io\/devcontainers\/features\/common-utils:2": {$/;"	o	object:features
ghcr.io/devcontainers/features/desktop-lite:1	.devcontainer/devcontainer.json	/^    "ghcr.io\/devcontainers\/features\/desktop-lite:1": {},$/;"	o	object:features
ghcr.io/devcontainers/features/git:1	.devcontainer/devcontainer.json	/^    "ghcr.io\/devcontainers\/features\/git:1": {$/;"	o	object:features
ghcr.io/devcontainers/features/github-cli:1	.devcontainer/devcontainer.json	/^    "ghcr.io\/devcontainers\/features\/github-cli:1": {},$/;"	o	object:features
ghcr.io/devcontainers/features/node:1	.devcontainer/devcontainer.json	/^    "ghcr.io\/devcontainers\/features\/node:1": "none",$/;"	s	object:features
ghcr.io/devcontainers/features/python:1	.devcontainer/devcontainer.json	/^    "ghcr.io\/devcontainers\/features\/python:1": "none",$/;"	s	object:features
github_api_key	autogpt/config/config.py	/^    github_api_key: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
github_username	autogpt/config/config.py	/^    github_username: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
goals	autogpt/core/runner/cli_web_app/server/schema.py	/^    goals: list[str] = []$/;"	v	class:AgentInfo	typeref:typename:list[str]
google	autogpt/commands/web_search.py	/^def google(query: str, agent: Agent, num_results: int = 8) -> str | list[str]:$/;"	f	typeref:typename:str|list[str]
google_api_key	autogpt/config/config.py	/^    google_api_key: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
google_custom_search_engine_id	autogpt/config/config.py	/^    google_custom_search_engine_id: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
graceful_agent_interrupt	autogpt/app/main.py	/^    def graceful_agent_interrupt(signum: int, frame: Optional[FrameType]) -> None:$/;"	f	function:run_interaction_loop	typeref:typename:None	file:
graceful_shutdown_threshold	autogpt/core/resource/model_providers/openai.py	/^    graceful_shutdown_threshold: float = UserConfigurable()$/;"	v	class:OpenAIModelProviderBudget	typeref:typename:float
handle_chat_completion	autogpt/models/base_open_ai_plugin.py	/^    def handle_chat_completion($/;"	m	class:BaseOpenAIPlugin	typeref:typename:str
handle_chat_completion	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def handle_chat_completion($/;"	m	class:AutoGPTGuanaco	typeref:typename:str
handle_exceptions	autogpt/core/runner/client_lib/utils.py	/^def handle_exceptions($/;"	f	typeref:typename:Callable[P,T]
handle_text_embedding	autogpt/models/base_open_ai_plugin.py	/^    def handle_text_embedding(self, text: str) -> list[float]:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:list[float]
handle_text_embedding	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def handle_text_embedding(self, text: str) -> list:$/;"	m	class:AutoGPTGuanaco	typeref:typename:list
height	autogpt/js/overlay.js	/^    height: '100%',$/;"	p	variable:anonymousObject550889d10105
huggingface_api_token	autogpt/config/config.py	/^    huggingface_api_token: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
huggingface_audio_to_text_model	autogpt/config/config.py	/^    huggingface_audio_to_text_model: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
huggingface_image_model	autogpt/config/config.py	/^    huggingface_image_model: str = "CompVis\/stable-diffusion-v1-4"$/;"	v	class:Config	typeref:typename:str
id	autogpt/core/runner/cli_web_app/server/schema.py	/^    id: UUID = None$/;"	v	class:AgentInfo	typeref:typename:UUID
ignore_missing_imports	mypy.ini	/^ignore_missing_imports = True$/;"	k	section:mypy-requests.*
ignore_missing_imports	mypy.ini	/^ignore_missing_imports = True$/;"	k	section:mypy-yaml.*
image_provider	autogpt/config/config.py	/^    image_provider: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
image_size	autogpt/config/config.py	/^    image_size: int = 256$/;"	v	class:Config	typeref:typename:int
image_size	tests/integration/test_image_gen.py	/^def image_size(request):$/;"	f
import_commands	autogpt/models/command_registry.py	/^    def import_commands(self, module_name: str) -> None:$/;"	m	class:CommandRegistry	typeref:typename:None
inaccessible_path	tests/unit/test_workspace.py	/^def inaccessible_path(request):$/;"	f
info	autogpt/logs/logger.py	/^    def info($/;"	m	class:Logger	typeref:typename:None
information_retrieval	tests/challenges/current_score.json	/^    "information_retrieval": {$/;"	o
information_retrieval_challenge_a	tests/challenges/current_score.json	/^        "information_retrieval_challenge_a": {$/;"	o	object:information_retrieval
information_retrieval_challenge_b	tests/challenges/current_score.json	/^        "information_retrieval_challenge_b": {$/;"	o	object:information_retrieval
information_retrieval_challenge_c	tests/challenges/current_score.json	/^        "information_retrieval_challenge_c": {$/;"	o	object:information_retrieval
ingest_directory	data_ingestion.py	/^def ingest_directory(directory: str, memory: VectorMemory, args):$/;"	f
ingest_file	autogpt/commands/file_operations.py	/^def ingest_file($/;"	f	typeref:typename:None
initialize_openai_plugins	autogpt/plugins/__init__.py	/^def initialize_openai_plugins($/;"	f	typeref:typename:dict
input_generator	tests/challenges/utils.py	/^    def input_generator() -> Generator[str, None, None]:$/;"	f	function:setup_mock_input	typeref:typename:Generator[str,None,None]	file:
insert	autogpt/llm/base.py	/^    def insert(self, index: int, *messages: Message):$/;"	m	class:ChatSequence
inspect_zip_for_modules	autogpt/plugins/__init__.py	/^def inspect_zip_for_modules(zip_path: str, debug: bool = False) -> list[str]:$/;"	f	typeref:typename:list[str]
installZsh	.devcontainer/devcontainer.json	/^      "installZsh": "true",$/;"	s	object:features.ghcr.io/devcontainers/features/common-utils:2
install_plugin_dependencies	scripts/install_plugin_deps.py	/^def install_plugin_dependencies():$/;"	f
instantiate_openai_plugin_clients	autogpt/plugins/__init__.py	/^def instantiate_openai_plugin_clients($/;"	f	typeref:typename:dict
interact	autogpt/core/runner/cli_web_app/server/api.py	/^async def interact(request: Request, agent_id: str, body: InteractRequestBody):$/;"	f
invalid_json_response	tests/unit/test_utils.py	/^def invalid_json_response() -> dict:$/;"	f	typeref:typename:dict
iopenai	autogpt/llm/utils/__init__.py	/^from ..providers import openai as iopenai$/;"	Y	nameref:unknown:openai
iopenai	autogpt/memory/vector/utils.py	/^from autogpt.llm.providers import openai as iopenai$/;"	Y	nameref:unknown:openai
is_duplicate_operation	autogpt/commands/file_operations.py	/^def is_duplicate_operation($/;"	f	typeref:typename:bool
is_enabled	autogpt/plugins/plugins_config.py	/^    def is_enabled(self, name) -> bool:$/;"	m	class:PluginsConfig	typeref:typename:bool
is_file_binary_fn	autogpt/commands/file_operations_utils.py	/^def is_file_binary_fn(file_path: str):$/;"	f
is_valid_url	autogpt/url_utils/validators.py	/^def is_valid_url(url: str) -> bool:$/;"	f	typeref:typename:bool
json_data	tests/challenges/utils/build_current_score.py	/^    json_data = json.dumps(sorted_data, indent=4)$/;"	v
json_encoders	autogpt/core/resource/schema.py	/^        json_encoders = {$/;"	v	class:ProviderCredentials.Config
json_loads	autogpt/core/planning/strategies/utils.py	/^def json_loads(json_str: str):$/;"	f
justifyContent	autogpt/js/overlay.js	/^    justifyContent: 'center',$/;"	p	variable:anonymousObject550889d10105
kubernetes	tests/challenges/current_score.json	/^    "kubernetes": {$/;"	o
kubernetes_template_challenge_a	tests/challenges/current_score.json	/^        "kubernetes_template_challenge_a": {$/;"	o	object:kubernetes
language_model_required	autogpt/core/ability/base.py	/^    language_model_required: LanguageModelConfiguration = None$/;"	v	class:AbilityConfiguration	typeref:typename:LanguageModelConfiguration
last_trimmed_index	autogpt/memory/message_history.py	/^    last_trimmed_index: int = 0$/;"	v	class:MessageHistory	typeref:typename:int
left	autogpt/js/overlay.js	/^    left: 0,$/;"	p	variable:anonymousObject550889d10105
level_to_run	tests/challenges/conftest.py	/^def level_to_run(request: FixtureRequest) -> int:$/;"	f	typeref:typename:int
list_abilities	autogpt/core/ability/base.py	/^    def list_abilities(self) -> list[str]:$/;"	m	class:AbilityRegistry	typeref:typename:list[str]
list_abilities	autogpt/core/ability/simple.py	/^    def list_abilities(self) -> list[str]:$/;"	m	class:SimpleAbilityRegistry	typeref:typename:list[str]
list_files	autogpt/commands/file_operations.py	/^def list_files(directory: str, agent: Agent) -> list[str]:$/;"	f	typeref:typename:list[str]
llm_response_schema	autogpt/json_utils/utilities.py	/^def llm_response_schema($/;"	f	typeref:typename:dict[str,Any]
load	autogpt/config/ai_config.py	/^    def load(ai_settings_file: str | Path) -> "AIConfig":$/;"	m	class:AIConfig	typeref:typename:"AIConfig"
load_agent_settings	autogpt/core/workspace/simple.py	/^    def load_agent_settings(workspace_root: Path) -> "AgentSettings":$/;"	m	class:SimpleWorkspace	typeref:typename:"AgentSettings"
load_azure_config	autogpt/config/config.py	/^    def load_azure_config(cls, config_file: Path) -> Dict[str, str]:$/;"	m	class:ConfigBuilder	typeref:typename:Dict[str,str]
load_config	autogpt/plugins/plugins_config.py	/^    def load_config($/;"	m	class:PluginsConfig	typeref:typename:"PluginsConfig"
load_from_file_path	autogpt/core/plugin/base.py	/^    def load_from_file_path(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:PluginService	typeref:typename:"PluginType"
load_from_file_path	autogpt/core/plugin/simple.py	/^    def load_from_file_path(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:SimplePluginService	typeref:typename:"PluginType"
load_from_import_path	autogpt/core/plugin/base.py	/^    def load_from_import_path(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:PluginService	typeref:typename:"PluginType"
load_from_import_path	autogpt/core/plugin/simple.py	/^    def load_from_import_path(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:SimplePluginService	typeref:typename:"PluginType"
load_from_installed_package	autogpt/core/plugin/base.py	/^    def load_from_installed_package(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:PluginService	typeref:typename:"PluginType"
load_from_installed_package	autogpt/core/plugin/simple.py	/^    def load_from_installed_package(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:SimplePluginService	typeref:typename:"PluginType"
load_from_workspace	autogpt/core/plugin/base.py	/^    def load_from_workspace(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:PluginService	typeref:typename:"PluginType"
load_from_workspace	autogpt/core/plugin/simple.py	/^    def load_from_workspace(plugin_route: PluginStorageRoute) -> "PluginType":$/;"	m	class:SimplePluginService	typeref:typename:"PluginType"
load_index	autogpt/memory/vector/providers/json_file.py	/^    def load_index(self):$/;"	m	class:JSONFileMemory
load_json	tests/challenges/challenge_decorator/score_utils.py	/^def load_json(filename: str) -> Dict[str, Any]:$/;"	f	typeref:typename:Dict[str,Any]
load_module_from_file	tests/challenges/test_challenge_should_be_formatted_properly.py	/^def load_module_from_file(test_file: str) -> ModuleType:$/;"	f	typeref:typename:ModuleType
local_file	tests/unit/test_url_validation.py	/^local_file = ($/;"	v
log_cycle	autogpt/logs/log_cycle.py	/^    def log_cycle($/;"	m	class:LogCycleHandler	typeref:typename:None
log_json	autogpt/logs/logger.py	/^    def log_json(self, data: Any, file_name: str | Path) -> None:$/;"	m	class:Logger	typeref:typename:None
log_operation	autogpt/commands/file_operations.py	/^def log_operation($/;"	f	typeref:typename:None
logger	autogpt/logs/logger.py	/^logger = Logger()$/;"	v
lst	tests/integration/test_image_gen.py	/^def lst(txt):$/;"	f
main	autogpt/app/cli.py	/^def main($/;"	f	typeref:typename:None
main	data_ingestion.py	/^def main() -> None:$/;"	f	typeref:typename:None
main	scripts/check_requirements.py	/^def main():$/;"	f
make_initial_plan	autogpt/core/planning/simple.py	/^    async def make_initial_plan($/;"	m	class:SimplePlanner	typeref:typename:LanguageModelResponse
make_settings	autogpt/core/runner/client_lib/shared_click_commands.py	/^def make_settings(settings_file: str) -> None:$/;"	f	typeref:typename:None
make_user_configuration	autogpt/core/runner/client_lib/settings.py	/^def make_user_configuration(settings_file_path: Path):$/;"	f
make_workspace	autogpt/workspace/workspace.py	/^    def make_workspace(cls, workspace_directory: str | Path, *args, **kwargs) -> Path:$/;"	m	class:Workspace	typeref:typename:Path
markdown_to_ansi_style	autogpt/utils.py	/^def markdown_to_ansi_style(markdown: str):$/;"	f
max_level	tests/challenges/current_score.json	/^            "max_level": 1,$/;"	n	object:basic_abilities.browse_website
max_level	tests/challenges/current_score.json	/^            "max_level": 1,$/;"	n	object:information_retrieval.information_retrieval_challenge_b
max_level	tests/challenges/current_score.json	/^            "max_level": 1,$/;"	n	object:kubernetes.kubernetes_template_challenge_a
max_level	tests/challenges/current_score.json	/^            "max_level": 2,$/;"	n	object:basic_abilities.write_file
max_level	tests/challenges/current_score.json	/^            "max_level": 2,$/;"	n	object:debug_code.debug_code_challenge_a
max_level	tests/challenges/current_score.json	/^            "max_level": 3,$/;"	n	object:information_retrieval.information_retrieval_challenge_a
max_level	tests/challenges/current_score.json	/^            "max_level": 3,$/;"	n	object:information_retrieval.information_retrieval_challenge_c
max_level	tests/challenges/current_score.json	/^            "max_level": 3,$/;"	n	object:memory.memory_challenge_a
max_level	tests/challenges/current_score.json	/^            "max_level": 5,$/;"	n	object:memory.memory_challenge_b
max_level	tests/challenges/current_score.json	/^            "max_level": 5,$/;"	n	object:memory.memory_challenge_c
max_level	tests/challenges/current_score.json	/^            "max_level": 5,$/;"	n	object:memory.memory_challenge_d
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": 1$/;"	n	object:basic_abilities.write_file
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": 1$/;"	n	object:debug_code.debug_code_challenge_a
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": 3$/;"	n	object:memory.memory_challenge_a
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:basic_abilities.browse_website
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:information_retrieval.information_retrieval_challenge_a
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:information_retrieval.information_retrieval_challenge_b
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:information_retrieval.information_retrieval_challenge_c
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:kubernetes.kubernetes_template_challenge_a
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:memory.memory_challenge_b
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:memory.memory_challenge_c
max_level_beaten	tests/challenges/current_score.json	/^            "max_level_beaten": null$/;"	z	object:memory.memory_challenge_d
max_summary_tlength	autogpt/memory/message_history.py	/^    max_summary_tlength: int = 500$/;"	v	class:MessageHistory	typeref:typename:int
memories	autogpt/core/planning/schema.py	/^    memories: list = Field(default_factory=list)$/;"	v	class:TaskContext	typeref:typename:list
memory	tests/challenges/current_score.json	/^    "memory": {$/;"	o
memory_backend	autogpt/config/config.py	/^    memory_backend: str = "json_file"$/;"	v	class:Config	typeref:typename:str
memory_challenge_a	tests/challenges/current_score.json	/^        "memory_challenge_a": {$/;"	o	object:memory
memory_challenge_b	tests/challenges/current_score.json	/^        "memory_challenge_b": {$/;"	o	object:memory
memory_challenge_c	tests/challenges/current_score.json	/^        "memory_challenge_c": {$/;"	o	object:memory
memory_challenge_d	tests/challenges/current_score.json	/^        "memory_challenge_d": {$/;"	o	object:memory
memory_index	autogpt/config/config.py	/^    memory_index: str = "auto-gpt-memory"$/;"	v	class:Config	typeref:typename:str
memory_item	tests/integration/memory/conftest.py	/^def memory_item(mock_embedding: Embedding):$/;"	f
memory_json_file	tests/integration/agent_factory.py	/^def memory_json_file(config: Config):$/;"	f
memory_none	tests/integration/memory/utils.py	/^def memory_none(agent_test_config: Config, mock_get_embedding):$/;"	f
memory_provider_base	tests/integration/memory/utils.py	/^import autogpt.memory.vector.providers.base as memory_provider_base$/;"	I	nameref:module:autogpt.memory.vector.providers.base
memory_provider_required	autogpt/core/ability/base.py	/^    memory_provider_required: bool = False$/;"	v	class:AbilityConfiguration	typeref:typename:bool
merged_data	tests/challenges/utils/build_current_score.py	/^    merged_data = deep_merge($/;"	v
merged_data	tests/challenges/utils/build_current_score.py	/^merged_data: Dict[str, Any] = {}$/;"	v	typeref:typename:Dict[str, Any]
messages	autogpt/llm/base.py	/^    messages: list[Message] = field(default_factory=list[Message])$/;"	v	class:ChatSequence	typeref:typename:list[Message]
meter_api	autogpt/llm/providers/openai.py	/^def meter_api(func: Callable):$/;"	f
metered_func	autogpt/llm/providers/openai.py	/^    def metered_func(*args, **kwargs):$/;"	f	function:meter_api	file:
metering_wrapper	autogpt/llm/providers/openai.py	/^    def metering_wrapper(*args, **kwargs):$/;"	f	function:meter_api	file:
mock_MemoryItem_from_text	tests/unit/test_file_operations.py	/^def mock_MemoryItem_from_text($/;"	f
mock_clone_from	tests/unit/test_git_commands.py	/^def mock_clone_from(mocker):$/;"	f
mock_costs	tests/unit/test_api_manager.py	/^def mock_costs(mocker: MockerFixture):$/;"	f
mock_csv_file	tests/unit/test_text_file_parsers.py	/^def mock_csv_file():$/;"	f
mock_docx_file	tests/unit/test_text_file_parsers.py	/^def mock_docx_file():$/;"	f
mock_embedding	tests/integration/memory/utils.py	/^def mock_embedding(embedding_dimension: int) -> Embedding:$/;"	f	typeref:typename:Embedding
mock_get_agent_short_name	tests/challenges/utils.py	/^    def mock_get_agent_short_name(*args: Any, **kwargs: Any) -> str:$/;"	f	function:setup_mock_log_cycle_agent_name	typeref:typename:str	file:
mock_get_embedding	tests/integration/memory/utils.py	/^def mock_get_embedding(mocker: MockerFixture, embedding_dimension: int):$/;"	f
mock_googleapiclient	tests/unit/test_web_search.py	/^def mock_googleapiclient(mocker):$/;"	f
mock_html_file	tests/unit/test_text_file_parsers.py	/^def mock_html_file():$/;"	f
mock_json_file	tests/unit/test_text_file_parsers.py	/^def mock_json_file():$/;"	f
mock_latex_file	tests/unit/test_text_file_parsers.py	/^def mock_latex_file():$/;"	f
mock_md_file	tests/unit/test_text_file_parsers.py	/^def mock_md_file():$/;"	f
mock_pdf_file	tests/unit/test_text_file_parsers.py	/^def mock_pdf_file():$/;"	f
mock_text_file	tests/unit/test_text_file_parsers.py	/^def mock_text_file():$/;"	f
mock_xml_file	tests/unit/test_text_file_parsers.py	/^def mock_xml_file():$/;"	f
mock_yaml_file	tests/unit/test_text_file_parsers.py	/^def mock_yaml_file():$/;"	f
model_classification	autogpt/core/planning/base.py	/^    def model_classification(self) -> LanguageModelClassification:$/;"	m	class:PromptStrategy	typeref:typename:LanguageModelClassification
model_classification	autogpt/core/planning/strategies/initial_plan.py	/^    def model_classification(self) -> LanguageModelClassification:$/;"	m	class:InitialPlan	typeref:typename:LanguageModelClassification
model_classification	autogpt/core/planning/strategies/initial_plan.py	/^    model_classification: LanguageModelClassification = UserConfigurable()$/;"	v	class:InitialPlanConfiguration	typeref:typename:LanguageModelClassification
model_classification	autogpt/core/planning/strategies/name_and_goals.py	/^    def model_classification(self) -> LanguageModelClassification:$/;"	m	class:NameAndGoals	typeref:typename:LanguageModelClassification
model_classification	autogpt/core/planning/strategies/name_and_goals.py	/^    model_classification: LanguageModelClassification = UserConfigurable()$/;"	v	class:NameAndGoalsConfiguration	typeref:typename:LanguageModelClassification
model_classification	autogpt/core/planning/strategies/next_ability.py	/^    def model_classification(self) -> LanguageModelClassification:$/;"	m	class:NextAbility	typeref:typename:LanguageModelClassification
model_classification	autogpt/core/planning/strategies/next_ability.py	/^    model_classification: LanguageModelClassification = UserConfigurable()$/;"	v	class:NextAbilityConfiguration	typeref:typename:LanguageModelClassification
model_name	autogpt/core/planning/simple.py	/^    model_name: str = UserConfigurable()$/;"	v	class:LanguageModelConfiguration	typeref:typename:str
model_service	autogpt/core/resource/model_providers/schema.py	/^    model_service = ModelProviderService.EMBEDDING$/;"	v	class:EmbeddingModelProviderModelInfo
model_service	autogpt/core/resource/model_providers/schema.py	/^    model_service = ModelProviderService.LANGUAGE$/;"	v	class:LanguageModelProviderModelInfo
most_relevant_chunk	autogpt/memory/vector/memory_item.py	/^    def most_relevant_chunk(self) -> tuple[str, float]:$/;"	m	class:MemoryItemRelevance	typeref:typename:tuple[str,float]
must_chunk_content	autogpt/processing/text.py	/^def must_chunk_content($/;"	f	typeref:typename:bool
mypy	mypy.ini	/^[mypy]$/;"	s
mypy-requests.*	mypy.ini	/^[mypy-requests.*]$/;"	s
mypy-yaml.*	mypy.ini	/^[mypy-yaml.*]$/;"	s
name	autogpt/config/config.py	/^    name: str = "Auto-GPT configuration"$/;"	v	class:Config	typeref:typename:str
name	autogpt/core/ability/base.py	/^    def name(cls) -> str:$/;"	m	class:Ability	typeref:typename:str
name	autogpt/core/runner/cli_web_app/server/schema.py	/^    name: str = ""$/;"	v	class:AgentInfo	typeref:typename:str
name	autogpt/json_utils/llm_response_format_1.json	/^                "name": {"type": "string"},$/;"	o	object:properties.command.properties
new_knowledge	autogpt/core/ability/schema.py	/^    new_knowledge: Knowledge = None$/;"	v	class:AbilityResult	typeref:typename:Knowledge
new_score_filename_pattern	tests/challenges/utils/build_current_score.py	/^new_score_filename_pattern = os.path.join(cwd, "tests\/challenges\/new_score_*.json")$/;"	v
np	autogpt/memory/vector/memory_item.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autogpt/memory/vector/providers/base.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autogpt/memory/vector/utils.py	/^import numpy as np$/;"	I	nameref:module:numpy
nums	tests/challenges/debug_code/data/test.py	/^    nums = [-6, 7, 11, 4]$/;"	v
nums	tests/challenges/debug_code/data/test.py	/^    nums = [2, 7, 0, 15, 12, 0]$/;"	v
nums	tests/challenges/debug_code/data/test.py	/^    nums = [2, 7, 11, 15]$/;"	v
objective	autogpt/core/runner/cli_web_app/server/schema.py	/^    objective: str = ""$/;"	v	class:AgentInfo	typeref:typename:str
of	autogpt/memory/vector/memory_item.py	/^    def of($/;"	m	class:MemoryItemRelevance	typeref:typename:MemoryItemRelevance
on_before_think	autogpt/agents/agent.py	/^    def on_before_think(self, *args, **kwargs) -> ChatSequence:$/;"	m	class:Agent	typeref:typename:ChatSequence
on_before_think	autogpt/agents/base.py	/^    def on_before_think(self, prompt: ChatSequence, instruction: str) -> ChatSequence:$/;"	m	class:BaseAgent	typeref:typename:ChatSequence
on_instruction	autogpt/models/base_open_ai_plugin.py	/^    def on_instruction(self, messages: List[Message]) -> Optional[str]:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:Optional[str]
on_instruction	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def on_instruction(self, messages: List[str]) -> Optional[str]:$/;"	m	class:AutoGPTGuanaco	typeref:typename:Optional[str]
on_planning	autogpt/models/base_open_ai_plugin.py	/^    def on_planning($/;"	m	class:BaseOpenAIPlugin	typeref:typename:Optional[str]
on_planning	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def on_planning($/;"	m	class:AutoGPTGuanaco	typeref:typename:Optional[str]
on_response	autogpt/agents/base.py	/^    def on_response($/;"	m	class:BaseAgent	typeref:typename:tuple[CommandName|None,CommandArgs|None,AgentThoughts]
on_response	autogpt/models/base_open_ai_plugin.py	/^    def on_response(self, response: str, *args, **kwargs) -> str:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:str
on_response	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def on_response(self, response: str, *args, **kwargs) -> str:$/;"	m	class:AutoGPTGuanaco	typeref:typename:str
only_objective_or_name_role_goals	autogpt/core/runner/cli_web_app/server/schema.py	/^    def only_objective_or_name_role_goals(cls, agent_goals):$/;"	m	class:AgentConfiguration
openai_api_base	autogpt/config/config.py	/^    openai_api_base: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
openai_api_key	autogpt/config/config.py	/^    openai_api_key: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
openai_api_type	autogpt/config/config.py	/^    openai_api_type: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
openai_api_version	autogpt/config/config.py	/^    openai_api_version: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
openai_functions	autogpt/config/config.py	/^    openai_functions: bool = False$/;"	v	class:Config	typeref:typename:bool
openai_organization	autogpt/config/config.py	/^    openai_organization: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
operations_from_log	autogpt/commands/file_operations.py	/^def operations_from_log($/;"	f	typeref:typename:Generator[tuple[Operation,str,str|None],None,None]
overlay	autogpt/js/overlay.js	/^const overlay = document.createElement('div');$/;"	C
packages_required	autogpt/core/ability/base.py	/^    packages_required: list[str] = Field(default_factory=list)$/;"	v	class:AbilityConfiguration	typeref:typename:list[str]
param_signature	autogpt/llm/providers/openai.py	/^        def param_signature(p_spec: OpenAIFunctionSpec.ParameterSpec) -> str:$/;"	f	member:OpenAIFunctionSpec.prompt_format	typeref:typename:str	file:
parent	autogpt/core/planning/schema.py	/^    parent: "Task" = None$/;"	v	class:TaskContext	typeref:typename:"Task"
parent	autogpt/core/workspace/simple.py	/^    parent: str = UserConfigurable()$/;"	v	class:WorkspaceConfiguration	typeref:typename:str
parse_ability_result	autogpt/core/runner/client_lib/parser.py	/^def parse_ability_result(ability_result) -> str:$/;"	f	typeref:typename:str
parse_agent_name_and_goals	autogpt/core/runner/client_lib/parser.py	/^def parse_agent_name_and_goals(name_and_goals: dict) -> str:$/;"	f	typeref:typename:str
parse_agent_plan	autogpt/core/runner/client_lib/parser.py	/^def parse_agent_plan(plan: dict) -> str:$/;"	f	typeref:typename:str
parse_and_process_response	autogpt/agents/agent.py	/^    def parse_and_process_response($/;"	m	class:Agent	typeref:typename:tuple[CommandName|None,CommandArgs|None,AgentThoughts]
parse_and_process_response	autogpt/agents/base.py	/^    def parse_and_process_response($/;"	m	class:BaseAgent	typeref:typename:tuple[CommandName|None,CommandArgs|None,AgentThoughts]
parse_next_ability	autogpt/core/runner/client_lib/parser.py	/^def parse_next_ability(current_task, next_ability: dict) -> str:$/;"	f	typeref:typename:str
parse_response_content	autogpt/core/planning/base.py	/^    def parse_response_content(self, response_content: dict) -> dict:$/;"	m	class:PromptStrategy	typeref:typename:dict
parse_response_content	autogpt/core/planning/strategies/initial_plan.py	/^    def parse_response_content($/;"	m	class:InitialPlan	typeref:typename:dict
parse_response_content	autogpt/core/planning/strategies/name_and_goals.py	/^    def parse_response_content($/;"	m	class:NameAndGoals	typeref:typename:dict
parse_response_content	autogpt/core/planning/strategies/next_ability.py	/^    def parse_response_content($/;"	m	class:NextAbility	typeref:typename:dict
patch_api_base	tests/vcr/__init__.py	/^def patch_api_base(requestor: openai.api_requestor.APIRequestor):$/;"	f
patched_api_requestor	tests/vcr/__init__.py	/^def patched_api_requestor(mocker: MockerFixture):$/;"	f
patched_init_requestor	tests/vcr/__init__.py	/^    def patched_init_requestor(requestor, *args, **kwargs):$/;"	f	function:patched_api_requestor	file:
patched_make_workspace	tests/challenges/conftest.py	/^    def patched_make_workspace(*args: Any, **kwargs: Any) -> str:$/;"	f	function:patched_make_workspace	typeref:typename:str	file:
patched_make_workspace	tests/challenges/conftest.py	/^def patched_make_workspace(mocker: MockerFixture, workspace: Workspace) -> Generator:$/;"	f	typeref:typename:Generator
patched_prepare_request	tests/vcr/__init__.py	/^    def patched_prepare_request(self, *args, **kwargs):$/;"	f	function:patched_api_requestor	file:
per_cycle	autogpt/memory/message_history.py	/^    def per_cycle($/;"	m	class:MessageHistory	typeref:typename:Iterator[tuple[Message|None,Message,Message]]
perform	autogpt/core/ability/base.py	/^    def perform(self, ability_name: str, **kwargs) -> AbilityResult:$/;"	m	class:AbilityRegistry	typeref:typename:AbilityResult
perform	autogpt/core/ability/simple.py	/^    async def perform(self, ability_name: str, **kwargs) -> AbilityResult:$/;"	m	class:SimpleAbilityRegistry	typeref:typename:AbilityResult
plain_output	autogpt/config/config.py	/^    plain_output: bool = False$/;"	v	class:Config	typeref:typename:bool
plain_text_str	tests/unit/test_text_file_parsers.py	/^plain_text_str = "Hello, world!"$/;"	v
plan	autogpt/json_utils/llm_response_format_1.json	/^                "plan": {$/;"	o	object:properties.thoughts.properties
plugins	autogpt/config/config.py	/^    plugins: list[AutoGPTPluginTemplate] = Field(default_factory=list, exclude=True)$/;"	v	class:Config	typeref:typename:list[AutoGPTPluginTemplate]
plugins_allowlist	autogpt/config/config.py	/^    plugins_allowlist: list[str] = Field(default_factory=list)$/;"	v	class:Config	typeref:typename:list[str]
plugins_config	autogpt/config/config.py	/^    plugins_config: PluginsConfig = Field($/;"	v	class:Config	typeref:typename:PluginsConfig
plugins_config_file	autogpt/config/config.py	/^    plugins_config_file: str = PLUGINS_CONFIG_FILE$/;"	v	class:Config	typeref:typename:str
plugins_denylist	autogpt/config/config.py	/^    plugins_denylist: list[str] = Field(default_factory=list)$/;"	v	class:Config	typeref:typename:list[str]
plugins_dir	autogpt/config/config.py	/^    plugins_dir: str = "plugins"$/;"	v	class:Config	typeref:typename:str
plugins_openai	autogpt/config/config.py	/^    plugins_openai: list[str] = Field(default_factory=list)$/;"	v	class:Config	typeref:typename:list[str]
position	autogpt/js/overlay.js	/^    position: 'fixed',$/;"	p	variable:anonymousObject550889d10105
post_command	autogpt/models/base_open_ai_plugin.py	/^    def post_command(self, command_name: str, response: str) -> str:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:str
post_command	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def post_command(self, command_name: str, response: str) -> str:$/;"	m	class:AutoGPTGuanaco	typeref:typename:str
post_instruction	autogpt/models/base_open_ai_plugin.py	/^    def post_instruction(self, response: str) -> str:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:str
post_instruction	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def post_instruction(self, response: str) -> str:$/;"	m	class:AutoGPTGuanaco	typeref:typename:str
post_planning	autogpt/models/base_open_ai_plugin.py	/^    def post_planning(self, response: str) -> str:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:str
post_planning	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def post_planning(self, response: str) -> str:$/;"	m	class:AutoGPTGuanaco	typeref:typename:str
post_prompt	autogpt/models/base_open_ai_plugin.py	/^    def post_prompt(self, prompt: PromptGenerator) -> PromptGenerator:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:PromptGenerator
post_prompt	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def post_prompt(self, prompt: PromptGenerator) -> PromptGenerator:$/;"	m	class:AutoGPTGuanaco	typeref:typename:PromptGenerator
ppa	.devcontainer/devcontainer.json	/^      "ppa": "false"$/;"	s	object:features.ghcr.io/devcontainers/features/git:1
pre_command	autogpt/models/base_open_ai_plugin.py	/^    def pre_command($/;"	m	class:BaseOpenAIPlugin	typeref:typename:Tuple[str,Dict[str,Any]]
pre_command	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def pre_command($/;"	m	class:AutoGPTGuanaco	typeref:typename:Tuple[str,Dict[str,Any]]
pre_instruction	autogpt/models/base_open_ai_plugin.py	/^    def pre_instruction(self, messages: List[Message]) -> List[Message]:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:List[Message]
pre_instruction	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def pre_instruction(self, messages: List[str]) -> List[str]:$/;"	m	class:AutoGPTGuanaco	typeref:typename:List[str]
prefix	autogpt/core/configuration/schema.py	/^    prefix: str = ""$/;"	v	class:Configurable	typeref:typename:str
print_assistant_thoughts	autogpt/app/main.py	/^def print_assistant_thoughts($/;"	f	typeref:typename:None
print_message	autogpt/spinner.py	/^    def print_message(self):$/;"	m	class:Spinner
prior_actions	autogpt/core/planning/schema.py	/^    prior_actions: list[AbilityResult] = Field(default_factory=list)$/;"	v	class:TaskContext	typeref:typename:list[AbilityResult]
prompt_format	autogpt/llm/providers/openai.py	/^    def prompt_format(self) -> str:$/;"	m	class:OpenAIFunctionSpec	typeref:typename:str
prompt_settings_file	autogpt/config/config.py	/^    prompt_settings_file: str = "prompt_settings.yaml"$/;"	v	class:Config	typeref:typename:str
prompt_token_cost	autogpt/core/resource/model_providers/schema.py	/^    prompt_token_cost: float = 0.0$/;"	v	class:ModelProviderModelInfo	typeref:typename:float
prompt_tokens	autogpt/core/resource/model_providers/schema.py	/^    prompt_tokens: int = 0$/;"	v	class:ModelProviderUsage	typeref:typename:int
prompt_user	autogpt/app/setup.py	/^def prompt_user($/;"	f	typeref:typename:AIConfig
properties	autogpt/json_utils/llm_response_format_1.json	/^            "properties": {$/;"	o	object:properties.command
properties	autogpt/json_utils/llm_response_format_1.json	/^            "properties": {$/;"	o	object:properties.thoughts
properties	autogpt/json_utils/llm_response_format_1.json	/^    "properties": {$/;"	o
provider_name	autogpt/core/planning/simple.py	/^    provider_name: ModelProviderName = UserConfigurable()$/;"	v	class:LanguageModelConfiguration	typeref:typename:ModelProviderName
provision_agent	autogpt/core/agent/simple.py	/^    def provision_agent($/;"	m	class:SimpleAgent
pytest_addoption	tests/challenges/conftest.py	/^def pytest_addoption(parser: Parser) -> None:$/;"	f	typeref:typename:None
pytest_configure	tests/challenges/conftest.py	/^def pytest_configure(config: Config) -> None:$/;"	f	typeref:typename:None
pytest_plugins	tests/conftest.py	/^pytest_plugins = [$/;"	v
python_test_file	tests/integration/test_execute_code.py	/^def python_test_file(config: Config, random_code: str) -> str:$/;"	f	typeref:typename:str
random_code	tests/integration/test_execute_code.py	/^def random_code(random_string) -> str:$/;"	f	typeref:typename:str
random_string	tests/integration/test_execute_code.py	/^def random_string():$/;"	f
raw	autogpt/llm/base.py	/^    def raw(self) -> MessageDict:$/;"	m	class:Message	typeref:typename:MessageDict
raw	autogpt/llm/base.py	/^    def raw(self) -> list[MessageDict]:$/;"	m	class:ChatSequence	typeref:typename:list[MessageDict]
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:DOCXParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:HTMLParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:JSONParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:LaTeXParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:MarkdownParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:PDFParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:ParserStrategy	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:TXTParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:XMLParser	typeref:typename:str
read	autogpt/commands/file_operations_utils.py	/^    def read(self, file_path: str) -> str:$/;"	m	class:YAMLParser	typeref:typename:str
read_file	autogpt/commands/file_operations.py	/^def read_file(filename: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
read_file	autogpt/commands/file_operations_utils.py	/^    def read_file(self, file_path) -> str:$/;"	m	class:FileContext	typeref:typename:str
read_textual_file	autogpt/commands/file_operations_utils.py	/^def read_textual_file(file_path: str, logger: logs.Logger) -> str:$/;"	f	typeref:typename:str
readable_file_size	autogpt/utils.py	/^def readable_file_size(size, decimal_places=2):$/;"	f
reasoning	autogpt/json_utils/llm_response_format_1.json	/^                "reasoning": {$/;"	o	object:properties.thoughts.properties
recursive_sort_dict	tests/challenges/utils/build_current_score.py	/^def recursive_sort_dict(data: dict) -> dict:$/;"	f	typeref:typename:dict
redis_host	autogpt/config/config.py	/^    redis_host: str = "localhost"$/;"	v	class:Config	typeref:typename:str
redis_password	autogpt/config/config.py	/^    redis_password: str = ""$/;"	v	class:Config	typeref:typename:str
redis_port	autogpt/config/config.py	/^    redis_port: int = 6379$/;"	v	class:Config	typeref:typename:int
register	autogpt/models/command_registry.py	/^    def register(self, cmd: Command) -> None:$/;"	m	class:CommandRegistry	typeref:typename:None
register_ability	autogpt/core/ability/base.py	/^    def register_ability($/;"	m	class:AbilityRegistry	typeref:typename:None
register_ability	autogpt/core/ability/simple.py	/^    def register_ability($/;"	m	class:SimpleAbilityRegistry	typeref:typename:None
relevance_for	autogpt/memory/vector/memory_item.py	/^    def relevance_for(self, query: str, e_query: Embedding | None = None):$/;"	m	class:MemoryItem
reload_commands	autogpt/models/command_registry.py	/^    def reload_commands(self) -> None:$/;"	m	class:CommandRegistry	typeref:typename:None
remove_ansi_escape	autogpt/app/main.py	/^def remove_ansi_escape(s: str) -> str:$/;"	f	typeref:typename:str
remove_color_codes	autogpt/logs/formatters.py	/^def remove_color_codes(s: str) -> str:$/;"	f	typeref:typename:str
replace_message_content	tests/vcr/vcr_filter.py	/^def replace_message_content(content: str, replacements: List[Dict[str, str]]) -> str:$/;"	f	typeref:typename:str
replace_request_hostname	tests/vcr/vcr_filter.py	/^def replace_request_hostname($/;"	f	typeref:typename:Request
report	autogpt/models/base_open_ai_plugin.py	/^    def report(self, message: str) -> None:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:None
report	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def report(self, message: str) -> None:$/;"	m	class:AutoGPTGuanaco	typeref:typename:None
required	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["name", "args"],$/;"	a	object:properties.command
required	autogpt/json_utils/llm_response_format_1.json	/^            "required": ["text", "reasoning", "plan", "criticism", "speak"],$/;"	a	object:properties.thoughts
required	autogpt/json_utils/llm_response_format_1.json	/^    "required": ["thoughts", "command"],$/;"	a
required	autogpt/llm/providers/openai.py	/^        required: bool = False$/;"	v	class:OpenAIFunctionSpec.ParameterSpec	typeref:typename:bool
required_arguments	autogpt/core/ability/base.py	/^    def required_arguments(cls) -> list[str]:$/;"	m	class:Ability	typeref:typename:list[str]
required_arguments	autogpt/core/ability/builtins/create_new_ability.py	/^    def required_arguments(cls) -> list[str]:$/;"	m	class:CreateNewAbility	typeref:typename:list[str]
required_arguments	autogpt/core/ability/builtins/query_language_model.py	/^    def required_arguments(cls) -> list[str]:$/;"	m	class:QueryLanguageModel	typeref:typename:list[str]
reset	autogpt/llm/api_manager.py	/^    def reset(self):$/;"	m	class:ApiManager
reset_api_manager	tests/integration/test_provider_openai.py	/^def reset_api_manager():$/;"	f
reset_api_manager	tests/unit/test_api_manager.py	/^def reset_api_manager():$/;"	f
resolve_name_to_path	autogpt/core/plugin/base.py	/^    def resolve_name_to_path($/;"	m	class:PluginService	typeref:typename:PluginStorageRoute
resolve_name_to_path	autogpt/core/plugin/simple.py	/^    def resolve_name_to_path($/;"	m	class:SimplePluginService	typeref:typename:PluginStorageRoute
resource_type	autogpt/core/resource/model_providers/schema.py	/^    resource_type = ResourceType.MODEL$/;"	v	class:ModelProviderSettings
resp	tests/unit/test_web_search.py	/^    class resp:$/;"	c	function:test_google_official_search_errors	file:
respective_file_creation_functions	tests/unit/test_text_file_parsers.py	/^respective_file_creation_functions = {$/;"	v
restrict_to_workspace	autogpt/config/config.py	/^    restrict_to_workspace: bool = True$/;"	v	class:Config	typeref:typename:bool
restrict_to_workspace	autogpt/core/workspace/base.py	/^    def restrict_to_workspace(self) -> bool:$/;"	m	class:Workspace	typeref:typename:bool
restrict_to_workspace	autogpt/core/workspace/simple.py	/^    def restrict_to_workspace(self) -> bool:$/;"	m	class:SimpleWorkspace	typeref:typename:bool
restrict_to_workspace	autogpt/core/workspace/simple.py	/^    restrict_to_workspace: bool = UserConfigurable()$/;"	v	class:WorkspaceConfiguration	typeref:typename:bool
restrict_to_workspace	autogpt/workspace/workspace.py	/^    def restrict_to_workspace(self):$/;"	m	class:Workspace
retries_per_request	autogpt/core/resource/model_providers/openai.py	/^    retries_per_request: int = UserConfigurable()$/;"	v	class:OpenAIConfiguration	typeref:typename:int
retry_api	autogpt/llm/providers/openai.py	/^def retry_api($/;"	f
role	autogpt/core/runner/cli_web_app/server/schema.py	/^    role: str = ""$/;"	v	class:AgentInfo	typeref:typename:str
root	autogpt/core/workspace/base.py	/^    def root(self) -> Path:$/;"	m	class:Workspace	typeref:typename:Path
root	autogpt/core/workspace/simple.py	/^    def root(self) -> Path:$/;"	m	class:SimpleWorkspace	typeref:typename:Path
root	autogpt/workspace/workspace.py	/^    def root(self) -> Path:$/;"	m	class:Workspace	typeref:typename:Path
router	autogpt/core/runner/cli_web_app/server/api.py	/^router = APIRouter()$/;"	v
run	autogpt/core/runner/cli_app/cli.py	/^async def run(settings_file: str, pdb: bool) -> None:$/;"	f	typeref:typename:None
run	autogpt/core/runner/cli_web_app/client/client.py	/^def run():$/;"	f
run_auto_gpt	autogpt/app/main.py	/^def run_auto_gpt($/;"	f
run_auto_gpt	autogpt/core/runner/cli_app/main.py	/^async def run_auto_gpt(user_configuration: dict):$/;"	f
run_challenge	tests/challenges/utils.py	/^def run_challenge($/;"	f	typeref:typename:None
run_interaction_loop	autogpt/app/main.py	/^def run_interaction_loop($/;"	f	typeref:typename:None
run_specific_agent	agbenchmark/benchmarks.py	/^def run_specific_agent(task, continuous_mode=False) -> Tuple[str, int]:$/;"	f	typeref:typename:Tuple[str,int]
safe_google_results	autogpt/commands/web_search.py	/^def safe_google_results(results: str | list) -> str:$/;"	f	typeref:typename:str
sanitize_path_arg	autogpt/commands/decorators.py	/^def sanitize_path_arg(arg_name: str):$/;"	f
sanitize_url	autogpt/url_utils/validators.py	/^def sanitize_url(url: str) -> str:$/;"	f	typeref:typename:str
save	autogpt/config/ai_config.py	/^    def save(self, ai_settings_file: str | Path) -> None:$/;"	m	class:AIConfig	typeref:typename:None
save_index	autogpt/memory/vector/providers/json_file.py	/^    def save_index(self):$/;"	m	class:JSONFileMemory
say	autogpt/speech/base.py	/^    def say(self, text: str, voice_index: int = 0) -> bool:$/;"	m	class:VoiceBase	typeref:typename:bool
say_text	autogpt/speech/say.py	/^def say_text(text: str, config: Config, voice_index: int = 0) -> None:$/;"	f	typeref:typename:None
scan_plugins	autogpt/plugins/__init__.py	/^def scan_plugins(config: Config, debug: bool = False) -> List[AutoGPTPluginTemplate]:$/;"	f	typeref:typename:List[AutoGPTPluginTemplate]
schema	autogpt/llm/providers/openai.py	/^    def schema(self) -> dict[str, str | dict | list]:$/;"	m	class:OpenAIFunctionSpec	typeref:typename:dict[str,str|dict|list]
score	autogpt/memory/vector/memory_item.py	/^    def score(self) -> float:$/;"	m	class:MemoryItemRelevance	typeref:typename:float
score_memories_for_relevance	autogpt/memory/vector/providers/base.py	/^    def score_memories_for_relevance($/;"	m	class:VectorMemoryProvider	typeref:typename:Sequence[MemoryItemRelevance]
scrape_links_with_selenium	autogpt/commands/web_selenium.py	/^def scrape_links_with_selenium(driver: WebDriver, url: str) -> list[str]:$/;"	f	typeref:typename:list[str]
scrape_text_with_selenium	autogpt/commands/web_selenium.py	/^def scrape_text_with_selenium(url: str, agent: Agent) -> tuple[WebDriver, str]:$/;"	f	typeref:typename:tuple[WebDriver,str]
sd_webui_auth	autogpt/config/config.py	/^    sd_webui_auth: Optional[str] = None$/;"	v	class:Config	typeref:typename:Optional[str]
sd_webui_url	autogpt/config/config.py	/^    sd_webui_url: Optional[str] = "http:\/\/localhost:7860"$/;"	v	class:Config	typeref:typename:Optional[str]
selenium_headless	autogpt/config/config.py	/^    selenium_headless: bool = True$/;"	v	class:Config	typeref:typename:bool
selenium_web_browser	autogpt/config/config.py	/^    selenium_web_browser: str = "chrome"$/;"	v	class:Config	typeref:typename:str
separator	autogpt/llm/base.py	/^        def separator(text: str):$/;"	f	member:ChatSequence.dump	file:
server	autogpt/core/runner/cli_web_app/cli.py	/^def server(host: str, port: int) -> None:$/;"	f	typeref:typename:None
service	.devcontainer/devcontainer.json	/^  "service": "auto-gpt",$/;"	s
session	autogpt/utils.py	/^session = PromptSession(history=InMemoryHistory())$/;"	v
set_level	autogpt/logs/logger.py	/^    def set_level(self, level: logging._Level) -> None:$/;"	m	class:Logger	typeref:typename:None
set_parser	autogpt/commands/file_operations_utils.py	/^    def set_parser(self, parser: ParserStrategy) -> None:$/;"	m	class:FileContext	typeref:typename:None
set_total_budget	autogpt/llm/api_manager.py	/^    def set_total_budget(self, total_budget):$/;"	m	class:ApiManager
set_workspace_directory	autogpt/workspace/workspace.py	/^    def set_workspace_directory($/;"	m	class:Workspace	typeref:typename:None
setup_mock_input	tests/challenges/utils.py	/^def setup_mock_input(monkeypatch: pytest.MonkeyPatch, cycle_count: int) -> None:$/;"	f	typeref:typename:None
setup_mock_log_cycle_agent_name	tests/challenges/utils.py	/^def setup_mock_log_cycle_agent_name($/;"	f	typeref:typename:None
setup_workspace	autogpt/core/workspace/base.py	/^    def setup_workspace($/;"	m	class:Workspace	typeref:typename:Path
setup_workspace	autogpt/core/workspace/simple.py	/^    def setup_workspace(settings: "AgentSettings", logger: logging.Logger) -> Path:$/;"	m	class:SimpleWorkspace	typeref:typename:Path
shell_allowlist	autogpt/config/config.py	/^    shell_allowlist: list[str] = Field(default_factory=list)$/;"	v	class:Config	typeref:typename:list[str]
shell_command_control	autogpt/config/config.py	/^    shell_command_control: str = "denylist"$/;"	v	class:Config	typeref:typename:str
shell_denylist	autogpt/config/config.py	/^    shell_denylist: list[str] = Field(default_factory=lambda: ["sudo", "su"])$/;"	v	class:Config	typeref:typename:list[str]
shutdownAction	.devcontainer/devcontainer.json	/^  "shutdownAction": "stopCompose",$/;"	s
skip_in_ci	tests/utils.py	/^def skip_in_ci(test_function):$/;"	f
skip_news	autogpt/config/config.py	/^    skip_news: bool = False$/;"	v	class:Config	typeref:typename:bool
skip_reprompt	autogpt/config/config.py	/^    skip_reprompt: bool = False$/;"	v	class:Config	typeref:typename:bool
smart_llm	autogpt/config/config.py	/^    smart_llm: str = "gpt-4"$/;"	v	class:Config	typeref:typename:str
sorted_data	tests/challenges/utils/build_current_score.py	/^sorted_data = recursive_sort_dict(merged_data)$/;"	v
speak	autogpt/json_utils/llm_response_format_1.json	/^                "speak": {$/;"	o	object:properties.thoughts.properties
speak	autogpt/speech/say.py	/^    def speak() -> None:$/;"	f	function:say_text	typeref:typename:None	file:
speak_mode	autogpt/config/config.py	/^    speak_mode: bool = False$/;"	v	class:Config	typeref:typename:bool
spin	autogpt/spinner.py	/^    def spin(self) -> None:$/;"	m	class:Spinner	typeref:typename:None
split_text	autogpt/processing/text.py	/^def split_text($/;"	f
start	autogpt/spinner.py	/^    def start(self):$/;"	m	class:Spinner
status	autogpt/core/planning/schema.py	/^    status: TaskStatus = TaskStatus.BACKLOG$/;"	v	class:TaskContext	typeref:typename:TaskStatus
stop	autogpt/spinner.py	/^    def stop(self):$/;"	m	class:Spinner
storage_format	autogpt/core/plugin/base.py	/^    storage_format: PluginStorageFormat = UserConfigurable()$/;"	v	class:PluginLocation	typeref:typename:PluginStorageFormat
storage_route	autogpt/core/plugin/base.py	/^    storage_route: PluginStorageRoute = UserConfigurable()$/;"	v	class:PluginLocation	typeref:typename:PluginStorageRoute
streamelements_voice	autogpt/config/config.py	/^    streamelements_voice: str = "Brian"$/;"	v	class:Config	typeref:typename:str
successful_test_data	tests/unit/test_url_validation.py	/^successful_test_data = ($/;"	v
summarize_memorize_webpage	autogpt/commands/web_selenium.py	/^def summarize_memorize_webpage($/;"	f	typeref:typename:str
summarize_text	autogpt/processing/text.py	/^def summarize_text($/;"	f	typeref:typename:tuple[str,None|list[tuple[str,str]]]
summary	autogpt/core/ability/schema.py	/^    def summary(self) -> str:$/;"	m	class:AbilityResult	typeref:typename:str
summary	autogpt/memory/message_history.py	/^    summary: str = "I was created"$/;"	v	class:MessageHistory	typeref:typename:str
summary_message	autogpt/memory/message_history.py	/^    def summary_message(self) -> Message:$/;"	m	class:MessageHistory	typeref:typename:Message
supplementary_info	autogpt/core/planning/schema.py	/^    supplementary_info: list[str] = Field(default_factory=list)$/;"	v	class:TaskContext	typeref:typename:list[str]
supported_memory	autogpt/memory/vector/__init__.py	/^supported_memory = ["json_file", "no_memory"]$/;"	v
sut	tests/integration/test_execute_code.py	/^import autogpt.commands.execute_code as sut  # system under testing$/;"	I	nameref:module:autogpt.commands.execute_code
system_info	autogpt/core/planning/strategies/initial_plan.py	/^    system_info: list[str] = UserConfigurable()$/;"	v	class:InitialPlanConfiguration	typeref:typename:list[str]
system_info	autogpt/core/planning/strategies/next_ability.py	/^    system_info: list[str] = UserConfigurable()$/;"	v	class:NextAbilityConfiguration	typeref:typename:list[str]
system_prompt	autogpt/core/planning/strategies/name_and_goals.py	/^    system_prompt: str = UserConfigurable()$/;"	v	class:NameAndGoalsConfiguration	typeref:typename:str
system_prompt_template	autogpt/core/planning/strategies/initial_plan.py	/^    system_prompt_template: str = UserConfigurable()$/;"	v	class:InitialPlanConfiguration	typeref:typename:str
system_prompt_template	autogpt/core/planning/strategies/next_ability.py	/^    system_prompt_template: str = UserConfigurable()$/;"	v	class:NextAbilityConfiguration	typeref:typename:str
target	tests/challenges/debug_code/data/test.py	/^    target = -2$/;"	v
target	tests/challenges/debug_code/data/test.py	/^    target = 0$/;"	v
target	tests/challenges/debug_code/data/test.py	/^    target = 9$/;"	v
task	agbenchmark/benchmarks.py	/^    task = sys.argv[1]$/;"	v
task_complete	autogpt/commands/task_statuses.py	/^def task_complete(reason: str, agent: Agent) -> NoReturn:$/;"	f	typeref:typename:NoReturn
temp_plugins_config_file	tests/conftest.py	/^def temp_plugins_config_file():$/;"	f
temperature	autogpt/config/config.py	/^    temperature: float = 0$/;"	v	class:Config	typeref:typename:float
temperature	autogpt/core/planning/simple.py	/^    temperature: float = UserConfigurable()$/;"	v	class:LanguageModelConfiguration	typeref:typename:float
test_add_command	tests/unit/test_prompt_generator.py	/^def test_add_command():$/;"	f
test_add_constraint	tests/unit/test_prompt_generator.py	/^def test_add_constraint():$/;"	f
test_add_performance_evaluation	tests/unit/test_prompt_generator.py	/^def test_add_performance_evaluation():$/;"	f
test_add_resource	tests/unit/test_prompt_generator.py	/^def test_add_resource():$/;"	f
test_agent_initialization	tests/unit/test_agent.py	/^def test_agent_initialization(agent: Agent):$/;"	f
test_ai_config_file_is_empty	tests/unit/test_ai_config.py	/^def test_ai_config_file_is_empty(workspace):$/;"	f
test_ai_config_file_not_exists	tests/unit/test_ai_config.py	/^def test_ai_config_file_not_exists(workspace):$/;"	f
test_append_to_file	tests/unit/test_file_operations.py	/^def test_append_to_file(test_nested_file: Path, agent: Agent):$/;"	f
test_append_to_file_uses_checksum_from_appended_file	tests/unit/test_file_operations.py	/^def test_append_to_file_uses_checksum_from_appended_file($/;"	f
test_azure_config	tests/unit/test_config.py	/^def test_azure_config(config: Config, workspace: Workspace) -> None:$/;"	f	typeref:typename:None
test_browse_website	tests/challenges/basic_abilities/test_browse_website.py	/^def test_browse_website($/;"	f	typeref:typename:None
test_browse_website	tests/integration/test_web_selenium.py	/^def test_browse_website(agent: Agent, patched_api_requestor: MockerFixture):$/;"	f
test_call_command	tests/unit/test_commands.py	/^def test_call_command():$/;"	f
test_call_nonexistent_command	tests/unit/test_commands.py	/^def test_call_nonexistent_command():$/;"	f
test_clone_auto_gpt_repository	tests/unit/test_git_commands.py	/^def test_clone_auto_gpt_repository(workspace, mock_clone_from, agent: Agent):$/;"	f
test_clone_repository_error	tests/unit/test_git_commands.py	/^def test_clone_repository_error(workspace, mock_clone_from, agent: Agent):$/;"	f
test_command_call	tests/unit/test_commands.py	/^def test_command_call(example_command: Command):$/;"	f
test_command_call_with_invalid_arguments	tests/unit/test_commands.py	/^def test_command_call_with_invalid_arguments(example_command: Command):$/;"	f
test_command_creation	tests/unit/test_commands.py	/^def test_command_creation():$/;"	f
test_command_in_registry	tests/unit/test_commands.py	/^def test_command_in_registry(example_command_with_aliases: Command):$/;"	f
test_count_message_tokens	tests/unit/test_token_counter.py	/^def test_count_message_tokens():$/;"	f
test_count_message_tokens_empty_input	tests/unit/test_token_counter.py	/^def test_count_message_tokens_empty_input():$/;"	f
test_count_message_tokens_gpt_4	tests/unit/test_token_counter.py	/^def test_count_message_tokens_gpt_4():$/;"	f
test_count_message_tokens_invalid_model	tests/unit/test_token_counter.py	/^def test_count_message_tokens_invalid_model():$/;"	f
test_count_string_tokens	tests/unit/test_token_counter.py	/^def test_count_string_tokens():$/;"	f
test_count_string_tokens_empty_input	tests/unit/test_token_counter.py	/^def test_count_string_tokens_empty_input():$/;"	f
test_count_string_tokens_gpt_4	tests/unit/test_token_counter.py	/^def test_count_string_tokens_gpt_4():$/;"	f
test_create_base_config	tests/unit/test_plugins.py	/^def test_create_base_config(config: Config):$/;"	f
test_create_chat_completion_debug_mode	tests/integration/test_provider_openai.py	/^    def test_create_chat_completion_debug_mode(caplog):$/;"	m	class:TestProviderOpenAI
test_create_chat_completion_empty_messages	tests/integration/test_provider_openai.py	/^    def test_create_chat_completion_empty_messages():$/;"	m	class:TestProviderOpenAI
test_create_config_gpt3only	tests/unit/test_config.py	/^def test_create_config_gpt3only(config: Config) -> None:$/;"	f	typeref:typename:None
test_create_config_gpt4only	tests/unit/test_config.py	/^def test_create_config_gpt4only(config: Config) -> None:$/;"	f	typeref:typename:None
test_dalle	tests/integration/test_image_gen.py	/^def test_dalle(agent: Agent, workspace, image_size, patched_api_requestor):$/;"	f
test_debug_code_challenge_a	tests/challenges/debug_code/test_debug_code_challenge_a.py	/^def test_debug_code_challenge_a($/;"	f	typeref:typename:None
test_delete_file	tests/unit/test_file_operations.py	/^def test_delete_file(test_file_with_content_path: Path, agent: Agent):$/;"	f
test_delete_missing_file	tests/unit/test_file_operations.py	/^def test_delete_missing_file(agent: Agent):$/;"	f
test_directory	tests/unit/test_file_operations.py	/^def test_directory(workspace: Workspace):$/;"	f
test_dummy_plugin_default_methods	tests/unit/models/test_base_open_api_plugin.py	/^def test_dummy_plugin_default_methods(dummy_plugin):$/;"	f
test_dummy_plugin_description	tests/unit/models/test_base_open_api_plugin.py	/^def test_dummy_plugin_description(dummy_plugin):$/;"	f
test_dummy_plugin_inheritance	tests/unit/models/test_base_open_api_plugin.py	/^def test_dummy_plugin_inheritance(dummy_plugin):$/;"	f
test_dummy_plugin_name	tests/unit/models/test_base_open_api_plugin.py	/^def test_dummy_plugin_name(dummy_plugin):$/;"	f
test_dummy_plugin_version	tests/unit/models/test_base_open_api_plugin.py	/^def test_dummy_plugin_version(dummy_plugin):$/;"	f
test_edge_case_local_file_access	tests/unit/test_url_validation.py	/^    def test_edge_case_local_file_access(self):$/;"	m	class:TestValidateUrl
test_edge_case_missing_scheme_or_network_location	tests/unit/test_url_validation.py	/^    def test_edge_case_missing_scheme_or_network_location(self):$/;"	m	class:TestValidateUrl
test_execute_command_plugin	tests/unit/test_agent.py	/^def test_execute_command_plugin(agent: Agent):$/;"	f
test_execute_python_code	tests/integration/test_execute_code.py	/^def test_execute_python_code(random_code: str, random_string: str, agent: Agent):$/;"	f
test_execute_python_code_disallows_name_arg_path_traversal	tests/integration/test_execute_code.py	/^def test_execute_python_code_disallows_name_arg_path_traversal($/;"	f
test_execute_python_code_overwrites_file	tests/integration/test_execute_code.py	/^def test_execute_python_code_overwrites_file(random_code: str, agent: Agent):$/;"	f
test_execute_python_file	tests/integration/test_execute_code.py	/^def test_execute_python_file(python_test_file: str, random_string: str, agent: Agent):$/;"	f
test_execute_python_file_invalid	tests/integration/test_execute_code.py	/^def test_execute_python_file_invalid(agent: Agent):$/;"	f
test_execute_python_file_not_found	tests/integration/test_execute_code.py	/^def test_execute_python_file_not_found(agent: Agent):$/;"	f
test_execute_shell	tests/integration/test_execute_code.py	/^def test_execute_shell(random_string: str, agent: Agent):$/;"	f
test_execute_shell_allowlist_should_allow	tests/integration/test_execute_code.py	/^def test_execute_shell_allowlist_should_allow(agent: Agent, random_string: str):$/;"	f
test_execute_shell_allowlist_should_deny	tests/integration/test_execute_code.py	/^def test_execute_shell_allowlist_should_deny(agent: Agent, random_string: str):$/;"	f
test_execute_shell_denylist_should_allow	tests/integration/test_execute_code.py	/^def test_execute_shell_denylist_should_allow(agent: Agent, random_string: str):$/;"	f
test_execute_shell_denylist_should_deny	tests/integration/test_execute_code.py	/^def test_execute_shell_denylist_should_deny(agent: Agent, random_string: str):$/;"	f
test_execute_shell_local_commands_not_allowed	tests/integration/test_execute_code.py	/^def test_execute_shell_local_commands_not_allowed(random_string: str, agent: Agent):$/;"	f
test_extract_json_from_response	tests/unit/test_utils.py	/^def test_extract_json_from_response(valid_json_response: dict):$/;"	f
test_extract_json_from_response_wrapped_in_code_block	tests/unit/test_utils.py	/^def test_extract_json_from_response_wrapped_in_code_block(valid_json_response: dict):$/;"	f
test_extremely_long_url	tests/unit/test_url_validation.py	/^    def test_extremely_long_url(self):$/;"	m	class:TestValidateUrl
test_file	tests/unit/test_file_operations.py	/^def test_file(test_file_path: Path):$/;"	f
test_file_name	tests/unit/test_file_operations.py	/^def test_file_name():$/;"	f
test_file_operations_log	tests/unit/test_file_operations.py	/^def test_file_operations_log(test_file: TextIOWrapper):$/;"	f
test_file_operations_state	tests/unit/test_file_operations.py	/^def test_file_operations_state(test_file: TextIOWrapper):$/;"	f
test_file_path	tests/unit/test_file_operations.py	/^def test_file_path(test_file_name: Path, workspace: Workspace):$/;"	f
test_file_with_content_path	tests/unit/test_file_operations.py	/^def test_file_with_content_path(test_file: TextIOWrapper, file_content, agent: Agent):$/;"	f
test_func	tests/unit/test_url_validation.py	/^        def test_func(url):$/;"	f	member:TestValidateUrl.test_edge_case_local_file_access	file:
test_func	tests/unit/test_url_validation.py	/^        def test_func(url):$/;"	f	member:TestValidateUrl.test_edge_case_missing_scheme_or_network_location	file:
test_func	tests/unit/test_url_validation.py	/^        def test_func(url):$/;"	f	member:TestValidateUrl.test_general_behavior_additional_path_parameters_query_string	file:
test_func	tests/unit/test_url_validation.py	/^        def test_func(url):$/;"	f	member:TestValidateUrl.test_general_behavior_invalid_url_format	file:
test_func	tests/unit/test_url_validation.py	/^        def test_func(url):$/;"	f	member:TestValidateUrl.test_general_behavior_sanitizes_url	file:
test_func	tests/unit/test_url_validation.py	/^        def test_func(url):$/;"	f	member:TestValidateUrl.test_happy_path_valid_url	file:
test_general_behavior_additional_path_parameters_query_string	tests/unit/test_url_validation.py	/^    def test_general_behavior_additional_path_parameters_query_string(self):$/;"	m	class:TestValidateUrl
test_general_behavior_invalid_url_format	tests/unit/test_url_validation.py	/^    def test_general_behavior_invalid_url_format(self):$/;"	m	class:TestValidateUrl
test_general_behavior_sanitizes_url	tests/unit/test_url_validation.py	/^    def test_general_behavior_sanitizes_url(self):$/;"	m	class:TestValidateUrl
test_generate_aiconfig_automatic_default	tests/integration/test_setup.py	/^def test_generate_aiconfig_automatic_default(patched_api_requestor, config):$/;"	f
test_generate_aiconfig_automatic_fallback	tests/integration/test_setup.py	/^def test_generate_aiconfig_automatic_fallback(patched_api_requestor, config):$/;"	f
test_generate_aiconfig_automatic_typical	tests/integration/test_setup.py	/^def test_generate_aiconfig_automatic_typical(patched_api_requestor, config):$/;"	f
test_generate_prompt_string	tests/unit/test_prompt_generator.py	/^def test_generate_prompt_string(config):$/;"	f
test_get_bulletin_from_web_exception	tests/unit/test_utils.py	/^def test_get_bulletin_from_web_exception(mock_get):$/;"	f
test_get_bulletin_from_web_failure	tests/unit/test_utils.py	/^def test_get_bulletin_from_web_failure(mock_get):$/;"	f
test_get_bulletin_from_web_success	tests/unit/test_utils.py	/^def test_get_bulletin_from_web_success(mock_get):$/;"	f
test_get_command	tests/unit/test_commands.py	/^def test_get_command(example_command: Command):$/;"	f
test_get_command_prompt	tests/unit/test_commands.py	/^def test_get_command_prompt():$/;"	f
test_get_current_git_branch	tests/unit/test_utils.py	/^def test_get_current_git_branch():$/;"	f
test_get_current_git_branch_failure	tests/unit/test_utils.py	/^def test_get_current_git_branch_failure(mock_repo):$/;"	f
test_get_current_git_branch_success	tests/unit/test_utils.py	/^def test_get_current_git_branch_success(mock_repo):$/;"	f
test_get_latest_bulletin_new_bulletin_same_as_old_bulletin	tests/unit/test_utils.py	/^def test_get_latest_bulletin_new_bulletin_same_as_old_bulletin():$/;"	f
test_get_latest_bulletin_no_file	tests/unit/test_utils.py	/^def test_get_latest_bulletin_no_file():$/;"	f
test_get_latest_bulletin_with_file	tests/unit/test_utils.py	/^def test_get_latest_bulletin_with_file():$/;"	f
test_get_latest_bulletin_with_new_bulletin	tests/unit/test_utils.py	/^def test_get_latest_bulletin_with_new_bulletin():$/;"	f
test_get_models	tests/unit/test_api_manager.py	/^    def test_get_models():$/;"	m	class:TestApiManager
test_get_nonexistent_command	tests/unit/test_commands.py	/^def test_get_nonexistent_command():$/;"	f
test_get_path_accessible	tests/unit/test_workspace.py	/^def test_get_path_accessible(accessible_path, workspace_root):$/;"	f
test_get_path_inaccessible	tests/unit/test_workspace.py	/^def test_get_path_inaccessible(inaccessible_path, workspace_root):$/;"	f
test_getter_methods	tests/unit/test_api_manager.py	/^    def test_getter_methods(self):$/;"	m	class:TestApiManager
test_goals_are_always_lists_of_strings	tests/unit/test_ai_config.py	/^def test_goals_are_always_lists_of_strings(tmp_path):$/;"	f
test_google_official_search	tests/unit/test_web_search.py	/^def test_google_official_search($/;"	f
test_google_official_search_errors	tests/unit/test_web_search.py	/^def test_google_official_search_errors($/;"	f
test_google_search	tests/unit/test_web_search.py	/^def test_google_search($/;"	f
test_happy_path_valid_url	tests/unit/test_url_validation.py	/^    def test_happy_path_valid_url(self):$/;"	m	class:TestValidateUrl
test_huggingface	tests/integration/test_image_gen.py	/^def test_huggingface(agent: Agent, workspace, image_size, image_model):$/;"	f
test_huggingface_fail_missing_api_token	tests/integration/test_image_gen.py	/^def test_huggingface_fail_missing_api_token(mocker, agent: Agent):$/;"	f
test_huggingface_fail_request_bad_image	tests/integration/test_image_gen.py	/^def test_huggingface_fail_request_bad_image(mocker, agent: Agent):$/;"	f
test_huggingface_fail_request_bad_json	tests/integration/test_image_gen.py	/^def test_huggingface_fail_request_bad_json(mocker, agent: Agent):$/;"	f
test_huggingface_fail_request_no_delay	tests/integration/test_image_gen.py	/^def test_huggingface_fail_request_no_delay(mocker, agent: Agent):$/;"	f
test_huggingface_fail_request_with_delay	tests/integration/test_image_gen.py	/^def test_huggingface_fail_request_with_delay($/;"	f
test_huggingface_fail_request_with_delay	tests/integration/test_image_gen.py	/^def test_huggingface_fail_request_with_delay(mocker, agent: Agent):$/;"	f
test_import_mock_commands_module	tests/unit/test_commands.py	/^def test_import_mock_commands_module():$/;"	f
test_import_temp_command_file_module	tests/unit/test_commands.py	/^def test_import_temp_command_file_module(tmp_path: Path):$/;"	f
test_information_retrieval_challenge_a	tests/challenges/information_retrieval/test_information_retrieval_challenge_a.py	/^def test_information_retrieval_challenge_a($/;"	f	typeref:typename:None
test_information_retrieval_challenge_b	tests/challenges/information_retrieval/test_information_retrieval_challenge_b.py	/^def test_information_retrieval_challenge_b($/;"	f	typeref:typename:None
test_information_retrieval_challenge_c	tests/challenges/information_retrieval/test_information_retrieval_challenge_c.py	/^def test_information_retrieval_challenge_c($/;"	f	typeref:typename:None
test_initial_values	tests/unit/test_config.py	/^def test_initial_values(config: Config):$/;"	f
test_inspect_zip_for_modules	tests/unit/test_plugins.py	/^def test_inspect_zip_for_modules():$/;"	f
test_internationalized_url	tests/unit/test_url_validation.py	/^    def test_internationalized_url(self):$/;"	m	class:TestValidateUrl
test_invalid_json_leading_sentence_with_gpt	tests/unit/_test_json_parser.py	/^def test_invalid_json_leading_sentence_with_gpt():$/;"	f
test_invalid_json_leading_sentence_with_gpt	tests/unit/_test_json_parser.py	/^def test_invalid_json_leading_sentence_with_gpt(self):$/;"	f
test_invalid_json_major_with_gpt	tests/unit/_test_json_parser.py	/^def test_invalid_json_major_with_gpt():$/;"	f
test_invalid_json_major_without_gpt	tests/unit/_test_json_parser.py	/^def test_invalid_json_major_without_gpt():$/;"	f
test_invalid_json_minor	tests/unit/_test_json_parser.py	/^def test_invalid_json_minor():$/;"	f
test_is_duplicate_operation	tests/unit/test_file_operations.py	/^def test_is_duplicate_operation(agent: Agent, mocker: MockerFixture):$/;"	f
test_json_memory_add	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_add(config: Config, memory_item: MemoryItem):$/;"	f
test_json_memory_clear	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_clear(config: Config, memory_item: MemoryItem):$/;"	f
test_json_memory_get	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_get(config: Config, memory_item: MemoryItem, mock_get_embedding):$/;"	f
test_json_memory_get_relevant	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_get_relevant(config: Config, patched_api_requestor: None) -> None:$/;"	f	typeref:typename:None
test_json_memory_get_stats	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_get_stats(config: Config, memory_item: MemoryItem) -> None:$/;"	f	typeref:typename:None
test_json_memory_init_with_backing_empty_file	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_init_with_backing_empty_file(config: Config, workspace: Workspace):$/;"	f
test_json_memory_init_with_backing_invalid_file	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_init_with_backing_invalid_file($/;"	f
test_json_memory_init_without_backing_file	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_init_without_backing_file(config: Config, workspace: Workspace):$/;"	f
test_json_memory_load_index	tests/integration/memory/test_json_file_memory.py	/^def test_json_memory_load_index(config: Config, memory_item: MemoryItem):$/;"	f
test_kubernetes_template_challenge_a	tests/challenges/kubernetes/test_kubernetes_template_challenge_a.py	/^def test_kubernetes_template_challenge_a($/;"	f	typeref:typename:None
test_list_files	tests/unit/test_file_operations.py	/^def test_list_files(workspace: Workspace, test_directory: Path, agent: Agent):$/;"	f
test_load_config	tests/unit/test_plugins.py	/^def test_load_config(config: Config):$/;"	f
test_log_operation	tests/unit/test_file_operations.py	/^def test_log_operation(agent: Agent):$/;"	f
test_log_operation_with_checksum	tests/unit/test_file_operations.py	/^def test_log_operation_with_checksum(agent: Agent):$/;"	f
test_memory_challenge_a	tests/challenges/memory/test_memory_challenge_a.py	/^def test_memory_challenge_a($/;"	f	typeref:typename:None
test_memory_challenge_b	tests/challenges/memory/test_memory_challenge_b.py	/^def test_memory_challenge_b($/;"	f	typeref:typename:None
test_memory_challenge_c	tests/challenges/memory/test_memory_challenge_c.py	/^def test_memory_challenge_c($/;"	f	typeref:typename:None
test_memory_challenge_d	tests/challenges/memory/test_memory_challenge_d.py	/^def test_memory_challenge_d($/;"	f	typeref:typename:None
test_message_history_batch_summary	tests/unit/test_message_history.py	/^def test_message_history_batch_summary(mocker, agent: Agent, config: Config):$/;"	f
test_method_name_and_count	tests/challenges/test_challenge_should_be_formatted_properly.py	/^def test_method_name_and_count() -> None:$/;"	f	typeref:typename:None
test_missing_azure_config	tests/unit/test_config.py	/^def test_missing_azure_config(workspace: Workspace):$/;"	f
test_nested_file	tests/unit/test_file_operations.py	/^def test_nested_file(workspace: Workspace):$/;"	f
test_parsers	tests/unit/test_text_file_parsers.py	/^    def test_parsers(self):$/;"	m	class:TestConfig
test_prompt_config_loading	tests/unit/test_prompt_config.py	/^def test_prompt_config_loading(tmp_path):$/;"	f
test_prompt_user_manual_mode	tests/integration/test_setup.py	/^def test_prompt_user_manual_mode(patched_api_requestor, config):$/;"	f
test_read_file	tests/unit/test_file_operations.py	/^def test_read_file($/;"	f
test_read_file_not_found	tests/unit/test_file_operations.py	/^def test_read_file_not_found(agent: Agent):$/;"	f
test_readable_file_size	tests/unit/test_utils.py	/^def test_readable_file_size():$/;"	f
test_register_command	tests/unit/test_commands.py	/^def test_register_command(example_command: Command):$/;"	f
test_register_command_aliases	tests/unit/test_commands.py	/^def test_register_command_aliases(example_command_with_aliases: Command):$/;"	f
test_remove_color_codes	tests/unit/test_logs.py	/^def test_remove_color_codes(raw_text, clean_text):$/;"	f
test_retry_open_api_no_error	tests/unit/test_retry_provider_openai.py	/^def test_retry_open_api_no_error(capsys):$/;"	f
test_retry_open_api_passing	tests/unit/test_retry_provider_openai.py	/^def test_retry_open_api_passing(capsys, error, error_count, retry_count, failure):$/;"	f
test_retry_open_api_rate_limit_no_warn	tests/unit/test_retry_provider_openai.py	/^def test_retry_open_api_rate_limit_no_warn(capsys):$/;"	f
test_retry_open_api_service_unavairable_no_warn	tests/unit/test_retry_provider_openai.py	/^def test_retry_open_api_service_unavairable_no_warn(capsys):$/;"	f
test_retry_openapi_other_api_error	tests/unit/test_retry_provider_openai.py	/^def test_retry_openapi_other_api_error(capsys):$/;"	f
test_safe_google_results	tests/unit/test_web_search.py	/^def test_safe_google_results(query, expected_output):$/;"	f
test_safe_google_results_invalid_input	tests/unit/test_web_search.py	/^def test_safe_google_results_invalid_input():$/;"	f
test_sanitize_path_accessible	tests/unit/test_workspace.py	/^def test_sanitize_path_accessible(accessible_path, workspace_root):$/;"	f
test_sanitize_path_inaccessible	tests/unit/test_workspace.py	/^def test_sanitize_path_inaccessible(inaccessible_path, workspace_root):$/;"	f
test_scan_plugins_generic	tests/unit/test_plugins.py	/^def test_scan_plugins_generic(config: Config):$/;"	f
test_scan_plugins_not_enabled	tests/unit/test_plugins.py	/^def test_scan_plugins_not_enabled(config: Config):$/;"	f
test_scan_plugins_openai	tests/unit/test_plugins.py	/^def test_scan_plugins_openai(config: Config):$/;"	f
test_sd_webui	tests/integration/test_image_gen.py	/^def test_sd_webui(agent: Agent, workspace, image_size):$/;"	f
test_sd_webui_negative_prompt	tests/integration/test_image_gen.py	/^def test_sd_webui_negative_prompt(agent: Agent, workspace, image_size):$/;"	f
test_set_continuous_mode	tests/unit/test_config.py	/^def test_set_continuous_mode(config: Config):$/;"	f
test_set_debug_mode	tests/unit/test_config.py	/^def test_set_debug_mode(config: Config):$/;"	f
test_set_fast_llm	tests/unit/test_config.py	/^def test_set_fast_llm(config: Config):$/;"	f
test_set_smart_llm	tests/unit/test_config.py	/^def test_set_smart_llm(config: Config):$/;"	f
test_set_speak_mode	tests/unit/test_config.py	/^def test_set_speak_mode(config: Config):$/;"	f
test_set_total_budget	tests/unit/test_api_manager.py	/^    def test_set_total_budget():$/;"	m	class:TestApiManager
test_smart_and_fast_llms_set_to_gpt4	tests/unit/test_config.py	/^def test_smart_and_fast_llms_set_to_gpt4(mock_list_models, config: Config):$/;"	f
test_spinner_can_be_used_as_context_manager	tests/unit/test_spinner.py	/^def test_spinner_can_be_used_as_context_manager():$/;"	f
test_spinner_initializes_with_custom_values	tests/unit/test_spinner.py	/^def test_spinner_initializes_with_custom_values():$/;"	f
test_spinner_initializes_with_default_values	tests/unit/test_spinner.py	/^def test_spinner_initializes_with_default_values():$/;"	f
test_spinner_stops_spinning	tests/unit/test_spinner.py	/^def test_spinner_stops_spinning():$/;"	f
test_text_checksum	tests/unit/test_file_operations.py	/^def test_text_checksum(file_content: str):$/;"	f
test_two_sum	tests/challenges/debug_code/data/test.py	/^def test_two_sum(nums: List, target: int, expected_result: List[int]) -> None:$/;"	f	typeref:typename:None
test_unregister_command	tests/unit/test_commands.py	/^def test_unregister_command(example_command: Command):$/;"	f
test_unregister_command_aliases	tests/unit/test_commands.py	/^def test_unregister_command_aliases(example_command_with_aliases: Command):$/;"	f
test_update_cost_completion_model	tests/unit/test_api_manager.py	/^    def test_update_cost_completion_model():$/;"	m	class:TestApiManager
test_update_cost_embedding_model	tests/unit/test_api_manager.py	/^    def test_update_cost_embedding_model():$/;"	m	class:TestApiManager
test_url_validation_fails_invalid_url	tests/unit/test_url_validation.py	/^def test_url_validation_fails_invalid_url(url, expected_error):$/;"	f
test_url_validation_fails_local_path	tests/unit/test_url_validation.py	/^def test_url_validation_fails_local_path(url):$/;"	f
test_url_validation_succeeds	tests/unit/test_url_validation.py	/^def test_url_validation_succeeds(url):$/;"	f
test_url_with_special_chars	tests/unit/test_url_validation.py	/^    def test_url_with_special_chars(self):$/;"	m	class:TestValidateUrl
test_valid_json	tests/unit/_test_json_parser.py	/^def test_valid_json():$/;"	f
test_validate_json_invalid	tests/unit/test_utils.py	/^def test_validate_json_invalid(invalid_json_response, config: Config):$/;"	f
test_validate_json_valid	tests/unit/test_utils.py	/^def test_validate_json_valid(valid_json_response, config: Config):$/;"	f
test_validate_yaml_file_invalid	tests/unit/test_utils.py	/^def test_validate_yaml_file_invalid():$/;"	f
test_validate_yaml_file_not_found	tests/unit/test_utils.py	/^def test_validate_yaml_file_not_found():$/;"	f
test_validate_yaml_file_valid	tests/unit/test_utils.py	/^def test_validate_yaml_file_valid():$/;"	f
test_write_file	tests/challenges/basic_abilities/test_write_file.py	/^def test_write_file($/;"	f	typeref:typename:None
test_write_file_fails_if_content_exists	tests/unit/test_file_operations.py	/^def test_write_file_fails_if_content_exists(test_file_name: Path, agent: Agent):$/;"	f
test_write_file_logs_checksum	tests/unit/test_file_operations.py	/^def test_write_file_logs_checksum(test_file_name: Path, agent: Agent):$/;"	f
test_write_file_succeeds_if_content_different	tests/unit/test_file_operations.py	/^def test_write_file_succeeds_if_content_different($/;"	f
test_write_to_file_absolute_path	tests/unit/test_file_operations.py	/^def test_write_to_file_absolute_path(test_file_path: Path, agent: Agent):$/;"	f
test_write_to_file_relative_path	tests/unit/test_file_operations.py	/^def test_write_to_file_relative_path(test_file_name: Path, agent: Agent):$/;"	f
text	autogpt/json_utils/llm_response_format_1.json	/^                "text": {$/;"	o	object:properties.thoughts.properties
textAlign	autogpt/js/overlay.js	/^    textAlign: 'center',$/;"	p	variable:anonymousObject550889d10205
textContent	autogpt/js/overlay.js	/^const textContent = document.createElement('div');$/;"	C
text_checksum	autogpt/commands/file_operations.py	/^def text_checksum(text: str) -> str:$/;"	f	typeref:typename:str
text_to_speech_provider	autogpt/config/config.py	/^    text_to_speech_provider: str = "gtts"$/;"	v	class:Config	typeref:typename:str
think	autogpt/agents/base.py	/^    def think($/;"	m	class:BaseAgent	typeref:typename:tuple[CommandName|None,CommandArgs|None,AgentThoughts]
thoughts	autogpt/json_utils/llm_response_format_1.json	/^        "thoughts": {$/;"	o	object:properties
to_numbered_list	autogpt/core/planning/strategies/utils.py	/^def to_numbered_list($/;"	f	typeref:typename:str
token_length	autogpt/llm/base.py	/^    def token_length(self) -> int:$/;"	m	class:ChatSequence	typeref:typename:int
top	autogpt/js/overlay.js	/^    top: 0,$/;"	p	variable:anonymousObject550889d10105
total_budget	autogpt/core/resource/model_providers/schema.py	/^    total_budget: float = UserConfigurable()$/;"	v	class:ModelProviderBudget	typeref:typename:float
total_budget	autogpt/core/resource/schema.py	/^    total_budget: float = UserConfigurable()$/;"	v	class:ProviderBudget	typeref:typename:float
total_tokens	autogpt/core/resource/model_providers/schema.py	/^    total_tokens: int = 0$/;"	v	class:ModelProviderUsage	typeref:typename:int
trim_messages	autogpt/memory/message_history.py	/^    def trim_messages($/;"	m	class:MessageHistory	typeref:typename:tuple[Message,list[Message]]
two_sum	tests/challenges/debug_code/data/code.py	/^def two_sum(nums: List, target: int) -> Optional[List[int]]:$/;"	f	typeref:typename:Optional[List[int]]
type	autogpt/json_utils/llm_response_format_1.json	/^                    "type": "object"$/;"	s	object:properties.command.properties.args
type	autogpt/json_utils/llm_response_format_1.json	/^                    "type": "string"$/;"	s	object:properties.thoughts.properties.reasoning
type	autogpt/json_utils/llm_response_format_1.json	/^                    "type": "string",$/;"	s	object:properties.thoughts.properties.criticism
type	autogpt/json_utils/llm_response_format_1.json	/^                    "type": "string",$/;"	s	object:properties.thoughts.properties.plan
type	autogpt/json_utils/llm_response_format_1.json	/^                    "type": "string",$/;"	s	object:properties.thoughts.properties.speak
type	autogpt/json_utils/llm_response_format_1.json	/^                    "type": "string",$/;"	s	object:properties.thoughts.properties.text
type	autogpt/json_utils/llm_response_format_1.json	/^                "name": {"type": "string"},$/;"	s	object:properties.command.properties.name
type	autogpt/json_utils/llm_response_format_1.json	/^            "type": "object",$/;"	s	object:properties.command
type	autogpt/json_utils/llm_response_format_1.json	/^            "type": "object",$/;"	s	object:properties.thoughts
type	autogpt/json_utils/llm_response_format_1.json	/^    "type": "object",$/;"	s
type	autogpt/llm/base.py	/^    type: MessageType | None = None$/;"	v	class:Message	typeref:typename:MessageType|None
typewriter_log	autogpt/logs/logger.py	/^    def typewriter_log($/;"	m	class:Logger	typeref:typename:None
unmask	autogpt/core/resource/model_providers/schema.py	/^def unmask(model: BaseModel):$/;"	f
unmasked	autogpt/core/resource/model_providers/schema.py	/^    def unmasked(self) -> dict:$/;"	m	class:ModelProviderCredentials	typeref:typename:dict
unregister	autogpt/models/command_registry.py	/^    def unregister(self, command: Command) -> None:$/;"	m	class:CommandRegistry	typeref:typename:None
update_agent_name_and_goals	autogpt/core/agent/simple.py	/^    def update_agent_name_and_goals(self, agent_goals: dict) -> None:$/;"	m	class:AgentSettings	typeref:typename:None
update_cost	autogpt/llm/api_manager.py	/^    def update_cost(self, prompt_tokens, completion_tokens, model):$/;"	m	class:ApiManager
update_new_score	tests/challenges/challenge_decorator/score_utils.py	/^def update_new_score($/;"	f	typeref:typename:None
update_running_summary	autogpt/memory/message_history.py	/^    def update_running_summary($/;"	m	class:MessageHistory	typeref:typename:Message
update_usage	autogpt/core/resource/model_providers/schema.py	/^    def update_usage($/;"	m	class:ModelProviderUsage	typeref:typename:None
update_usage	autogpt/core/resource/schema.py	/^    def update_usage(self, *args, **kwargs) -> None:$/;"	m	class:ProviderUsage	typeref:typename:None
update_usage_and_cost	autogpt/core/resource/model_providers/schema.py	/^    def update_usage_and_cost($/;"	m	class:ModelProviderBudget	typeref:typename:None
update_usage_and_cost	autogpt/core/resource/schema.py	/^    def update_usage_and_cost(self, *args, **kwargs) -> None:$/;"	m	class:ProviderBudget	typeref:typename:None
update_usage_with_response	autogpt/llm/providers/openai.py	/^    def update_usage_with_response(response: OpenAIObject):$/;"	f	function:meter_api	file:
update_user	autogpt/app/main.py	/^def update_user($/;"	f	typeref:typename:None
upgradePackages	.devcontainer/devcontainer.json	/^      "upgradePackages": "true"$/;"	s	object:features.ghcr.io/devcontainers/features/common-utils:2
use_azure	autogpt/config/config.py	/^    use_azure: bool = False$/;"	v	class:Config	typeref:typename:bool
use_enum_values	autogpt/core/configuration/schema.py	/^        use_enum_values = True$/;"	v	class:SystemConfiguration.Config
use_enum_values	autogpt/core/configuration/schema.py	/^        use_enum_values = True$/;"	v	class:SystemSettings.Config
userGid	.devcontainer/devcontainer.json	/^      "userGid": "1000",$/;"	s	object:features.ghcr.io/devcontainers/features/common-utils:2
userUid	.devcontainer/devcontainer.json	/^      "userUid": "1000",$/;"	s	object:features.ghcr.io/devcontainers/features/common-utils:2
user_agent	autogpt/config/config.py	/^    user_agent: str = "Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit\/537.36 (KHT/;"	v	class:Config	typeref:typename:str
user_input	autogpt/core/planning/schema.py	/^    user_input: list[str] = Field(default_factory=list)$/;"	v	class:TaskContext	typeref:typename:list[str]
user_input	autogpt/core/runner/cli_web_app/server/schema.py	/^    user_input: str = ""$/;"	v	class:InteractRequestBody	typeref:typename:str
user_input	autogpt/models/base_open_ai_plugin.py	/^    def user_input(self, user_input: str) -> str:$/;"	m	class:BaseOpenAIPlugin	typeref:typename:str
user_input	tests/unit/data/test_plugins/auto_gpt_guanaco/__init__.py	/^    def user_input(self, user_input: str) -> str:$/;"	m	class:AutoGPTGuanaco	typeref:typename:str
user_prompt_template	autogpt/core/planning/strategies/initial_plan.py	/^    user_prompt_template: str = UserConfigurable()$/;"	v	class:InitialPlanConfiguration	typeref:typename:str
user_prompt_template	autogpt/core/planning/strategies/name_and_goals.py	/^    user_prompt_template: str = UserConfigurable()$/;"	v	class:NameAndGoalsConfiguration	typeref:typename:str
user_prompt_template	autogpt/core/planning/strategies/next_ability.py	/^    user_prompt_template: str = UserConfigurable()$/;"	v	class:NextAbilityConfiguration	typeref:typename:str
username	.devcontainer/devcontainer.json	/^      "username": "vscode",$/;"	s	object:features.ghcr.io/devcontainers/features/common-utils:2
v0.4.5 RELEASE HIGHLIGHTS! 🚀	BULLETIN.md	/^# v0.4.5 RELEASE HIGHLIGHTS! 🚀$/;"	c
valid_json_response	tests/unit/test_utils.py	/^def valid_json_response() -> dict:$/;"	f	typeref:typename:dict
validate_command	autogpt/commands/execute_code.py	/^def validate_command(command: str, config: Config) -> bool:$/;"	f	typeref:typename:bool
validate_dict	autogpt/json_utils/utilities.py	/^def validate_dict($/;"	f	typeref:typename:tuple[Literal[True],None]|tuple[Literal[False],list]
validate_plugins	autogpt/config/config.py	/^    def validate_plugins(cls, p: AutoGPTPluginTemplate | Any):$/;"	m	class:Config
validate_url	autogpt/url_utils/validators.py	/^def validate_url(func: Callable[..., Any]) -> Any:$/;"	f	typeref:typename:Any
validate_yaml_file	autogpt/utils.py	/^def validate_yaml_file(file: str):$/;"	f
vcr_cassette_dir	tests/vcr/__init__.py	/^def vcr_cassette_dir(request):$/;"	f
vcr_config	tests/challenges/conftest.py	/^def vcr_config(get_base_vcr_config: Dict[str, Any]) -> Dict[str, Any]:$/;"	f	typeref:typename:Dict[str,Any]
vcr_config	tests/vcr/__init__.py	/^def vcr_config(get_base_vcr_config):$/;"	f
vector_memory_item	tests/integration/memory/utils.py	/^import autogpt.memory.vector.memory_item as vector_memory_item$/;"	I	nameref:module:autogpt.memory.vector.memory_item
version	.devcontainer/devcontainer.json	/^      "version": "latest",$/;"	s	object:features.ghcr.io/devcontainers/features/git:1
warn	autogpt/logs/logger.py	/^    def warn($/;"	m	class:Logger	typeref:typename:None
warning_threshold	autogpt/core/resource/model_providers/openai.py	/^    warning_threshold: float = UserConfigurable()$/;"	v	class:OpenAIModelProviderBudget	typeref:typename:float
we_are_running_in_a_docker_container	autogpt/commands/execute_code.py	/^def we_are_running_in_a_docker_container() -> bool:$/;"	f	typeref:typename:bool
web_search	autogpt/commands/web_search.py	/^def web_search(query: str, agent: Agent, num_results: int = 8) -> str:$/;"	f	typeref:typename:str
width	autogpt/js/overlay.js	/^    width: '100%',$/;"	p	variable:anonymousObject550889d10105
wipe_redis_on_start	autogpt/config/config.py	/^    wipe_redis_on_start: bool = True$/;"	v	class:Config	typeref:typename:bool
workdir	autogpt/config/config.py	/^    workdir: Path = None$/;"	v	class:Config	typeref:typename:Path
workspace	agbenchmark/config.json	/^  "workspace": "autogpt\/workspace\/auto_gpt_workspace",$/;"	s
workspace	tests/conftest.py	/^def workspace(workspace_root: Path) -> Workspace:$/;"	f	typeref:typename:Workspace
workspaceFolder	.devcontainer/devcontainer.json	/^  "workspaceFolder": "\/workspace\/Auto-GPT",$/;"	s
workspace_path	autogpt/config/config.py	/^    workspace_path: Optional[Path] = None$/;"	v	class:Config	typeref:typename:Optional[Path]
workspace_required	autogpt/core/ability/base.py	/^    workspace_required: bool = False$/;"	v	class:AbilityConfiguration	typeref:typename:bool
workspace_root	tests/conftest.py	/^def workspace_root(tmp_path: Path) -> Path:$/;"	f	typeref:typename:Path
workspace_root	tests/unit/test_workspace.py	/^def workspace_root(tmp_path):$/;"	f
wrapped	autogpt/core/runner/client_lib/utils.py	/^    async def wrapped(*args: P.args, **kwargs: P.kwargs) -> T:$/;"	f	function:handle_exceptions	typeref:typename:T	file:
wrapper	autogpt/command_decorator.py	/^        def wrapper(*args, **kwargs) -> Any:$/;"	f	function:command.decorator	typeref:typename:Any	file:
wrapper	autogpt/commands/decorators.py	/^        def wrapper(*args, **kwargs):$/;"	f	function:sanitize_path_arg.decorator	file:
wrapper	autogpt/core/runner/client_lib/utils.py	/^    def wrapper(*args, **kwargs):$/;"	f	function:coroutine	file:
wrapper	autogpt/url_utils/validators.py	/^    def wrapper(url: str, *args, **kwargs) -> Any:$/;"	f	function:validate_url	typeref:typename:Any	file:
wrapper	tests/challenges/challenge_decorator/challenge_decorator.py	/^        def wrapper(*args: Any, **kwargs: Any) -> None:$/;"	f	function:challenge.decorator	typeref:typename:None	file:
write_dict_to_json_file	autogpt/plugins/__init__.py	/^def write_dict_to_json_file(data: dict, file_path: str) -> None:$/;"	f	typeref:typename:None
write_file	tests/challenges/current_score.json	/^        "write_file": {$/;"	o	object:basic_abilities
write_new_score	tests/challenges/challenge_decorator/score_utils.py	/^def write_new_score($/;"	f	typeref:typename:Dict[str,Any]
write_new_score_to_file	tests/challenges/challenge_decorator/score_utils.py	/^def write_new_score_to_file(new_score: Dict[str, Any], filename: str) -> None:$/;"	f	typeref:typename:None
write_to_file	autogpt/commands/file_operations.py	/^def write_to_file(filename: str, text: str, agent: Agent) -> str:$/;"	f	typeref:typename:str
zIndex	autogpt/js/overlay.js	/^    zIndex: 999999,$/;"	p	variable:anonymousObject550889d10105
♻️ Self-Feedback Mode ⚠️	docs/usage.md	/^### ♻️ Self-Feedback Mode ⚠️$/;"	S	section:Usage""Command Line Arguments
⚠️ Limitations	README.md	/^## ⚠️ Limitations$/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
🌲 Pinecone API Key Setup	docs/configuration/memory.md	/^### 🌲 Pinecone API Key Setup$/;"	S	section:Memory Backend Setup
🐦 Connect with Us on Twitter	README.md	/^## 🐦 Connect with Us on Twitter$/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
💀 Continuous Mode ⚠️	docs/usage.md	/^### 💀 Continuous Mode ⚠️$/;"	S	section:Usage""Command Line Arguments
💡 Get help - [Q&A](https://github.com/Significant-Gravitas/Auto-GPT/discussions/categories/q-a) or [Discord 💬](https://discord.gg/autogpt)	README.md	/^## 💡 Get help - [Q&A](https:\/\/github.com\/Significant-Gravitas\/Auto-GPT\/discussions\/cate/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
📋 Requirements	docs/setup.md	/^## 📋 Requirements$/;"	s	chapter:Setting up Auto-GPT
📖 Documentation	README.md	/^## 📖 Documentation$/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
🔍 Google API Keys Configuration	docs/configuration/search.md	/^## 🔍 Google API Keys Configuration$/;"	s
🔴 USE `stable` not `master` 🔴	README.md	/^### 🔴 USE `stable` not `master` 🔴$/;"	S	section:Auto-GPT: An Autonomous GPT-4 Experiment""💡 Get help - [Q&A](https://github.com/Significant-Gravitas/Auto-GPT/discussions/categories/q-a) or [Discord 💬](https://discord.gg/autogpt)
🖼 Image Generation configuration	docs/configuration/imagegen.md	/^# 🖼 Image Generation configuration$/;"	c
🗝️ Getting an API key	docs/setup.md	/^## 🗝️ Getting an API key$/;"	s	chapter:Setting up Auto-GPT
🚀 Features	README.md	/^## 🚀 Features$/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
🛡 Disclaimer	README.md	/^## 🛡 Disclaimer$/;"	s	chapter:Auto-GPT: An Autonomous GPT-4 Experiment
🧠 Memory pre-seeding	docs/configuration/memory.md	/^## 🧠 Memory pre-seeding$/;"	s
